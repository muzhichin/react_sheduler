!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!M[e]||!v[e])return;for(var n in v[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(_[n]=t[n]);0==--p&&0===y&&k()}(e,n),t&&t(e,n)};var n,r=!0,o="cb91a3ebff9f4284b941",a=1e4,i={},s=[],u=[];function l(e){var t=T[e];if(!t)return x;var r=function(r){return t.hot.active?(T[r]?-1===T[r].parents.indexOf(e)&&T[r].parents.push(e):(s=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),s=[]),x(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return x[e]},set:function(t){x[e]=t}}};for(var a in x)Object.prototype.hasOwnProperty.call(x,a)&&"e"!==a&&Object.defineProperty(r,a,o(a));return r.e=function(e){return"ready"===c&&f("prepare"),y++,x.e(e).then(t,function(e){throw t(),e});function t(){y--,"prepare"===c&&(g[e]||w(e),0===y&&0===p&&k())}},r}var d=[],c="idle";function f(e){c=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var m,_,h,p=0,y=0,g={},v={},M={};function b(e){return+e+""===e?+e:e}function L(e){if("idle"!==c)throw new Error("check() is only allowed in idle status");return r=e,f("check"),(t=a,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,a=x.p+""+o+".hot-update.json";r.open("GET",a,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+a+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+a+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return f("idle"),null;v={},g={},M=e.c,h=e.h,f("prepare");var t=new Promise(function(e,t){m={resolve:e,reject:t}});_={};return w(0),"prepare"===c&&0===y&&0===p&&k(),t});var t}function w(e){M[e]?(v[e]=!0,p++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=x.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):g[e]=!0}function k(){f("ready");var e=m;if(m=null,e)if(r)Promise.resolve().then(function(){return Y(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in _)Object.prototype.hasOwnProperty.call(_,n)&&t.push(b(n));e.resolve(t)}}function Y(t){if("ready"!==c)throw new Error("apply() is only allowed in ready status");var n,r,a,u,l;function d(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),a=o.id,i=o.chain;if((u=T[a])&&!u.hot._selfAccepted){if(u.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:a};if(u.hot._main)return{type:"unaccepted",chain:i,moduleId:a};for(var s=0;s<u.parents.length;s++){var l=u.parents[s],d=T[l];if(d){if(d.hot._declinedDependencies[a])return{type:"declined",chain:i.concat([l]),moduleId:a,parentId:l};-1===t.indexOf(l)&&(d.hot._acceptedDependencies[a]?(n[l]||(n[l]=[]),m(n[l],[a])):(delete n[l],t.push(l),r.push({chain:i.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var p={},y=[],g={},v=function(){console.warn("[HMR] unexpected require("+w.moduleId+") to disposed module")};for(var L in _)if(Object.prototype.hasOwnProperty.call(_,L)){var w;l=b(L);var k=!1,Y=!1,D=!1,j="";switch((w=_[L]?d(l):{type:"disposed",moduleId:L}).chain&&(j="\nUpdate propagation: "+w.chain.join(" -> ")),w.type){case"self-declined":t.onDeclined&&t.onDeclined(w),t.ignoreDeclined||(k=new Error("Aborted because of self decline: "+w.moduleId+j));break;case"declined":t.onDeclined&&t.onDeclined(w),t.ignoreDeclined||(k=new Error("Aborted because of declined dependency: "+w.moduleId+" in "+w.parentId+j));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(w),t.ignoreUnaccepted||(k=new Error("Aborted because "+l+" is not accepted"+j));break;case"accepted":t.onAccepted&&t.onAccepted(w),Y=!0;break;case"disposed":t.onDisposed&&t.onDisposed(w),D=!0;break;default:throw new Error("Unexception type "+w.type)}if(k)return f("abort"),Promise.reject(k);if(Y)for(l in g[l]=_[l],m(y,w.outdatedModules),w.outdatedDependencies)Object.prototype.hasOwnProperty.call(w.outdatedDependencies,l)&&(p[l]||(p[l]=[]),m(p[l],w.outdatedDependencies[l]));D&&(m(y,[w.moduleId]),g[l]=v)}var S,E=[];for(r=0;r<y.length;r++)l=y[r],T[l]&&T[l].hot._selfAccepted&&E.push({module:l,errorHandler:T[l].hot._selfAccepted});f("dispose"),Object.keys(M).forEach(function(e){!1===M[e]&&function(e){delete installedChunks[e]}(e)});for(var C,H,O=y.slice();O.length>0;)if(l=O.pop(),u=T[l]){var P={},N=u.hot._disposeHandlers;for(a=0;a<N.length;a++)(n=N[a])(P);for(i[l]=P,u.hot.active=!1,delete T[l],delete p[l],a=0;a<u.children.length;a++){var A=T[u.children[a]];A&&((S=A.parents.indexOf(l))>=0&&A.parents.splice(S,1))}}for(l in p)if(Object.prototype.hasOwnProperty.call(p,l)&&(u=T[l]))for(H=p[l],a=0;a<H.length;a++)C=H[a],(S=u.children.indexOf(C))>=0&&u.children.splice(S,1);for(l in f("apply"),o=h,g)Object.prototype.hasOwnProperty.call(g,l)&&(e[l]=g[l]);var F=null;for(l in p)if(Object.prototype.hasOwnProperty.call(p,l)&&(u=T[l])){H=p[l];var I=[];for(r=0;r<H.length;r++)if(C=H[r],n=u.hot._acceptedDependencies[C]){if(-1!==I.indexOf(n))continue;I.push(n)}for(r=0;r<I.length;r++){n=I[r];try{n(H)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:l,dependencyId:H[r],error:e}),t.ignoreErrored||F||(F=e)}}}for(r=0;r<E.length;r++){var z=E[r];l=z.module,s=[l];try{x(l)}catch(e){if("function"==typeof z.errorHandler)try{z.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:n,originalError:e}),t.ignoreErrored||F||(F=n),F||(F=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:l,error:e}),t.ignoreErrored||F||(F=e)}}return F?(f("fail"),Promise.reject(F)):(f("idle"),new Promise(function(e){e(y)}))}var T={};function x(t){if(T[t])return T[t].exports;var r=T[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:L,apply:Y,status:function(e){if(!e)return c;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:i[e]};return n=void 0,t}(t),parents:(u=s,s=[],u),children:[]};return e[t].call(r.exports,r,r.exports,l(t)),r.l=!0,r.exports}x.m=e,x.c=T,x.d=function(e,t,n){x.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},x.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},x.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return x.d(t,"a",t),t},x.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},x.p="",x.h=function(){return o},l(0)(x.s=0)}({"./node_modules/d3/index.js":function(e,t,n){"use strict";n.r(t);var r=function(e,t){return e<t?-1:e>t?1:e>=t?0:NaN},o=function(e){var t;return 1===e.length&&(t=e,e=function(e,n){return r(t(e),n)}),{left:function(t,n,r,o){for(null==r&&(r=0),null==o&&(o=t.length);r<o;){var a=r+o>>>1;e(t[a],n)<0?r=a+1:o=a}return r},right:function(t,n,r,o){for(null==r&&(r=0),null==o&&(o=t.length);r<o;){var a=r+o>>>1;e(t[a],n)>0?o=a:r=a+1}return r}}};var a=o(r),i=a.right,s=a.left,u=i,l=function(e,t){null==t&&(t=d);for(var n=0,r=e.length-1,o=e[0],a=new Array(r<0?0:r);n<r;)a[n]=t(o,o=e[++n]);return a};function d(e,t){return[e,t]}var c=function(e,t,n){var r,o,a,i,s=e.length,u=t.length,l=new Array(s*u);for(null==n&&(n=d),r=a=0;r<s;++r)for(i=e[r],o=0;o<u;++o,++a)l[a]=n(i,t[o]);return l},f=function(e,t){return t<e?-1:t>e?1:t>=e?0:NaN},m=function(e){return null===e?NaN:+e},_=function(e,t){var n,r,o=e.length,a=0,i=-1,s=0,u=0;if(null==t)for(;++i<o;)isNaN(n=m(e[i]))||(u+=(r=n-s)*(n-(s+=r/++a)));else for(;++i<o;)isNaN(n=m(t(e[i],i,e)))||(u+=(r=n-s)*(n-(s+=r/++a)));if(a>1)return u/(a-1)},h=function(e,t){var n=_(e,t);return n?Math.sqrt(n):n},p=function(e,t){var n,r,o,a=e.length,i=-1;if(null==t){for(;++i<a;)if(null!=(n=e[i])&&n>=n)for(r=o=n;++i<a;)null!=(n=e[i])&&(r>n&&(r=n),o<n&&(o=n))}else for(;++i<a;)if(null!=(n=t(e[i],i,e))&&n>=n)for(r=o=n;++i<a;)null!=(n=t(e[i],i,e))&&(r>n&&(r=n),o<n&&(o=n));return[r,o]},y=Array.prototype,g=y.slice,v=y.map,M=function(e){return function(){return e}},b=function(e){return e},L=function(e,t,n){e=+e,t=+t,n=(o=arguments.length)<2?(t=e,e=0,1):o<3?1:+n;for(var r=-1,o=0|Math.max(0,Math.ceil((t-e)/n)),a=new Array(o);++r<o;)a[r]=e+r*n;return a},w=Math.sqrt(50),k=Math.sqrt(10),Y=Math.sqrt(2),T=function(e,t,n){var r,o,a,i,s=-1;if(n=+n,(e=+e)===(t=+t)&&n>0)return[e];if((r=t<e)&&(o=e,e=t,t=o),0===(i=x(e,t,n))||!isFinite(i))return[];if(i>0)for(e=Math.ceil(e/i),t=Math.floor(t/i),a=new Array(o=Math.ceil(t-e+1));++s<o;)a[s]=(e+s)*i;else for(e=Math.floor(e*i),t=Math.ceil(t*i),a=new Array(o=Math.ceil(e-t+1));++s<o;)a[s]=(e-s)/i;return r&&a.reverse(),a};function x(e,t,n){var r=(t-e)/Math.max(0,n),o=Math.floor(Math.log(r)/Math.LN10),a=r/Math.pow(10,o);return o>=0?(a>=w?10:a>=k?5:a>=Y?2:1)*Math.pow(10,o):-Math.pow(10,-o)/(a>=w?10:a>=k?5:a>=Y?2:1)}function D(e,t,n){var r=Math.abs(t-e)/Math.max(0,n),o=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),a=r/o;return a>=w?o*=10:a>=k?o*=5:a>=Y&&(o*=2),t<e?-o:o}var j=function(e){return Math.ceil(Math.log(e.length)/Math.LN2)+1},S=function(){var e=b,t=p,n=j;function r(r){var o,a,i=r.length,s=new Array(i);for(o=0;o<i;++o)s[o]=e(r[o],o,r);var l=t(s),d=l[0],c=l[1],f=n(s,d,c);Array.isArray(f)||(f=D(d,c,f),f=L(Math.ceil(d/f)*f,Math.floor(c/f)*f,f));for(var m=f.length;f[0]<=d;)f.shift(),--m;for(;f[m-1]>c;)f.pop(),--m;var _,h=new Array(m+1);for(o=0;o<=m;++o)(_=h[o]=[]).x0=o>0?f[o-1]:d,_.x1=o<m?f[o]:c;for(o=0;o<i;++o)d<=(a=s[o])&&a<=c&&h[u(f,a,0,m)].push(r[o]);return h}return r.value=function(t){return arguments.length?(e="function"==typeof t?t:M(t),r):e},r.domain=function(e){return arguments.length?(t="function"==typeof e?e:M([e[0],e[1]]),r):t},r.thresholds=function(e){return arguments.length?(n="function"==typeof e?e:Array.isArray(e)?M(g.call(e)):M(e),r):n},r},E=function(e,t,n){if(null==n&&(n=m),r=e.length){if((t=+t)<=0||r<2)return+n(e[0],0,e);if(t>=1)return+n(e[r-1],r-1,e);var r,o=(r-1)*t,a=Math.floor(o),i=+n(e[a],a,e);return i+(+n(e[a+1],a+1,e)-i)*(o-a)}},C=function(e,t,n){return e=v.call(e,m).sort(r),Math.ceil((n-t)/(2*(E(e,.75)-E(e,.25))*Math.pow(e.length,-1/3)))},H=function(e,t,n){return Math.ceil((n-t)/(3.5*h(e)*Math.pow(e.length,-1/3)))},O=function(e,t){var n,r,o=e.length,a=-1;if(null==t){for(;++a<o;)if(null!=(n=e[a])&&n>=n)for(r=n;++a<o;)null!=(n=e[a])&&n>r&&(r=n)}else for(;++a<o;)if(null!=(n=t(e[a],a,e))&&n>=n)for(r=n;++a<o;)null!=(n=t(e[a],a,e))&&n>r&&(r=n);return r},P=function(e,t){var n,r=e.length,o=r,a=-1,i=0;if(null==t)for(;++a<r;)isNaN(n=m(e[a]))?--o:i+=n;else for(;++a<r;)isNaN(n=m(t(e[a],a,e)))?--o:i+=n;if(o)return i/o},N=function(e,t){var n,o=e.length,a=-1,i=[];if(null==t)for(;++a<o;)isNaN(n=m(e[a]))||i.push(n);else for(;++a<o;)isNaN(n=m(t(e[a],a,e)))||i.push(n);return E(i.sort(r),.5)},A=function(e){for(var t,n,r,o=e.length,a=-1,i=0;++a<o;)i+=e[a].length;for(n=new Array(i);--o>=0;)for(t=(r=e[o]).length;--t>=0;)n[--i]=r[t];return n},F=function(e,t){var n,r,o=e.length,a=-1;if(null==t){for(;++a<o;)if(null!=(n=e[a])&&n>=n)for(r=n;++a<o;)null!=(n=e[a])&&r>n&&(r=n)}else for(;++a<o;)if(null!=(n=t(e[a],a,e))&&n>=n)for(r=n;++a<o;)null!=(n=t(e[a],a,e))&&r>n&&(r=n);return r},I=function(e,t){for(var n=t.length,r=new Array(n);n--;)r[n]=e[t[n]];return r},z=function(e,t){if(n=e.length){var n,o,a=0,i=0,s=e[i];for(null==t&&(t=r);++a<n;)(t(o=e[a],s)<0||0!==t(s,s))&&(s=o,i=a);return 0===t(s,s)?i:void 0}},R=function(e,t,n){for(var r,o,a=(null==n?e.length:n)-(t=null==t?0:+t);a;)o=Math.random()*a--|0,r=e[a+t],e[a+t]=e[o+t],e[o+t]=r;return e},W=function(e,t){var n,r=e.length,o=-1,a=0;if(null==t)for(;++o<r;)(n=+e[o])&&(a+=n);else for(;++o<r;)(n=+t(e[o],o,e))&&(a+=n);return a},U=function(e){if(!(o=e.length))return[];for(var t=-1,n=F(e,B),r=new Array(n);++t<n;)for(var o,a=-1,i=r[t]=new Array(o);++a<o;)i[a]=e[a][t];return r};function B(e){return e.length}var V=function(){return U(arguments)},q=Array.prototype.slice,G=function(e){return e},J=1,K=2,$=3,Q=4,X=1e-6;function Z(e){return"translate("+(e+.5)+",0)"}function ee(e){return"translate(0,"+(e+.5)+")"}function te(){return!this.__axis}function ne(e,t){var n=[],r=null,o=null,a=6,i=6,s=3,u=e===J||e===Q?-1:1,l=e===Q||e===K?"x":"y",d=e===J||e===$?Z:ee;function c(c){var f=null==r?t.ticks?t.ticks.apply(t,n):t.domain():r,m=null==o?t.tickFormat?t.tickFormat.apply(t,n):G:o,_=Math.max(a,0)+s,h=t.range(),p=+h[0]+.5,y=+h[h.length-1]+.5,g=(t.bandwidth?function(e){var t=Math.max(0,e.bandwidth()-1)/2;return e.round()&&(t=Math.round(t)),function(n){return+e(n)+t}}:function(e){return function(t){return+e(t)}})(t.copy()),v=c.selection?c.selection():c,M=v.selectAll(".domain").data([null]),b=v.selectAll(".tick").data(f,t).order(),L=b.exit(),w=b.enter().append("g").attr("class","tick"),k=b.select("line"),Y=b.select("text");M=M.merge(M.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),b=b.merge(w),k=k.merge(w.append("line").attr("stroke","#000").attr(l+"2",u*a)),Y=Y.merge(w.append("text").attr("fill","#000").attr(l,u*_).attr("dy",e===J?"0em":e===$?"0.71em":"0.32em")),c!==v&&(M=M.transition(c),b=b.transition(c),k=k.transition(c),Y=Y.transition(c),L=L.transition(c).attr("opacity",X).attr("transform",function(e){return isFinite(e=g(e))?d(e):this.getAttribute("transform")}),w.attr("opacity",X).attr("transform",function(e){var t=this.parentNode.__axis;return d(t&&isFinite(t=t(e))?t:g(e))})),L.remove(),M.attr("d",e===Q||e==K?"M"+u*i+","+p+"H0.5V"+y+"H"+u*i:"M"+p+","+u*i+"V0.5H"+y+"V"+u*i),b.attr("opacity",1).attr("transform",function(e){return d(g(e))}),k.attr(l+"2",u*a),Y.attr(l,u*_).text(m),v.filter(te).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",e===K?"start":e===Q?"end":"middle"),v.each(function(){this.__axis=g})}return c.scale=function(e){return arguments.length?(t=e,c):t},c.ticks=function(){return n=q.call(arguments),c},c.tickArguments=function(e){return arguments.length?(n=null==e?[]:q.call(e),c):n.slice()},c.tickValues=function(e){return arguments.length?(r=null==e?null:q.call(e),c):r&&r.slice()},c.tickFormat=function(e){return arguments.length?(o=e,c):o},c.tickSize=function(e){return arguments.length?(a=i=+e,c):a},c.tickSizeInner=function(e){return arguments.length?(a=+e,c):a},c.tickSizeOuter=function(e){return arguments.length?(i=+e,c):i},c.tickPadding=function(e){return arguments.length?(s=+e,c):s},c}function re(e){return ne(J,e)}function oe(e){return ne(K,e)}function ae(e){return ne($,e)}function ie(e){return ne(Q,e)}var se={value:function(){}};function ue(){for(var e,t=0,n=arguments.length,r={};t<n;++t){if(!(e=arguments[t]+"")||e in r)throw new Error("illegal type: "+e);r[e]=[]}return new le(r)}function le(e){this._=e}function de(e,t){for(var n,r=0,o=e.length;r<o;++r)if((n=e[r]).name===t)return n.value}function ce(e,t,n){for(var r=0,o=e.length;r<o;++r)if(e[r].name===t){e[r]=se,e=e.slice(0,r).concat(e.slice(r+1));break}return null!=n&&e.push({name:t,value:n}),e}le.prototype=ue.prototype={constructor:le,on:function(e,t){var n,r,o=this._,a=(r=o,(e+"").trim().split(/^|\s+/).map(function(e){var t="",n=e.indexOf(".");if(n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),e&&!r.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:t}})),i=-1,s=a.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++i<s;)if(n=(e=a[i]).type)o[n]=ce(o[n],e.name,t);else if(null==t)for(n in o)o[n]=ce(o[n],e.name,null);return this}for(;++i<s;)if((n=(e=a[i]).type)&&(n=de(o[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new le(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,r,o=new Array(n),a=0;a<n;++a)o[a]=arguments[a+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(a=0,n=(r=this._[e]).length;a<n;++a)r[a].value.apply(t,o)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],o=0,a=r.length;o<a;++o)r[o].value.apply(t,n)}};var fe=ue,me="http://www.w3.org/1999/xhtml",_e={svg:"http://www.w3.org/2000/svg",xhtml:me,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},he=function(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),_e.hasOwnProperty(t)?{space:_e[t],local:e}:e};var pe=function(e){var t=he(e);return(t.local?function(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}:function(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===me&&t.documentElement.namespaceURI===me?t.createElement(e):t.createElementNS(n,e)}})(t)};function ye(){}var ge=function(e){return null==e?ye:function(){return this.querySelector(e)}};function ve(){return[]}var Me=function(e){return null==e?ve:function(){return this.querySelectorAll(e)}},be=function(e){return function(){return this.matches(e)}};if("undefined"!=typeof document){var Le=document.documentElement;if(!Le.matches){var we=Le.webkitMatchesSelector||Le.msMatchesSelector||Le.mozMatchesSelector||Le.oMatchesSelector;be=function(e){return function(){return we.call(this,e)}}}}var ke=be,Ye=function(e){return new Array(e.length)};function Te(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}Te.prototype={constructor:Te,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};var xe="$";function De(e,t,n,r,o,a){for(var i,s=0,u=t.length,l=a.length;s<l;++s)(i=t[s])?(i.__data__=a[s],r[s]=i):n[s]=new Te(e,a[s]);for(;s<u;++s)(i=t[s])&&(o[s]=i)}function je(e,t,n,r,o,a,i){var s,u,l,d={},c=t.length,f=a.length,m=new Array(c);for(s=0;s<c;++s)(u=t[s])&&(m[s]=l=xe+i.call(u,u.__data__,s,t),l in d?o[s]=u:d[l]=u);for(s=0;s<f;++s)(u=d[l=xe+i.call(e,a[s],s,a)])?(r[s]=u,u.__data__=a[s],d[l]=null):n[s]=new Te(e,a[s]);for(s=0;s<c;++s)(u=t[s])&&d[m[s]]===u&&(o[s]=u)}function Se(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}var Ee=function(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView};function Ce(e,t){return e.style.getPropertyValue(t)||Ee(e).getComputedStyle(e,null).getPropertyValue(t)}function He(e){return e.trim().split(/^|\s+/)}function Oe(e){return e.classList||new Pe(e)}function Pe(e){this._node=e,this._names=He(e.getAttribute("class")||"")}function Ne(e,t){for(var n=Oe(e),r=-1,o=t.length;++r<o;)n.add(t[r])}function Ae(e,t){for(var n=Oe(e),r=-1,o=t.length;++r<o;)n.remove(t[r])}Pe.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};function Fe(){this.textContent=""}function Ie(){this.innerHTML=""}function ze(){this.nextSibling&&this.parentNode.appendChild(this)}function Re(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function We(){return null}function Ue(){var e=this.parentNode;e&&e.removeChild(this)}function Be(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Ve(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var qe={},Ge=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(qe={mouseenter:"mouseover",mouseleave:"mouseout"}));function Je(e,t,n){return e=Ke(e,t,n),function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}function Ke(e,t,n){return function(r){var o=Ge;Ge=r;try{e.call(this,this.__data__,t,n)}finally{Ge=o}}}function $e(e){return function(){var t=this.__on;if(t){for(var n,r=0,o=-1,a=t.length;r<a;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++o]=n:this.removeEventListener(n.type,n.listener,n.capture);++o?t.length=o:delete this.__on}}}function Qe(e,t,n){var r=qe.hasOwnProperty(e.type)?Je:Ke;return function(o,a,i){var s,u=this.__on,l=r(t,a,i);if(u)for(var d=0,c=u.length;d<c;++d)if((s=u[d]).type===e.type&&s.name===e.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=l,s.capture=n),void(s.value=t);this.addEventListener(e.type,l,n),s={type:e.type,name:e.name,value:t,listener:l,capture:n},u?u.push(s):this.__on=[s]}}function Xe(e,t,n,r){var o=Ge;e.sourceEvent=Ge,Ge=e;try{return t.apply(n,r)}finally{Ge=o}}function Ze(e,t,n){var r=Ee(e),o=r.CustomEvent;"function"==typeof o?o=new o(t,n):(o=r.document.createEvent("Event"),n?(o.initEvent(t,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(t,!1,!1)),e.dispatchEvent(o)}var et=[null];function tt(e,t){this._groups=e,this._parents=t}function nt(){return new tt([[document.documentElement]],et)}tt.prototype=nt.prototype={constructor:tt,select:function(e){"function"!=typeof e&&(e=ge(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var a,i,s=t[o],u=s.length,l=r[o]=new Array(u),d=0;d<u;++d)(a=s[d])&&(i=e.call(a,a.__data__,d,s))&&("__data__"in a&&(i.__data__=a.__data__),l[d]=i);return new tt(r,this._parents)},selectAll:function(e){"function"!=typeof e&&(e=Me(e));for(var t=this._groups,n=t.length,r=[],o=[],a=0;a<n;++a)for(var i,s=t[a],u=s.length,l=0;l<u;++l)(i=s[l])&&(r.push(e.call(i,i.__data__,l,s)),o.push(i));return new tt(r,o)},filter:function(e){"function"!=typeof e&&(e=ke(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var a,i=t[o],s=i.length,u=r[o]=[],l=0;l<s;++l)(a=i[l])&&e.call(a,a.__data__,l,i)&&u.push(a);return new tt(r,this._parents)},data:function(e,t){if(!e)return _=new Array(this.size()),d=-1,this.each(function(e){_[++d]=e}),_;var n,r=t?je:De,o=this._parents,a=this._groups;"function"!=typeof e&&(n=e,e=function(){return n});for(var i=a.length,s=new Array(i),u=new Array(i),l=new Array(i),d=0;d<i;++d){var c=o[d],f=a[d],m=f.length,_=e.call(c,c&&c.__data__,d,o),h=_.length,p=u[d]=new Array(h),y=s[d]=new Array(h);r(c,f,p,y,l[d]=new Array(m),_,t);for(var g,v,M=0,b=0;M<h;++M)if(g=p[M]){for(M>=b&&(b=M+1);!(v=y[b])&&++b<h;);g._next=v||null}}return(s=new tt(s,o))._enter=u,s._exit=l,s},enter:function(){return new tt(this._enter||this._groups.map(Ye),this._parents)},exit:function(){return new tt(this._exit||this._groups.map(Ye),this._parents)},merge:function(e){for(var t=this._groups,n=e._groups,r=t.length,o=n.length,a=Math.min(r,o),i=new Array(r),s=0;s<a;++s)for(var u,l=t[s],d=n[s],c=l.length,f=i[s]=new Array(c),m=0;m<c;++m)(u=l[m]||d[m])&&(f[m]=u);for(;s<r;++s)i[s]=t[s];return new tt(i,this._parents)},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,o=e[t],a=o.length-1,i=o[a];--a>=0;)(r=o[a])&&(i&&i!==r.nextSibling&&i.parentNode.insertBefore(r,i),i=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=Se);for(var n=this._groups,r=n.length,o=new Array(r),a=0;a<r;++a){for(var i,s=n[a],u=s.length,l=o[a]=new Array(u),d=0;d<u;++d)(i=s[d])&&(l[d]=i);l.sort(t)}return new tt(o,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){var e=new Array(this.size()),t=-1;return this.each(function(){e[++t]=this}),e},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],o=0,a=r.length;o<a;++o){var i=r[o];if(i)return i}return null},size:function(){var e=0;return this.each(function(){++e}),e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var o,a=t[n],i=0,s=a.length;i<s;++i)(o=a[i])&&e.call(o,o.__data__,i,a);return this},attr:function(e,t){var n=he(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?function(e){return function(){this.removeAttributeNS(e.space,e.local)}}:function(e){return function(){this.removeAttribute(e)}}:"function"==typeof t?n.local?function(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}:function(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}:n.local?function(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}:function(e,t){return function(){this.setAttribute(e,t)}})(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?function(e){return function(){this.style.removeProperty(e)}}:"function"==typeof t?function(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}:function(e,t,n){return function(){this.style.setProperty(e,t,n)}})(e,t,null==n?"":n)):Ce(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?function(e){return function(){delete this[e]}}:"function"==typeof t?function(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}:function(e,t){return function(){this[e]=t}})(e,t)):this.node()[e]},classed:function(e,t){var n=He(e+"");if(arguments.length<2){for(var r=Oe(this.node()),o=-1,a=n.length;++o<a;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof t?function(e,t){return function(){(t.apply(this,arguments)?Ne:Ae)(this,e)}}:t?function(e){return function(){Ne(this,e)}}:function(e){return function(){Ae(this,e)}})(n,t))},text:function(e){return arguments.length?this.each(null==e?Fe:("function"==typeof e?function(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}:function(e){return function(){this.textContent=e}})(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?Ie:("function"==typeof e?function(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}:function(e){return function(){this.innerHTML=e}})(e)):this.node().innerHTML},raise:function(){return this.each(ze)},lower:function(){return this.each(Re)},append:function(e){var t="function"==typeof e?e:pe(e);return this.select(function(){return this.appendChild(t.apply(this,arguments))})},insert:function(e,t){var n="function"==typeof e?e:pe(e),r=null==t?We:"function"==typeof t?t:ge(t);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(Ue)},clone:function(e){return this.select(e?Ve:Be)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,o,a=function(e){return e.trim().split(/^|\s+/).map(function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}})}(e+""),i=a.length;if(!(arguments.length<2)){for(s=t?Qe:$e,null==n&&(n=!1),r=0;r<i;++r)this.each(s(a[r],t,n));return this}var s=this.node().__on;if(s)for(var u,l=0,d=s.length;l<d;++l)for(r=0,u=s[l];r<i;++r)if((o=a[r]).type===u.type&&o.name===u.name)return u.value},dispatch:function(e,t){return this.each(("function"==typeof t?function(e,t){return function(){return Ze(this,e,t.apply(this,arguments))}}:function(e,t){return function(){return Ze(this,e,t)}})(e,t))}};var rt=nt,ot=function(e){return"string"==typeof e?new tt([[document.querySelector(e)]],[document.documentElement]):new tt([[e]],et)},at=function(e){return ot(pe(e).call(document.documentElement))},it=0;function st(){return new ut}function ut(){this._="@"+(++it).toString(36)}ut.prototype=st.prototype={constructor:ut,get:function(e){for(var t=this._;!(t in e);)if(!(e=e.parentNode))return;return e[t]},set:function(e,t){return e[this._]=t},remove:function(e){return this._ in e&&delete e[this._]},toString:function(){return this._}};var lt=function(){for(var e,t=Ge;e=t.sourceEvent;)t=e;return t},dt=function(e,t){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}var o=e.getBoundingClientRect();return[t.clientX-o.left-e.clientLeft,t.clientY-o.top-e.clientTop]},ct=function(e){var t=lt();return t.changedTouches&&(t=t.changedTouches[0]),dt(e,t)},ft=function(e){return"string"==typeof e?new tt([document.querySelectorAll(e)],[document.documentElement]):new tt([null==e?[]:e],et)},mt=function(e,t,n){arguments.length<3&&(n=t,t=lt().changedTouches);for(var r,o=0,a=t?t.length:0;o<a;++o)if((r=t[o]).identifier===n)return dt(e,r);return null},_t=function(e,t){null==t&&(t=lt().touches);for(var n=0,r=t?t.length:0,o=new Array(r);n<r;++n)o[n]=dt(e,t[n]);return o};function ht(){Ge.stopImmediatePropagation()}var pt=function(){Ge.preventDefault(),Ge.stopImmediatePropagation()},yt=function(e){var t=e.document.documentElement,n=ot(e).on("dragstart.drag",pt,!0);"onselectstart"in t?n.on("selectstart.drag",pt,!0):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect="none")};function gt(e,t){var n=e.document.documentElement,r=ot(e).on("dragstart.drag",null);t&&(r.on("click.drag",pt,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}var vt=function(e){return function(){return e}};function Mt(e,t,n,r,o,a,i,s,u,l){this.target=e,this.type=t,this.subject=n,this.identifier=r,this.active=o,this.x=a,this.y=i,this.dx=s,this.dy=u,this._=l}function bt(){return!Ge.button}function Lt(){return this.parentNode}function wt(e){return null==e?{x:Ge.x,y:Ge.y}:e}function kt(){return"ontouchstart"in this}Mt.prototype.on=function(){var e=this._.on.apply(this._,arguments);return e===this._?this:e};var Yt=function(){var e,t,n,r,o=bt,a=Lt,i=wt,s=kt,u={},l=fe("start","drag","end"),d=0,c=0;function f(e){e.on("mousedown.drag",m).filter(s).on("touchstart.drag",p).on("touchmove.drag",y).on("touchend.drag touchcancel.drag",g).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function m(){if(!r&&o.apply(this,arguments)){var i=v("mouse",a.apply(this,arguments),ct,this,arguments);i&&(ot(Ge.view).on("mousemove.drag",_,!0).on("mouseup.drag",h,!0),yt(Ge.view),ht(),n=!1,e=Ge.clientX,t=Ge.clientY,i("start"))}}function _(){if(pt(),!n){var r=Ge.clientX-e,o=Ge.clientY-t;n=r*r+o*o>c}u.mouse("drag")}function h(){ot(Ge.view).on("mousemove.drag mouseup.drag",null),gt(Ge.view,n),pt(),u.mouse("end")}function p(){if(o.apply(this,arguments)){var e,t,n=Ge.changedTouches,r=a.apply(this,arguments),i=n.length;for(e=0;e<i;++e)(t=v(n[e].identifier,r,mt,this,arguments))&&(ht(),t("start"))}}function y(){var e,t,n=Ge.changedTouches,r=n.length;for(e=0;e<r;++e)(t=u[n[e].identifier])&&(pt(),t("drag"))}function g(){var e,t,n=Ge.changedTouches,o=n.length;for(r&&clearTimeout(r),r=setTimeout(function(){r=null},500),e=0;e<o;++e)(t=u[n[e].identifier])&&(ht(),t("end"))}function v(e,t,n,r,o){var a,s,c,m=n(t,e),_=l.copy();if(Xe(new Mt(f,"beforestart",a,e,d,m[0],m[1],0,0,_),function(){return null!=(Ge.subject=a=i.apply(r,o))&&(s=a.x-m[0]||0,c=a.y-m[1]||0,!0)}))return function i(l){var h,p=m;switch(l){case"start":u[e]=i,h=d++;break;case"end":delete u[e],--d;case"drag":m=n(t,e),h=d}Xe(new Mt(f,l,a,e,h,m[0]+s,m[1]+c,m[0]-p[0],m[1]-p[1],_),_.apply,_,[l,r,o])}}return f.filter=function(e){return arguments.length?(o="function"==typeof e?e:vt(!!e),f):o},f.container=function(e){return arguments.length?(a="function"==typeof e?e:vt(e),f):a},f.subject=function(e){return arguments.length?(i="function"==typeof e?e:vt(e),f):i},f.touchable=function(e){return arguments.length?(s="function"==typeof e?e:vt(!!e),f):s},f.on=function(){var e=l.on.apply(l,arguments);return e===l?f:e},f.clickDistance=function(e){return arguments.length?(c=(e=+e)*e,f):Math.sqrt(c)},f},Tt=function(e,t,n){e.prototype=t.prototype=n,n.constructor=e};function xt(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function Dt(){}var jt="\\s*([+-]?\\d+)\\s*",St="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Et="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Ct=/^#([0-9a-f]{3})$/,Ht=/^#([0-9a-f]{6})$/,Ot=new RegExp("^rgb\\("+[jt,jt,jt]+"\\)$"),Pt=new RegExp("^rgb\\("+[Et,Et,Et]+"\\)$"),Nt=new RegExp("^rgba\\("+[jt,jt,jt,St]+"\\)$"),At=new RegExp("^rgba\\("+[Et,Et,Et,St]+"\\)$"),Ft=new RegExp("^hsl\\("+[St,Et,Et]+"\\)$"),It=new RegExp("^hsla\\("+[St,Et,Et,St]+"\\)$"),zt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Rt(e){var t;return e=(e+"").trim().toLowerCase(),(t=Ct.exec(e))?new qt((t=parseInt(t[1],16))>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):(t=Ht.exec(e))?Wt(parseInt(t[1],16)):(t=Ot.exec(e))?new qt(t[1],t[2],t[3],1):(t=Pt.exec(e))?new qt(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=Nt.exec(e))?Ut(t[1],t[2],t[3],t[4]):(t=At.exec(e))?Ut(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=Ft.exec(e))?Gt(t[1],t[2]/100,t[3]/100,1):(t=It.exec(e))?Gt(t[1],t[2]/100,t[3]/100,t[4]):zt.hasOwnProperty(e)?Wt(zt[e]):"transparent"===e?new qt(NaN,NaN,NaN,0):null}function Wt(e){return new qt(e>>16&255,e>>8&255,255&e,1)}function Ut(e,t,n,r){return r<=0&&(e=t=n=NaN),new qt(e,t,n,r)}function Bt(e){return e instanceof Dt||(e=Rt(e)),e?new qt((e=e.rgb()).r,e.g,e.b,e.opacity):new qt}function Vt(e,t,n,r){return 1===arguments.length?Bt(e):new qt(e,t,n,null==r?1:r)}function qt(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function Gt(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new Kt(e,t,n,r)}function Jt(e,t,n,r){return 1===arguments.length?function(e){if(e instanceof Kt)return new Kt(e.h,e.s,e.l,e.opacity);if(e instanceof Dt||(e=Rt(e)),!e)return new Kt;if(e instanceof Kt)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,o=Math.min(t,n,r),a=Math.max(t,n,r),i=NaN,s=a-o,u=(a+o)/2;return s?(i=t===a?(n-r)/s+6*(n<r):n===a?(r-t)/s+2:(t-n)/s+4,s/=u<.5?a+o:2-a-o,i*=60):s=u>0&&u<1?0:i,new Kt(i,s,u,e.opacity)}(e):new Kt(e,t,n,null==r?1:r)}function Kt(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function $t(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}Tt(Dt,Rt,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),Tt(qt,Vt,xt(Dt,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new qt(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new qt(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}})),Tt(Kt,Jt,xt(Dt,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new Kt(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new Kt(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,o=2*n-r;return new qt($t(e>=240?e-240:e+120,o,r),$t(e,o,r),$t(e<120?e+240:e-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Qt=Math.PI/180,Xt=180/Math.PI,Zt=.96422,en=1,tn=.82521,nn=4/29,rn=6/29,on=3*rn*rn,an=rn*rn*rn;function sn(e){if(e instanceof dn)return new dn(e.l,e.a,e.b,e.opacity);if(e instanceof gn){if(isNaN(e.h))return new dn(e.l,0,0,e.opacity);var t=e.h*Qt;return new dn(e.l,Math.cos(t)*e.c,Math.sin(t)*e.c,e.opacity)}e instanceof qt||(e=Bt(e));var n,r,o=_n(e.r),a=_n(e.g),i=_n(e.b),s=cn((.2225045*o+.7168786*a+.0606169*i)/en);return o===a&&a===i?n=r=s:(n=cn((.4360747*o+.3850649*a+.1430804*i)/Zt),r=cn((.0139322*o+.0971045*a+.7141733*i)/tn)),new dn(116*s-16,500*(n-s),200*(s-r),e.opacity)}function un(e,t){return new dn(e,0,0,null==t?1:t)}function ln(e,t,n,r){return 1===arguments.length?sn(e):new dn(e,t,n,null==r?1:r)}function dn(e,t,n,r){this.l=+e,this.a=+t,this.b=+n,this.opacity=+r}function cn(e){return e>an?Math.pow(e,1/3):e/on+nn}function fn(e){return e>rn?e*e*e:on*(e-nn)}function mn(e){return 255*(e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055)}function _n(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function hn(e){if(e instanceof gn)return new gn(e.h,e.c,e.l,e.opacity);if(e instanceof dn||(e=sn(e)),0===e.a&&0===e.b)return new gn(NaN,0,e.l,e.opacity);var t=Math.atan2(e.b,e.a)*Xt;return new gn(t<0?t+360:t,Math.sqrt(e.a*e.a+e.b*e.b),e.l,e.opacity)}function pn(e,t,n,r){return 1===arguments.length?hn(e):new gn(n,t,e,null==r?1:r)}function yn(e,t,n,r){return 1===arguments.length?hn(e):new gn(e,t,n,null==r?1:r)}function gn(e,t,n,r){this.h=+e,this.c=+t,this.l=+n,this.opacity=+r}Tt(dn,ln,xt(Dt,{brighter:function(e){return new dn(this.l+18*(null==e?1:e),this.a,this.b,this.opacity)},darker:function(e){return new dn(this.l-18*(null==e?1:e),this.a,this.b,this.opacity)},rgb:function(){var e=(this.l+16)/116,t=isNaN(this.a)?e:e+this.a/500,n=isNaN(this.b)?e:e-this.b/200;return new qt(mn(3.1338561*(t=Zt*fn(t))-1.6168667*(e=en*fn(e))-.4906146*(n=tn*fn(n))),mn(-.9787684*t+1.9161415*e+.033454*n),mn(.0719453*t-.2289914*e+1.4052427*n),this.opacity)}})),Tt(gn,yn,xt(Dt,{brighter:function(e){return new gn(this.h,this.c,this.l+18*(null==e?1:e),this.opacity)},darker:function(e){return new gn(this.h,this.c,this.l-18*(null==e?1:e),this.opacity)},rgb:function(){return sn(this).rgb()}}));var vn=-.29227,Mn=-.90649,bn=1.97294,Ln=bn*Mn,wn=1.78277*bn,kn=1.78277*vn- -.14861*Mn;function Yn(e,t,n,r){return 1===arguments.length?function(e){if(e instanceof Tn)return new Tn(e.h,e.s,e.l,e.opacity);e instanceof qt||(e=Bt(e));var t=e.r/255,n=e.g/255,r=e.b/255,o=(kn*r+Ln*t-wn*n)/(kn+Ln-wn),a=r-o,i=(bn*(n-o)-vn*a)/Mn,s=Math.sqrt(i*i+a*a)/(bn*o*(1-o)),u=s?Math.atan2(i,a)*Xt-120:NaN;return new Tn(u<0?u+360:u,s,o,e.opacity)}(e):new Tn(e,t,n,null==r?1:r)}function Tn(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function xn(e,t,n,r,o){var a=e*e,i=a*e;return((1-3*e+3*a-i)*t+(4-6*a+3*i)*n+(1+3*e+3*a-3*i)*r+i*o)/6}Tt(Tn,Yn,xt(Dt,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new Tn(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new Tn(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=isNaN(this.h)?0:(this.h+120)*Qt,t=+this.l,n=isNaN(this.s)?0:this.s*t*(1-t),r=Math.cos(e),o=Math.sin(e);return new qt(255*(t+n*(-.14861*r+1.78277*o)),255*(t+n*(vn*r+Mn*o)),255*(t+n*(bn*r)),this.opacity)}}));var Dn=function(e){var t=e.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),o=e[r],a=e[r+1],i=r>0?e[r-1]:2*o-a,s=r<t-1?e[r+2]:2*a-o;return xn((n-r/t)*t,i,o,a,s)}},jn=function(e){var t=e.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*t),o=e[(r+t-1)%t],a=e[r%t],i=e[(r+1)%t],s=e[(r+2)%t];return xn((n-r/t)*t,o,a,i,s)}},Sn=function(e){return function(){return e}};function En(e,t){return function(n){return e+n*t}}function Cn(e,t){var n=t-e;return n?En(e,n>180||n<-180?n-360*Math.round(n/360):n):Sn(isNaN(e)?t:e)}function Hn(e){return 1==(e=+e)?On:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):Sn(isNaN(t)?n:t)}}function On(e,t){var n=t-e;return n?En(e,n):Sn(isNaN(e)?t:e)}var Pn=function e(t){var n=Hn(t);function r(e,t){var r=n((e=Vt(e)).r,(t=Vt(t)).r),o=n(e.g,t.g),a=n(e.b,t.b),i=On(e.opacity,t.opacity);return function(t){return e.r=r(t),e.g=o(t),e.b=a(t),e.opacity=i(t),e+""}}return r.gamma=e,r}(1);function Nn(e){return function(t){var n,r,o=t.length,a=new Array(o),i=new Array(o),s=new Array(o);for(n=0;n<o;++n)r=Vt(t[n]),a[n]=r.r||0,i[n]=r.g||0,s[n]=r.b||0;return a=e(a),i=e(i),s=e(s),r.opacity=1,function(e){return r.r=a(e),r.g=i(e),r.b=s(e),r+""}}}var An=Nn(Dn),Fn=Nn(jn),In=function(e,t){var n,r=t?t.length:0,o=e?Math.min(r,e.length):0,a=new Array(o),i=new Array(r);for(n=0;n<o;++n)a[n]=$n(e[n],t[n]);for(;n<r;++n)i[n]=t[n];return function(e){for(n=0;n<o;++n)i[n]=a[n](e);return i}},zn=function(e,t){var n=new Date;return t-=e=+e,function(r){return n.setTime(e+t*r),n}},Rn=function(e,t){return t-=e=+e,function(n){return e+t*n}},Wn=function(e,t){var n,r={},o={};for(n in null!==e&&"object"==typeof e||(e={}),null!==t&&"object"==typeof t||(t={}),t)n in e?r[n]=$n(e[n],t[n]):o[n]=t[n];return function(e){for(n in r)o[n]=r[n](e);return o}},Un=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Bn=new RegExp(Un.source,"g");var Vn,qn,Gn,Jn,Kn=function(e,t){var n,r,o,a=Un.lastIndex=Bn.lastIndex=0,i=-1,s=[],u=[];for(e+="",t+="";(n=Un.exec(e))&&(r=Bn.exec(t));)(o=r.index)>a&&(o=t.slice(a,o),s[i]?s[i]+=o:s[++i]=o),(n=n[0])===(r=r[0])?s[i]?s[i]+=r:s[++i]=r:(s[++i]=null,u.push({i:i,x:Rn(n,r)})),a=Bn.lastIndex;return a<t.length&&(o=t.slice(a),s[i]?s[i]+=o:s[++i]=o),s.length<2?u[0]?function(e){return function(t){return e(t)+""}}(u[0].x):function(e){return function(){return e}}(t):(t=u.length,function(e){for(var n,r=0;r<t;++r)s[(n=u[r]).i]=n.x(e);return s.join("")})},$n=function(e,t){var n,r=typeof t;return null==t||"boolean"===r?Sn(t):("number"===r?Rn:"string"===r?(n=Rt(t))?(t=n,Pn):Kn:t instanceof Rt?Pn:t instanceof Date?zn:Array.isArray(t)?In:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?Wn:Rn)(e,t)},Qn=function(e,t){return t-=e=+e,function(n){return Math.round(e+t*n)}},Xn=180/Math.PI,Zn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},er=function(e,t,n,r,o,a){var i,s,u;return(i=Math.sqrt(e*e+t*t))&&(e/=i,t/=i),(u=e*n+t*r)&&(n-=e*u,r-=t*u),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,u/=s),e*r<t*n&&(e=-e,t=-t,u=-u,i=-i),{translateX:o,translateY:a,rotate:Math.atan2(t,e)*Xn,skewX:Math.atan(u)*Xn,scaleX:i,scaleY:s}};function tr(e,t,n,r){function o(e){return e.length?e.pop()+" ":""}return function(a,i){var s=[],u=[];return a=e(a),i=e(i),function(e,r,o,a,i,s){if(e!==o||r!==a){var u=i.push("translate(",null,t,null,n);s.push({i:u-4,x:Rn(e,o)},{i:u-2,x:Rn(r,a)})}else(o||a)&&i.push("translate("+o+t+a+n)}(a.translateX,a.translateY,i.translateX,i.translateY,s,u),function(e,t,n,a){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),a.push({i:n.push(o(n)+"rotate(",null,r)-2,x:Rn(e,t)})):t&&n.push(o(n)+"rotate("+t+r)}(a.rotate,i.rotate,s,u),function(e,t,n,a){e!==t?a.push({i:n.push(o(n)+"skewX(",null,r)-2,x:Rn(e,t)}):t&&n.push(o(n)+"skewX("+t+r)}(a.skewX,i.skewX,s,u),function(e,t,n,r,a,i){if(e!==n||t!==r){var s=a.push(o(a)+"scale(",null,",",null,")");i.push({i:s-4,x:Rn(e,n)},{i:s-2,x:Rn(t,r)})}else 1===n&&1===r||a.push(o(a)+"scale("+n+","+r+")")}(a.scaleX,a.scaleY,i.scaleX,i.scaleY,s,u),a=i=null,function(e){for(var t,n=-1,r=u.length;++n<r;)s[(t=u[n]).i]=t.x(e);return s.join("")}}}var nr=tr(function(e){return"none"===e?Zn:(Vn||(Vn=document.createElement("DIV"),qn=document.documentElement,Gn=document.defaultView),Vn.style.transform=e,e=Gn.getComputedStyle(qn.appendChild(Vn),null).getPropertyValue("transform"),qn.removeChild(Vn),e=e.slice(7,-1).split(","),er(+e[0],+e[1],+e[2],+e[3],+e[4],+e[5]))},"px, ","px)","deg)"),rr=tr(function(e){return null==e?Zn:(Jn||(Jn=document.createElementNS("http://www.w3.org/2000/svg","g")),Jn.setAttribute("transform",e),(e=Jn.transform.baseVal.consolidate())?(e=e.matrix,er(e.a,e.b,e.c,e.d,e.e,e.f)):Zn)},", ",")",")"),or=Math.SQRT2;function ar(e){return((e=Math.exp(e))+1/e)/2}var ir=function(e,t){var n,r,o=e[0],a=e[1],i=e[2],s=t[0],u=t[1],l=t[2],d=s-o,c=u-a,f=d*d+c*c;if(f<1e-12)r=Math.log(l/i)/or,n=function(e){return[o+e*d,a+e*c,i*Math.exp(or*e*r)]};else{var m=Math.sqrt(f),_=(l*l-i*i+4*f)/(2*i*2*m),h=(l*l-i*i-4*f)/(2*l*2*m),p=Math.log(Math.sqrt(_*_+1)-_),y=Math.log(Math.sqrt(h*h+1)-h);r=(y-p)/or,n=function(e){var t,n=e*r,s=ar(p),u=i/(2*m)*(s*(t=or*n+p,((t=Math.exp(2*t))-1)/(t+1))-function(e){return((e=Math.exp(e))-1/e)/2}(p));return[o+u*d,a+u*c,i*s/ar(or*n+p)]}}return n.duration=1e3*r,n};function sr(e){return function(t,n){var r=e((t=Jt(t)).h,(n=Jt(n)).h),o=On(t.s,n.s),a=On(t.l,n.l),i=On(t.opacity,n.opacity);return function(e){return t.h=r(e),t.s=o(e),t.l=a(e),t.opacity=i(e),t+""}}}var ur=sr(Cn),lr=sr(On);function dr(e,t){var n=On((e=ln(e)).l,(t=ln(t)).l),r=On(e.a,t.a),o=On(e.b,t.b),a=On(e.opacity,t.opacity);return function(t){return e.l=n(t),e.a=r(t),e.b=o(t),e.opacity=a(t),e+""}}function cr(e){return function(t,n){var r=e((t=yn(t)).h,(n=yn(n)).h),o=On(t.c,n.c),a=On(t.l,n.l),i=On(t.opacity,n.opacity);return function(e){return t.h=r(e),t.c=o(e),t.l=a(e),t.opacity=i(e),t+""}}}var fr=cr(Cn),mr=cr(On);function _r(e){return function t(n){function r(t,r){var o=e((t=Yn(t)).h,(r=Yn(r)).h),a=On(t.s,r.s),i=On(t.l,r.l),s=On(t.opacity,r.opacity);return function(e){return t.h=o(e),t.s=a(e),t.l=i(Math.pow(e,n)),t.opacity=s(e),t+""}}return n=+n,r.gamma=t,r}(1)}var hr,pr,yr=_r(Cn),gr=_r(On),vr=function(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e(r/(t-1));return n},Mr=0,br=0,Lr=0,wr=1e3,kr=0,Yr=0,Tr=0,xr="object"==typeof performance&&performance.now?performance:Date,Dr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function jr(){return Yr||(Dr(Sr),Yr=xr.now()+Tr)}function Sr(){Yr=0}function Er(){this._call=this._time=this._next=null}function Cr(e,t,n){var r=new Er;return r.restart(e,t,n),r}function Hr(){jr(),++Mr;for(var e,t=hr;t;)(e=Yr-t._time)>=0&&t._call.call(null,e),t=t._next;--Mr}function Or(){Yr=(kr=xr.now())+Tr,Mr=br=0;try{Hr()}finally{Mr=0,function(){var e,t,n=hr,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:hr=t);pr=e,Nr(r)}(),Yr=0}}function Pr(){var e=xr.now(),t=e-kr;t>wr&&(Tr-=t,kr=e)}function Nr(e){Mr||(br&&(br=clearTimeout(br)),e-Yr>24?(e<1/0&&(br=setTimeout(Or,e-xr.now()-Tr)),Lr&&(Lr=clearInterval(Lr))):(Lr||(kr=xr.now(),Lr=setInterval(Pr,wr)),Mr=1,Dr(Or)))}Er.prototype=Cr.prototype={constructor:Er,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?jr():+n)+(null==t?0:+t),this._next||pr===this||(pr?pr._next=this:hr=this,pr=this),this._call=e,this._time=n,Nr()},stop:function(){this._call&&(this._call=null,this._time=1/0,Nr())}};var Ar=function(e,t,n){var r=new Er;return t=null==t?0:+t,r.restart(function(n){r.stop(),e(n+t)},t,n),r},Fr=function(e,t,n){var r=new Er,o=t;return null==t?(r.restart(e,t,n),r):(t=+t,n=null==n?jr():+n,r.restart(function a(i){i+=o,r.restart(a,o+=t,n),e(i)},t,n),r)},Ir=fe("start","end","interrupt"),zr=[],Rr=0,Wr=1,Ur=2,Br=3,Vr=4,qr=5,Gr=6,Jr=function(e,t,n,r,o,a){var i=e.__transition;if(i){if(n in i)return}else e.__transition={};!function(e,t,n){var r,o=e.__transition;function a(u){var l,d,c,f;if(n.state!==Wr)return s();for(l in o)if((f=o[l]).name===n.name){if(f.state===Br)return Ar(a);f.state===Vr?(f.state=Gr,f.timer.stop(),f.on.call("interrupt",e,e.__data__,f.index,f.group),delete o[l]):+l<t&&(f.state=Gr,f.timer.stop(),delete o[l])}if(Ar(function(){n.state===Br&&(n.state=Vr,n.timer.restart(i,n.delay,n.time),i(u))}),n.state=Ur,n.on.call("start",e,e.__data__,n.index,n.group),n.state===Ur){for(n.state=Br,r=new Array(c=n.tween.length),l=0,d=-1;l<c;++l)(f=n.tween[l].value.call(e,e.__data__,n.index,n.group))&&(r[++d]=f);r.length=d+1}}function i(t){for(var o=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(s),n.state=qr,1),a=-1,i=r.length;++a<i;)r[a].call(null,o);n.state===qr&&(n.on.call("end",e,e.__data__,n.index,n.group),s())}function s(){for(var r in n.state=Gr,n.timer.stop(),delete o[t],o)return;delete e.__transition}o[t]=n,n.timer=Cr(function(e){n.state=Wr,n.timer.restart(a,n.delay,n.time),n.delay<=e&&a(e-n.delay)},0,n.time)}(e,n,{name:t,index:r,group:o,on:Ir,tween:zr,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:Rr})};function Kr(e,t){var n=Qr(e,t);if(n.state>Rr)throw new Error("too late; already scheduled");return n}function $r(e,t){var n=Qr(e,t);if(n.state>Ur)throw new Error("too late; already started");return n}function Qr(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}var Xr=function(e,t){var n,r,o,a=e.__transition,i=!0;if(a){for(o in t=null==t?null:t+"",a)(n=a[o]).name===t?(r=n.state>Ur&&n.state<qr,n.state=Gr,n.timer.stop(),r&&n.on.call("interrupt",e,e.__data__,n.index,n.group),delete a[o]):i=!1;i&&delete e.__transition}};function Zr(e,t,n){var r=e._id;return e.each(function(){var e=$r(this,r);(e.value||(e.value={}))[t]=n.apply(this,arguments)}),function(e){return Qr(e,r).value[t]}}var eo=function(e,t){var n;return("number"==typeof t?Rn:t instanceof Rt?Pn:(n=Rt(t))?(t=n,Pn):Kn)(e,t)};var to=rt.prototype.constructor;var no=0;function ro(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function oo(e){return rt().transition(e)}function ao(){return++no}var io=rt.prototype;function so(e){return+e}function uo(e){return e*e}function lo(e){return e*(2-e)}function co(e){return((e*=2)<=1?e*e:--e*(2-e)+1)/2}function fo(e){return e*e*e}function mo(e){return--e*e*e+1}function _o(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}ro.prototype=oo.prototype={constructor:ro,select:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=ge(e));for(var r=this._groups,o=r.length,a=new Array(o),i=0;i<o;++i)for(var s,u,l=r[i],d=l.length,c=a[i]=new Array(d),f=0;f<d;++f)(s=l[f])&&(u=e.call(s,s.__data__,f,l))&&("__data__"in s&&(u.__data__=s.__data__),c[f]=u,Jr(c[f],t,n,f,c,Qr(s,n)));return new ro(a,this._parents,t,n)},selectAll:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=Me(e));for(var r=this._groups,o=r.length,a=[],i=[],s=0;s<o;++s)for(var u,l=r[s],d=l.length,c=0;c<d;++c)if(u=l[c]){for(var f,m=e.call(u,u.__data__,c,l),_=Qr(u,n),h=0,p=m.length;h<p;++h)(f=m[h])&&Jr(f,t,n,h,m,_);a.push(m),i.push(u)}return new ro(a,i,t,n)},filter:function(e){"function"!=typeof e&&(e=ke(e));for(var t=this._groups,n=t.length,r=new Array(n),o=0;o<n;++o)for(var a,i=t[o],s=i.length,u=r[o]=[],l=0;l<s;++l)(a=i[l])&&e.call(a,a.__data__,l,i)&&u.push(a);return new ro(r,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,r=t.length,o=n.length,a=Math.min(r,o),i=new Array(r),s=0;s<a;++s)for(var u,l=t[s],d=n[s],c=l.length,f=i[s]=new Array(c),m=0;m<c;++m)(u=l[m]||d[m])&&(f[m]=u);for(;s<r;++s)i[s]=t[s];return new ro(i,this._parents,this._name,this._id)},selection:function(){return new to(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,n=ao(),r=this._groups,o=r.length,a=0;a<o;++a)for(var i,s=r[a],u=s.length,l=0;l<u;++l)if(i=s[l]){var d=Qr(i,t);Jr(i,e,n,l,s,{time:d.time+d.delay+d.duration,delay:0,duration:d.duration,ease:d.ease})}return new ro(r,this._parents,e,n)},call:io.call,nodes:io.nodes,node:io.node,size:io.size,empty:io.empty,each:io.each,on:function(e,t){var n=this._id;return arguments.length<2?Qr(this.node(),n).on.on(e):this.each(function(e,t,n){var r,o,a=function(e){return(e+"").trim().split(/^|\s+/).every(function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e})}(t)?Kr:$r;return function(){var i=a(this,e),s=i.on;s!==r&&(o=(r=s).copy()).on(t,n),i.on=o}}(n,e,t))},attr:function(e,t){var n=he(e),r="transform"===n?rr:eo;return this.attrTween(e,"function"==typeof t?(n.local?function(e,t,n){var r,o,a;return function(){var i,s=n(this);if(null!=s)return(i=this.getAttributeNS(e.space,e.local))===s?null:i===r&&s===o?a:a=t(r=i,o=s);this.removeAttributeNS(e.space,e.local)}}:function(e,t,n){var r,o,a;return function(){var i,s=n(this);if(null!=s)return(i=this.getAttribute(e))===s?null:i===r&&s===o?a:a=t(r=i,o=s);this.removeAttribute(e)}})(n,r,Zr(this,"attr."+e,t)):null==t?(n.local?function(e){return function(){this.removeAttributeNS(e.space,e.local)}}:function(e){return function(){this.removeAttribute(e)}})(n):(n.local?function(e,t,n){var r,o;return function(){var a=this.getAttributeNS(e.space,e.local);return a===n?null:a===r?o:o=t(r=a,n)}}:function(e,t,n){var r,o;return function(){var a=this.getAttribute(e);return a===n?null:a===r?o:o=t(r=a,n)}})(n,r,t+""))},attrTween:function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var r=he(e);return this.tween(n,(r.local?function(e,t){function n(){var n=this,r=t.apply(n,arguments);return r&&function(t){n.setAttributeNS(e.space,e.local,r(t))}}return n._value=t,n}:function(e,t){function n(){var n=this,r=t.apply(n,arguments);return r&&function(t){n.setAttribute(e,r(t))}}return n._value=t,n})(r,t))},style:function(e,t,n){var r="transform"==(e+="")?nr:eo;return null==t?this.styleTween(e,function(e,t){var n,r,o;return function(){var a=Ce(this,e),i=(this.style.removeProperty(e),Ce(this,e));return a===i?null:a===n&&i===r?o:o=t(n=a,r=i)}}(e,r)).on("end.style."+e,function(e){return function(){this.style.removeProperty(e)}}(e)):this.styleTween(e,"function"==typeof t?function(e,t,n){var r,o,a;return function(){var i=Ce(this,e),s=n(this);return null==s&&(this.style.removeProperty(e),s=Ce(this,e)),i===s?null:i===r&&s===o?a:a=t(r=i,o=s)}}(e,r,Zr(this,"style."+e,t)):function(e,t,n){var r,o;return function(){var a=Ce(this,e);return a===n?null:a===r?o:o=t(r=a,n)}}(e,r,t+""),n)},styleTween:function(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if("function"!=typeof t)throw new Error;return this.tween(r,function(e,t,n){function r(){var r=this,o=t.apply(r,arguments);return o&&function(t){r.style.setProperty(e,o(t),n)}}return r._value=t,r}(e,t,null==n?"":n))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(Zr(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},remove:function(){return this.on("end.remove",(e=this._id,function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}));var e},tween:function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var r,o=Qr(this.node(),n).tween,a=0,i=o.length;a<i;++a)if((r=o[a]).name===e)return r.value;return null}return this.each((null==t?function(e,t){var n,r;return function(){var o=$r(this,e),a=o.tween;if(a!==n)for(var i=0,s=(r=n=a).length;i<s;++i)if(r[i].name===t){(r=r.slice()).splice(i,1);break}o.tween=r}}:function(e,t,n){var r,o;if("function"!=typeof n)throw new Error;return function(){var a=$r(this,e),i=a.tween;if(i!==r){o=(r=i).slice();for(var s={name:t,value:n},u=0,l=o.length;u<l;++u)if(o[u].name===t){o[u]=s;break}u===l&&o.push(s)}a.tween=o}})(n,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?function(e,t){return function(){Kr(this,e).delay=+t.apply(this,arguments)}}:function(e,t){return t=+t,function(){Kr(this,e).delay=t}})(t,e)):Qr(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?function(e,t){return function(){$r(this,e).duration=+t.apply(this,arguments)}}:function(e,t){return t=+t,function(){$r(this,e).duration=t}})(t,e)):Qr(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each(function(e,t){if("function"!=typeof t)throw new Error;return function(){$r(this,e).ease=t}}(t,e)):Qr(this.node(),t).ease}};var ho=function e(t){function n(e){return Math.pow(e,t)}return t=+t,n.exponent=e,n}(3),po=function e(t){function n(e){return 1-Math.pow(1-e,t)}return t=+t,n.exponent=e,n}(3),yo=function e(t){function n(e){return((e*=2)<=1?Math.pow(e,t):2-Math.pow(2-e,t))/2}return t=+t,n.exponent=e,n}(3),go=Math.PI,vo=go/2;function Mo(e){return 1-Math.cos(e*vo)}function bo(e){return Math.sin(e*vo)}function Lo(e){return(1-Math.cos(go*e))/2}function wo(e){return Math.pow(2,10*e-10)}function ko(e){return 1-Math.pow(2,-10*e)}function Yo(e){return((e*=2)<=1?Math.pow(2,10*e-10):2-Math.pow(2,10-10*e))/2}function To(e){return 1-Math.sqrt(1-e*e)}function xo(e){return Math.sqrt(1- --e*e)}function Do(e){return((e*=2)<=1?1-Math.sqrt(1-e*e):Math.sqrt(1-(e-=2)*e)+1)/2}var jo=4/11,So=6/11,Eo=8/11,Co=.75,Ho=9/11,Oo=10/11,Po=.9375,No=21/22,Ao=63/64,Fo=1/jo/jo;function Io(e){return 1-zo(1-e)}function zo(e){return(e=+e)<jo?Fo*e*e:e<Eo?Fo*(e-=So)*e+Co:e<Oo?Fo*(e-=Ho)*e+Po:Fo*(e-=No)*e+Ao}function Ro(e){return((e*=2)<=1?1-zo(1-e):zo(e-1)+1)/2}var Wo=function e(t){function n(e){return e*e*((t+1)*e-t)}return t=+t,n.overshoot=e,n}(1.70158),Uo=function e(t){function n(e){return--e*e*((t+1)*e+t)+1}return t=+t,n.overshoot=e,n}(1.70158),Bo=function e(t){function n(e){return((e*=2)<1?e*e*((t+1)*e-t):(e-=2)*e*((t+1)*e+t)+2)/2}return t=+t,n.overshoot=e,n}(1.70158),Vo=2*Math.PI,qo=function e(t,n){var r=Math.asin(1/(t=Math.max(1,t)))*(n/=Vo);function o(e){return t*Math.pow(2,10*--e)*Math.sin((r-e)/n)}return o.amplitude=function(t){return e(t,n*Vo)},o.period=function(n){return e(t,n)},o}(1,.3),Go=function e(t,n){var r=Math.asin(1/(t=Math.max(1,t)))*(n/=Vo);function o(e){return 1-t*Math.pow(2,-10*(e=+e))*Math.sin((e+r)/n)}return o.amplitude=function(t){return e(t,n*Vo)},o.period=function(n){return e(t,n)},o}(1,.3),Jo=function e(t,n){var r=Math.asin(1/(t=Math.max(1,t)))*(n/=Vo);function o(e){return((e=2*e-1)<0?t*Math.pow(2,10*e)*Math.sin((r-e)/n):2-t*Math.pow(2,-10*e)*Math.sin((r+e)/n))/2}return o.amplitude=function(t){return e(t,n*Vo)},o.period=function(n){return e(t,n)},o}(1,.3),Ko={time:null,delay:0,duration:250,ease:_o};function $o(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))return Ko.time=jr(),Ko;return n}rt.prototype.interrupt=function(e){return this.each(function(){Xr(this,e)})},rt.prototype.transition=function(e){var t,n;e instanceof ro?(t=e._id,e=e._name):(t=ao(),(n=Ko).time=jr(),e=null==e?null:e+"");for(var r=this._groups,o=r.length,a=0;a<o;++a)for(var i,s=r[a],u=s.length,l=0;l<u;++l)(i=s[l])&&Jr(i,e,t,l,s,n||$o(i,t));return new ro(r,this._parents,e,t)};var Qo=[null],Xo=function(e,t){var n,r,o=e.__transition;if(o)for(r in t=null==t?null:t+"",o)if((n=o[r]).state>Wr&&n.name===t)return new ro([[e]],Qo,t,+r);return null},Zo=function(e){return function(){return e}},ea=function(e,t,n){this.target=e,this.type=t,this.selection=n};function ta(){Ge.stopImmediatePropagation()}var na=function(){Ge.preventDefault(),Ge.stopImmediatePropagation()},ra={name:"drag"},oa={name:"space"},aa={name:"handle"},ia={name:"center"},sa={name:"x",handles:["e","w"].map(ha),input:function(e,t){return e&&[[e[0],t[0][1]],[e[1],t[1][1]]]},output:function(e){return e&&[e[0][0],e[1][0]]}},ua={name:"y",handles:["n","s"].map(ha),input:function(e,t){return e&&[[t[0][0],e[0]],[t[1][0],e[1]]]},output:function(e){return e&&[e[0][1],e[1][1]]}},la={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(ha),input:function(e){return e},output:function(e){return e}},da={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},ca={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},fa={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},ma={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},_a={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function ha(e){return{type:e}}function pa(){return!Ge.button}function ya(){var e=this.ownerSVGElement||this;return[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]}function ga(e){for(;!e.__brush;)if(!(e=e.parentNode))return;return e.__brush}function va(e){return e[0][0]===e[1][0]||e[0][1]===e[1][1]}function Ma(e){var t=e.__brush;return t?t.dim.output(t.selection):null}function ba(){return ka(sa)}function La(){return ka(ua)}var wa=function(){return ka(la)};function ka(e){var t,n=ya,r=pa,o=fe(i,"start","brush","end"),a=6;function i(t){var n=t.property("__brush",c).selectAll(".overlay").data([ha("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",da.overlay).merge(n).each(function(){var e=ga(this).extent;ot(this).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1])}),t.selectAll(".selection").data([ha("selection")]).enter().append("rect").attr("class","selection").attr("cursor",da.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=t.selectAll(".handle").data(e.handles,function(e){return e.type});r.exit().remove(),r.enter().append("rect").attr("class",function(e){return"handle handle--"+e.type}).attr("cursor",function(e){return da[e.type]}),t.each(s).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",d)}function s(){var e=ot(this),t=ga(this).selection;t?(e.selectAll(".selection").style("display",null).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1]),e.selectAll(".handle").style("display",null).attr("x",function(e){return"e"===e.type[e.type.length-1]?t[1][0]-a/2:t[0][0]-a/2}).attr("y",function(e){return"s"===e.type[0]?t[1][1]-a/2:t[0][1]-a/2}).attr("width",function(e){return"n"===e.type||"s"===e.type?t[1][0]-t[0][0]+a:a}).attr("height",function(e){return"e"===e.type||"w"===e.type?t[1][1]-t[0][1]+a:a})):e.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function u(e,t){return e.__brush.emitter||new l(e,t)}function l(e,t){this.that=e,this.args=t,this.state=e.__brush,this.active=0}function d(){if(Ge.touches){if(Ge.changedTouches.length<Ge.touches.length)return na()}else if(t)return;if(r.apply(this,arguments)){var n,o,a,i,l,d,c,f,m,_,h,p,y,g=this,v=Ge.target.__data__.type,M="selection"===(Ge.metaKey?v="overlay":v)?ra:Ge.altKey?ia:aa,b=e===ua?null:ma[v],L=e===sa?null:_a[v],w=ga(g),k=w.extent,Y=w.selection,T=k[0][0],x=k[0][1],D=k[1][0],j=k[1][1],S=b&&L&&Ge.shiftKey,E=ct(g),C=E,H=u(g,arguments).beforestart();"overlay"===v?w.selection=Y=[[n=e===ua?T:E[0],a=e===sa?x:E[1]],[l=e===ua?D:n,c=e===sa?j:a]]:(n=Y[0][0],a=Y[0][1],l=Y[1][0],c=Y[1][1]),o=n,i=a,d=l,f=c;var O=ot(g).attr("pointer-events","none"),P=O.selectAll(".overlay").attr("cursor",da[v]);if(Ge.touches)O.on("touchmove.brush",A,!0).on("touchend.brush touchcancel.brush",I,!0);else{var N=ot(Ge.view).on("keydown.brush",function(){switch(Ge.keyCode){case 16:S=b&&L;break;case 18:M===aa&&(b&&(l=d-m*b,n=o+m*b),L&&(c=f-_*L,a=i+_*L),M=ia,F());break;case 32:M!==aa&&M!==ia||(b<0?l=d-m:b>0&&(n=o-m),L<0?c=f-_:L>0&&(a=i-_),M=oa,P.attr("cursor",da.selection),F());break;default:return}na()},!0).on("keyup.brush",function(){switch(Ge.keyCode){case 16:S&&(p=y=S=!1,F());break;case 18:M===ia&&(b<0?l=d:b>0&&(n=o),L<0?c=f:L>0&&(a=i),M=aa,F());break;case 32:M===oa&&(Ge.altKey?(b&&(l=d-m*b,n=o+m*b),L&&(c=f-_*L,a=i+_*L),M=ia):(b<0?l=d:b>0&&(n=o),L<0?c=f:L>0&&(a=i),M=aa),P.attr("cursor",da[v]),F());break;default:return}na()},!0).on("mousemove.brush",A,!0).on("mouseup.brush",I,!0);yt(Ge.view)}ta(),Xr(g),s.call(g),H.start()}function A(){var e=ct(g);!S||p||y||(Math.abs(e[0]-C[0])>Math.abs(e[1]-C[1])?y=!0:p=!0),C=e,h=!0,na(),F()}function F(){var e;switch(m=C[0]-E[0],_=C[1]-E[1],M){case oa:case ra:b&&(m=Math.max(T-n,Math.min(D-l,m)),o=n+m,d=l+m),L&&(_=Math.max(x-a,Math.min(j-c,_)),i=a+_,f=c+_);break;case aa:b<0?(m=Math.max(T-n,Math.min(D-n,m)),o=n+m,d=l):b>0&&(m=Math.max(T-l,Math.min(D-l,m)),o=n,d=l+m),L<0?(_=Math.max(x-a,Math.min(j-a,_)),i=a+_,f=c):L>0&&(_=Math.max(x-c,Math.min(j-c,_)),i=a,f=c+_);break;case ia:b&&(o=Math.max(T,Math.min(D,n-m*b)),d=Math.max(T,Math.min(D,l+m*b))),L&&(i=Math.max(x,Math.min(j,a-_*L)),f=Math.max(x,Math.min(j,c+_*L)))}d<o&&(b*=-1,e=n,n=l,l=e,e=o,o=d,d=e,v in ca&&P.attr("cursor",da[v=ca[v]])),f<i&&(L*=-1,e=a,a=c,c=e,e=i,i=f,f=e,v in fa&&P.attr("cursor",da[v=fa[v]])),w.selection&&(Y=w.selection),p&&(o=Y[0][0],d=Y[1][0]),y&&(i=Y[0][1],f=Y[1][1]),Y[0][0]===o&&Y[0][1]===i&&Y[1][0]===d&&Y[1][1]===f||(w.selection=[[o,i],[d,f]],s.call(g),H.brush())}function I(){if(ta(),Ge.touches){if(Ge.touches.length)return;t&&clearTimeout(t),t=setTimeout(function(){t=null},500),O.on("touchmove.brush touchend.brush touchcancel.brush",null)}else gt(Ge.view,h),N.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);O.attr("pointer-events","all"),P.attr("cursor",da.overlay),w.selection&&(Y=w.selection),va(Y)&&(w.selection=null,s.call(g)),H.end()}}function c(){var t=this.__brush||{selection:null};return t.extent=n.apply(this,arguments),t.dim=e,t}return i.move=function(t,n){t.selection?t.on("start.brush",function(){u(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){u(this,arguments).end()}).tween("brush",function(){var t=this,r=t.__brush,o=u(t,arguments),a=r.selection,i=e.input("function"==typeof n?n.apply(this,arguments):n,r.extent),l=$n(a,i);function d(e){r.selection=1===e&&va(i)?null:l(e),s.call(t),o.brush()}return a&&i?d:d(1)}):t.each(function(){var t=arguments,r=this.__brush,o=e.input("function"==typeof n?n.apply(this,t):n,r.extent),a=u(this,t).beforestart();Xr(this),r.selection=null==o||va(o)?null:o,s.call(this),a.start().brush().end()})},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(t){Xe(new ea(i,t,e.output(this.state.selection)),o.apply,o,[t,this.that,this.args])}},i.extent=function(e){return arguments.length?(n="function"==typeof e?e:Zo([[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]]),i):n},i.filter=function(e){return arguments.length?(r="function"==typeof e?e:Zo(!!e),i):r},i.handleSize=function(e){return arguments.length?(a=+e,i):a},i.on=function(){var e=o.on.apply(o,arguments);return e===o?i:e},i}var Ya=Math.cos,Ta=Math.sin,xa=Math.PI,Da=xa/2,ja=2*xa,Sa=Math.max;var Ea=function(){var e=0,t=null,n=null,r=null;function o(o){var a,i,s,u,l,d,c=o.length,f=[],m=L(c),_=[],h=[],p=h.groups=new Array(c),y=new Array(c*c);for(a=0,l=-1;++l<c;){for(i=0,d=-1;++d<c;)i+=o[l][d];f.push(i),_.push(L(c)),a+=i}for(t&&m.sort(function(e,n){return t(f[e],f[n])}),n&&_.forEach(function(e,t){e.sort(function(e,r){return n(o[t][e],o[t][r])})}),u=(a=Sa(0,ja-e*c)/a)?e:ja/c,i=0,l=-1;++l<c;){for(s=i,d=-1;++d<c;){var g=m[l],v=_[g][d],M=o[g][v],b=i,w=i+=M*a;y[v*c+g]={index:g,subindex:v,startAngle:b,endAngle:w,value:M}}p[g]={index:g,startAngle:s,endAngle:i,value:f[g]},i+=u}for(l=-1;++l<c;)for(d=l-1;++d<c;){var k=y[d*c+l],Y=y[l*c+d];(k.value||Y.value)&&h.push(k.value<Y.value?{source:Y,target:k}:{source:k,target:Y})}return r?h.sort(r):h}return o.padAngle=function(t){return arguments.length?(e=Sa(0,t),o):e},o.sortGroups=function(e){return arguments.length?(t=e,o):t},o.sortSubgroups=function(e){return arguments.length?(n=e,o):n},o.sortChords=function(e){return arguments.length?(null==e?r=null:(t=e,r=function(e,n){return t(e.source.value+e.target.value,n.source.value+n.target.value)})._=e,o):r&&r._;var t},o},Ca=Array.prototype.slice,Ha=function(e){return function(){return e}},Oa=Math.PI,Pa=2*Oa,Na=Pa-1e-6;function Aa(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Fa(){return new Aa}Aa.prototype=Fa.prototype={constructor:Aa,moveTo:function(e,t){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(e,t){this._+="L"+(this._x1=+e)+","+(this._y1=+t)},quadraticCurveTo:function(e,t,n,r){this._+="Q"+ +e+","+ +t+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(e,t,n,r,o,a){this._+="C"+ +e+","+ +t+","+ +n+","+ +r+","+(this._x1=+o)+","+(this._y1=+a)},arcTo:function(e,t,n,r,o){e=+e,t=+t,n=+n,r=+r,o=+o;var a=this._x1,i=this._y1,s=n-e,u=r-t,l=a-e,d=i-t,c=l*l+d*d;if(o<0)throw new Error("negative radius: "+o);if(null===this._x1)this._+="M"+(this._x1=e)+","+(this._y1=t);else if(c>1e-6)if(Math.abs(d*s-u*l)>1e-6&&o){var f=n-a,m=r-i,_=s*s+u*u,h=f*f+m*m,p=Math.sqrt(_),y=Math.sqrt(c),g=o*Math.tan((Oa-Math.acos((_+c-h)/(2*p*y)))/2),v=g/y,M=g/p;Math.abs(v-1)>1e-6&&(this._+="L"+(e+v*l)+","+(t+v*d)),this._+="A"+o+","+o+",0,0,"+ +(d*f>l*m)+","+(this._x1=e+M*s)+","+(this._y1=t+M*u)}else this._+="L"+(this._x1=e)+","+(this._y1=t);else;},arc:function(e,t,n,r,o,a){e=+e,t=+t;var i=(n=+n)*Math.cos(r),s=n*Math.sin(r),u=e+i,l=t+s,d=1^a,c=a?r-o:o-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+l:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+u+","+l),n&&(c<0&&(c=c%Pa+Pa),c>Na?this._+="A"+n+","+n+",0,1,"+d+","+(e-i)+","+(t-s)+"A"+n+","+n+",0,1,"+d+","+(this._x1=u)+","+(this._y1=l):c>1e-6&&(this._+="A"+n+","+n+",0,"+ +(c>=Oa)+","+d+","+(this._x1=e+n*Math.cos(o))+","+(this._y1=t+n*Math.sin(o))))},rect:function(e,t,n,r){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Ia=Fa;function za(e){return e.source}function Ra(e){return e.target}function Wa(e){return e.radius}function Ua(e){return e.startAngle}function Ba(e){return e.endAngle}var Va=function(){var e=za,t=Ra,n=Wa,r=Ua,o=Ba,a=null;function i(){var i,s=Ca.call(arguments),u=e.apply(this,s),l=t.apply(this,s),d=+n.apply(this,(s[0]=u,s)),c=r.apply(this,s)-Da,f=o.apply(this,s)-Da,m=d*Ya(c),_=d*Ta(c),h=+n.apply(this,(s[0]=l,s)),p=r.apply(this,s)-Da,y=o.apply(this,s)-Da;if(a||(a=i=Ia()),a.moveTo(m,_),a.arc(0,0,d,c,f),c===p&&f===y||(a.quadraticCurveTo(0,0,h*Ya(p),h*Ta(p)),a.arc(0,0,h,p,y)),a.quadraticCurveTo(0,0,m,_),a.closePath(),i)return a=null,i+""||null}return i.radius=function(e){return arguments.length?(n="function"==typeof e?e:Ha(+e),i):n},i.startAngle=function(e){return arguments.length?(r="function"==typeof e?e:Ha(+e),i):r},i.endAngle=function(e){return arguments.length?(o="function"==typeof e?e:Ha(+e),i):o},i.source=function(t){return arguments.length?(e=t,i):e},i.target=function(e){return arguments.length?(t=e,i):t},i.context=function(e){return arguments.length?(a=null==e?null:e,i):a},i};function qa(){}function Ga(e,t){var n=new qa;if(e instanceof qa)e.each(function(e,t){n.set(t,e)});else if(Array.isArray(e)){var r,o=-1,a=e.length;if(null==t)for(;++o<a;)n.set(o,e[o]);else for(;++o<a;)n.set(t(r=e[o],o,e),r)}else if(e)for(var i in e)n.set(i,e[i]);return n}qa.prototype=Ga.prototype={constructor:qa,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var Ja=Ga,Ka=function(){var e,t,n,r=[],o=[];function a(n,o,i,s){if(o>=r.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var u,l,d,c=-1,f=n.length,m=r[o++],_=Ja(),h=i();++c<f;)(d=_.get(u=m(l=n[c])+""))?d.push(l):_.set(u,[l]);return _.each(function(e,t){s(h,t,a(e,o,i,s))}),h}return n={object:function(e){return a(e,0,$a,Qa)},map:function(e){return a(e,0,Xa,Za)},entries:function(e){return function e(n,a){if(++a>r.length)return n;var i,s=o[a-1];return null!=t&&a>=r.length?i=n.entries():(i=[],n.each(function(t,n){i.push({key:n,values:e(t,a)})})),null!=s?i.sort(function(e,t){return s(e.key,t.key)}):i}(a(e,0,Xa,Za),0)},key:function(e){return r.push(e),n},sortKeys:function(e){return o[r.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}};function $a(){return{}}function Qa(e,t,n){e[t]=n}function Xa(){return Ja()}function Za(e,t,n){e.set(t,n)}function ei(){}var ti=Ja.prototype;function ni(e,t){var n=new ei;if(e instanceof ei)e.each(function(e){n.add(e)});else if(e){var r=-1,o=e.length;if(null==t)for(;++r<o;)n.add(e[r]);else for(;++r<o;)n.add(t(e[r],r,e))}return n}ei.prototype=ni.prototype={constructor:ei,has:ti.has,add:function(e){return this["$"+(e+="")]=e,this},remove:ti.remove,clear:ti.clear,values:ti.keys,size:ti.size,empty:ti.empty,each:ti.each};var ri=ni,oi=function(e){var t=[];for(var n in e)t.push(n);return t},ai=function(e){var t=[];for(var n in e)t.push(e[n]);return t},ii=function(e){var t=[];for(var n in e)t.push({key:n,value:e[n]});return t},si=Array.prototype.slice,ui=function(e,t){return e-t},li=function(e){for(var t=0,n=e.length,r=e[n-1][1]*e[0][0]-e[n-1][0]*e[0][1];++t<n;)r+=e[t-1][1]*e[t][0]-e[t-1][0]*e[t][1];return r},di=function(e){return function(){return e}},ci=function(e,t){for(var n,r=-1,o=t.length;++r<o;)if(n=fi(e,t[r]))return n;return 0};function fi(e,t){for(var n=t[0],r=t[1],o=-1,a=0,i=e.length,s=i-1;a<i;s=a++){var u=e[a],l=u[0],d=u[1],c=e[s],f=c[0],m=c[1];if(mi(u,c,t))return 0;d>r!=m>r&&n<(f-l)*(r-d)/(m-d)+l&&(o=-o)}return o}function mi(e,t,n){var r,o,a,i;return function(e,t,n){return(t[0]-e[0])*(n[1]-e[1])==(n[0]-e[0])*(t[1]-e[1])}(e,t,n)&&(o=e[r=+(e[0]===t[0])],a=n[r],i=t[r],o<=a&&a<=i||i<=a&&a<=o)}var _i=function(){},hi=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]],pi=function(){var e=1,t=1,n=j,r=s;function o(e){var t=n(e);if(Array.isArray(t))t=t.slice().sort(ui);else{var r=p(e),o=r[0],i=r[1];t=D(o,i,t),t=L(Math.floor(o/t)*t,Math.floor(i/t)*t,t)}return t.map(function(t){return a(e,t)})}function a(n,o){var a=[],s=[];return function(n,r,o){var a,s,u,l,d,c,f=new Array,m=new Array;a=s=-1,l=n[0]>=r,hi[l<<1].forEach(_);for(;++a<e-1;)u=l,l=n[a+1]>=r,hi[u|l<<1].forEach(_);hi[l<<0].forEach(_);for(;++s<t-1;){for(a=-1,l=n[s*e+e]>=r,d=n[s*e]>=r,hi[l<<1|d<<2].forEach(_);++a<e-1;)u=l,l=n[s*e+e+a+1]>=r,c=d,d=n[s*e+a+1]>=r,hi[u|l<<1|d<<2|c<<3].forEach(_);hi[l|d<<3].forEach(_)}a=-1,d=n[s*e]>=r,hi[d<<2].forEach(_);for(;++a<e-1;)c=d,d=n[s*e+a+1]>=r,hi[d<<2|c<<3].forEach(_);function _(e){var t,n,r=[e[0][0]+a,e[0][1]+s],u=[e[1][0]+a,e[1][1]+s],l=i(r),d=i(u);(t=m[l])?(n=f[d])?(delete m[t.end],delete f[n.start],t===n?(t.ring.push(u),o(t.ring)):f[t.start]=m[n.end]={start:t.start,end:n.end,ring:t.ring.concat(n.ring)}):(delete m[t.end],t.ring.push(u),m[t.end=d]=t):(t=f[d])?(n=m[l])?(delete f[t.start],delete m[n.end],t===n?(t.ring.push(u),o(t.ring)):f[n.start]=m[t.end]={start:n.start,end:t.end,ring:n.ring.concat(t.ring)}):(delete f[t.start],t.ring.unshift(r),f[t.start=l]=t):f[l]=m[d]={start:l,end:d,ring:[r,u]}}hi[d<<3].forEach(_)}(n,o,function(e){r(e,n,o),li(e)>0?a.push([e]):s.push(e)}),s.forEach(function(e){for(var t,n=0,r=a.length;n<r;++n)if(-1!==ci((t=a[n])[0],e))return void t.push(e)}),{type:"MultiPolygon",value:o,coordinates:a}}function i(t){return 2*t[0]+t[1]*(e+1)*4}function s(n,r,o){n.forEach(function(n){var a,i=n[0],s=n[1],u=0|i,l=0|s,d=r[l*e+u];i>0&&i<e&&u===i&&(a=r[l*e+u-1],n[0]=i+(o-a)/(d-a)-.5),s>0&&s<t&&l===s&&(a=r[(l-1)*e+u],n[1]=s+(o-a)/(d-a)-.5)})}return o.contour=a,o.size=function(n){if(!arguments.length)return[e,t];var r=Math.ceil(n[0]),a=Math.ceil(n[1]);if(!(r>0&&a>0))throw new Error("invalid size");return e=r,t=a,o},o.thresholds=function(e){return arguments.length?(n="function"==typeof e?e:Array.isArray(e)?di(si.call(e)):di(e),o):n},o.smooth=function(e){return arguments.length?(r=e?s:_i,o):r===s},o};function yi(e,t,n){for(var r=e.width,o=e.height,a=1+(n<<1),i=0;i<o;++i)for(var s=0,u=0;s<r+n;++s)s<r&&(u+=e.data[s+i*r]),s>=n&&(s>=a&&(u-=e.data[s-a+i*r]),t.data[s-n+i*r]=u/Math.min(s+1,r-1+a-s,a))}function gi(e,t,n){for(var r=e.width,o=e.height,a=1+(n<<1),i=0;i<r;++i)for(var s=0,u=0;s<o+n;++s)s<o&&(u+=e.data[i+s*r]),s>=n&&(s>=a&&(u-=e.data[i+(s-a)*r]),t.data[i+(s-n)*r]=u/Math.min(s+1,o-1+a-s,a))}function vi(e){return e[0]}function Mi(e){return e[1]}var bi=function(){var e=vi,t=Mi,n=960,r=500,o=20,a=2,i=3*o,s=n+2*i>>a,u=r+2*i>>a,l=di(20);function d(n){var r=new Float32Array(s*u),d=new Float32Array(s*u);n.forEach(function(n,o,l){var d=e(n,o,l)+i>>a,c=t(n,o,l)+i>>a;d>=0&&d<s&&c>=0&&c<u&&++r[d+c*s]}),yi({width:s,height:u,data:r},{width:s,height:u,data:d},o>>a),gi({width:s,height:u,data:d},{width:s,height:u,data:r},o>>a),yi({width:s,height:u,data:r},{width:s,height:u,data:d},o>>a),gi({width:s,height:u,data:d},{width:s,height:u,data:r},o>>a),yi({width:s,height:u,data:r},{width:s,height:u,data:d},o>>a),gi({width:s,height:u,data:d},{width:s,height:u,data:r},o>>a);var f=l(r);if(!Array.isArray(f)){var m=O(r);f=D(0,m,f),(f=L(0,Math.floor(m/f)*f,f)).shift()}return pi().thresholds(f).size([s,u])(r).map(c)}function c(e){return e.value*=Math.pow(2,-2*a),e.coordinates.forEach(f),e}function f(e){e.forEach(m)}function m(e){e.forEach(_)}function _(e){e[0]=e[0]*Math.pow(2,a)-i,e[1]=e[1]*Math.pow(2,a)-i}function h(){return s=n+2*(i=3*o)>>a,u=r+2*i>>a,d}return d.x=function(t){return arguments.length?(e="function"==typeof t?t:di(+t),d):e},d.y=function(e){return arguments.length?(t="function"==typeof e?e:di(+e),d):t},d.size=function(e){if(!arguments.length)return[n,r];var t=Math.ceil(e[0]),o=Math.ceil(e[1]);if(!(t>=0||t>=0))throw new Error("invalid size");return n=t,r=o,h()},d.cellSize=function(e){if(!arguments.length)return 1<<a;if(!((e=+e)>=1))throw new Error("invalid cell size");return a=Math.floor(Math.log(e)/Math.LN2),h()},d.thresholds=function(e){return arguments.length?(l="function"==typeof e?e:Array.isArray(e)?di(si.call(e)):di(e),d):l},d.bandwidth=function(e){if(!arguments.length)return Math.sqrt(o*(o+1));if(!((e=+e)>=0))throw new Error("invalid bandwidth");return o=Math.round((Math.sqrt(4*e*e+1)-1)/2),h()},d},Li={},wi={},ki=34,Yi=10,Ti=13;function xi(e){return new Function("d","return {"+e.map(function(e,t){return JSON.stringify(e)+": d["+t+"]"}).join(",")+"}")}var Di=function(e){var t=new RegExp('["'+e+"\n\r]"),n=e.charCodeAt(0);function r(e,t){var r,o=[],a=e.length,i=0,s=0,u=a<=0,l=!1;function d(){if(u)return wi;if(l)return l=!1,Li;var t,r,o=i;if(e.charCodeAt(o)===ki){for(;i++<a&&e.charCodeAt(i)!==ki||e.charCodeAt(++i)===ki;);return(t=i)>=a?u=!0:(r=e.charCodeAt(i++))===Yi?l=!0:r===Ti&&(l=!0,e.charCodeAt(i)===Yi&&++i),e.slice(o+1,t-1).replace(/""/g,'"')}for(;i<a;){if((r=e.charCodeAt(t=i++))===Yi)l=!0;else if(r===Ti)l=!0,e.charCodeAt(i)===Yi&&++i;else if(r!==n)continue;return e.slice(o,t)}return u=!0,e.slice(o,a)}for(e.charCodeAt(a-1)===Yi&&--a,e.charCodeAt(a-1)===Ti&&--a;(r=d())!==wi;){for(var c=[];r!==Li&&r!==wi;)c.push(r),r=d();t&&null==(c=t(c,s++))||o.push(c)}return o}function o(t){return t.map(a).join(e)}function a(e){return null==e?"":t.test(e+="")?'"'+e.replace(/"/g,'""')+'"':e}return{parse:function(e,t){var n,o,a=r(e,function(e,r){if(n)return n(e,r-1);o=e,n=t?function(e,t){var n=xi(e);return function(r,o){return t(n(r),o,e)}}(e,t):xi(e)});return a.columns=o||[],a},parseRows:r,format:function(t,n){return null==n&&(n=function(e){var t=Object.create(null),n=[];return e.forEach(function(e){for(var r in e)r in t||n.push(t[r]=r)}),n}(t)),[n.map(a).join(e)].concat(t.map(function(t){return n.map(function(e){return a(t[e])}).join(e)})).join("\n")},formatRows:function(e){return e.map(o).join("\n")}}},ji=Di(","),Si=ji.parse,Ei=ji.parseRows,Ci=ji.format,Hi=ji.formatRows,Oi=Di("\t"),Pi=Oi.parse,Ni=Oi.parseRows,Ai=Oi.format,Fi=Oi.formatRows;function Ii(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.blob()}var zi=function(e,t){return fetch(e,t).then(Ii)};function Ri(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.arrayBuffer()}var Wi=function(e,t){return fetch(e,t).then(Ri)};function Ui(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.text()}var Bi=function(e,t){return fetch(e,t).then(Ui)};function Vi(e){return function(t,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),Bi(t,n).then(function(t){return e(t,r)})}}function qi(e,t,n,r){3===arguments.length&&"function"==typeof n&&(r=n,n=void 0);var o=Di(e);return Bi(t,n).then(function(e){return o.parse(e,r)})}var Gi=Vi(Si),Ji=Vi(Pi),Ki=function(e,t){return new Promise(function(n,r){var o=new Image;for(var a in t)o[a]=t[a];o.onerror=r,o.onload=function(){n(o)},o.src=e})};function $i(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.json()}var Qi=function(e,t){return fetch(e,t).then($i)};function Xi(e){return function(t,n){return Bi(t,n).then(function(t){return(new DOMParser).parseFromString(t,e)})}}var Zi=Xi("application/xml"),es=Xi("text/html"),ts=Xi("image/svg+xml"),ns=function(e,t){var n;function r(){var r,o,a=n.length,i=0,s=0;for(r=0;r<a;++r)i+=(o=n[r]).x,s+=o.y;for(i=i/a-e,s=s/a-t,r=0;r<a;++r)(o=n[r]).x-=i,o.y-=s}return null==e&&(e=0),null==t&&(t=0),r.initialize=function(e){n=e},r.x=function(t){return arguments.length?(e=+t,r):e},r.y=function(e){return arguments.length?(t=+e,r):t},r},rs=function(e){return function(){return e}},os=function(){return 1e-6*(Math.random()-.5)};function as(e,t,n,r){if(isNaN(t)||isNaN(n))return e;var o,a,i,s,u,l,d,c,f,m=e._root,_={data:r},h=e._x0,p=e._y0,y=e._x1,g=e._y1;if(!m)return e._root=_,e;for(;m.length;)if((l=t>=(a=(h+y)/2))?h=a:y=a,(d=n>=(i=(p+g)/2))?p=i:g=i,o=m,!(m=m[c=d<<1|l]))return o[c]=_,e;if(s=+e._x.call(null,m.data),u=+e._y.call(null,m.data),t===s&&n===u)return _.next=m,o?o[c]=_:e._root=_,e;do{o=o?o[c]=new Array(4):e._root=new Array(4),(l=t>=(a=(h+y)/2))?h=a:y=a,(d=n>=(i=(p+g)/2))?p=i:g=i}while((c=d<<1|l)==(f=(u>=i)<<1|s>=a));return o[f]=m,o[c]=_,e}var is=function(e,t,n,r,o){this.node=e,this.x0=t,this.y0=n,this.x1=r,this.y1=o};function ss(e){return e[0]}function us(e){return e[1]}function ls(e,t,n){var r=new ds(null==t?ss:t,null==n?us:n,NaN,NaN,NaN,NaN);return null==e?r:r.addAll(e)}function ds(e,t,n,r,o,a){this._x=e,this._y=t,this._x0=n,this._y0=r,this._x1=o,this._y1=a,this._root=void 0}function cs(e){for(var t={data:e.data},n=t;e=e.next;)n=n.next={data:e.data};return t}var fs=ls.prototype=ds.prototype;function ms(e){return e.x+e.vx}function _s(e){return e.y+e.vy}fs.copy=function(){var e,t,n=new ds(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=cs(r),n;for(e=[{source:r,target:n._root=new Array(4)}];r=e.pop();)for(var o=0;o<4;++o)(t=r.source[o])&&(t.length?e.push({source:t,target:r.target[o]=new Array(4)}):r.target[o]=cs(t));return n},fs.add=function(e){var t=+this._x.call(null,e),n=+this._y.call(null,e);return as(this.cover(t,n),t,n,e)},fs.addAll=function(e){var t,n,r,o,a=e.length,i=new Array(a),s=new Array(a),u=1/0,l=1/0,d=-1/0,c=-1/0;for(n=0;n<a;++n)isNaN(r=+this._x.call(null,t=e[n]))||isNaN(o=+this._y.call(null,t))||(i[n]=r,s[n]=o,r<u&&(u=r),r>d&&(d=r),o<l&&(l=o),o>c&&(c=o));for(d<u&&(u=this._x0,d=this._x1),c<l&&(l=this._y0,c=this._y1),this.cover(u,l).cover(d,c),n=0;n<a;++n)as(this,i[n],s[n],e[n]);return this},fs.cover=function(e,t){if(isNaN(e=+e)||isNaN(t=+t))return this;var n=this._x0,r=this._y0,o=this._x1,a=this._y1;if(isNaN(n))o=(n=Math.floor(e))+1,a=(r=Math.floor(t))+1;else{if(!(n>e||e>o||r>t||t>a))return this;var i,s,u=o-n,l=this._root;switch(s=(t<(r+a)/2)<<1|e<(n+o)/2){case 0:do{(i=new Array(4))[s]=l,l=i}while(a=r+(u*=2),e>(o=n+u)||t>a);break;case 1:do{(i=new Array(4))[s]=l,l=i}while(a=r+(u*=2),(n=o-u)>e||t>a);break;case 2:do{(i=new Array(4))[s]=l,l=i}while(r=a-(u*=2),e>(o=n+u)||r>t);break;case 3:do{(i=new Array(4))[s]=l,l=i}while(r=a-(u*=2),(n=o-u)>e||r>t)}this._root&&this._root.length&&(this._root=l)}return this._x0=n,this._y0=r,this._x1=o,this._y1=a,this},fs.data=function(){var e=[];return this.visit(function(t){if(!t.length)do{e.push(t.data)}while(t=t.next)}),e},fs.extent=function(e){return arguments.length?this.cover(+e[0][0],+e[0][1]).cover(+e[1][0],+e[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},fs.find=function(e,t,n){var r,o,a,i,s,u,l,d=this._x0,c=this._y0,f=this._x1,m=this._y1,_=[],h=this._root;for(h&&_.push(new is(h,d,c,f,m)),null==n?n=1/0:(d=e-n,c=t-n,f=e+n,m=t+n,n*=n);u=_.pop();)if(!(!(h=u.node)||(o=u.x0)>f||(a=u.y0)>m||(i=u.x1)<d||(s=u.y1)<c))if(h.length){var p=(o+i)/2,y=(a+s)/2;_.push(new is(h[3],p,y,i,s),new is(h[2],o,y,p,s),new is(h[1],p,a,i,y),new is(h[0],o,a,p,y)),(l=(t>=y)<<1|e>=p)&&(u=_[_.length-1],_[_.length-1]=_[_.length-1-l],_[_.length-1-l]=u)}else{var g=e-+this._x.call(null,h.data),v=t-+this._y.call(null,h.data),M=g*g+v*v;if(M<n){var b=Math.sqrt(n=M);d=e-b,c=t-b,f=e+b,m=t+b,r=h.data}}return r},fs.remove=function(e){if(isNaN(a=+this._x.call(null,e))||isNaN(i=+this._y.call(null,e)))return this;var t,n,r,o,a,i,s,u,l,d,c,f,m=this._root,_=this._x0,h=this._y0,p=this._x1,y=this._y1;if(!m)return this;if(m.length)for(;;){if((l=a>=(s=(_+p)/2))?_=s:p=s,(d=i>=(u=(h+y)/2))?h=u:y=u,t=m,!(m=m[c=d<<1|l]))return this;if(!m.length)break;(t[c+1&3]||t[c+2&3]||t[c+3&3])&&(n=t,f=c)}for(;m.data!==e;)if(r=m,!(m=m.next))return this;return(o=m.next)&&delete m.next,r?(o?r.next=o:delete r.next,this):t?(o?t[c]=o:delete t[c],(m=t[0]||t[1]||t[2]||t[3])&&m===(t[3]||t[2]||t[1]||t[0])&&!m.length&&(n?n[f]=m:this._root=m),this):(this._root=o,this)},fs.removeAll=function(e){for(var t=0,n=e.length;t<n;++t)this.remove(e[t]);return this},fs.root=function(){return this._root},fs.size=function(){var e=0;return this.visit(function(t){if(!t.length)do{++e}while(t=t.next)}),e},fs.visit=function(e){var t,n,r,o,a,i,s=[],u=this._root;for(u&&s.push(new is(u,this._x0,this._y0,this._x1,this._y1));t=s.pop();)if(!e(u=t.node,r=t.x0,o=t.y0,a=t.x1,i=t.y1)&&u.length){var l=(r+a)/2,d=(o+i)/2;(n=u[3])&&s.push(new is(n,l,d,a,i)),(n=u[2])&&s.push(new is(n,r,d,l,i)),(n=u[1])&&s.push(new is(n,l,o,a,d)),(n=u[0])&&s.push(new is(n,r,o,l,d))}return this},fs.visitAfter=function(e){var t,n=[],r=[];for(this._root&&n.push(new is(this._root,this._x0,this._y0,this._x1,this._y1));t=n.pop();){var o=t.node;if(o.length){var a,i=t.x0,s=t.y0,u=t.x1,l=t.y1,d=(i+u)/2,c=(s+l)/2;(a=o[0])&&n.push(new is(a,i,s,d,c)),(a=o[1])&&n.push(new is(a,d,s,u,c)),(a=o[2])&&n.push(new is(a,i,c,d,l)),(a=o[3])&&n.push(new is(a,d,c,u,l))}r.push(t)}for(;t=r.pop();)e(t.node,t.x0,t.y0,t.x1,t.y1);return this},fs.x=function(e){return arguments.length?(this._x=e,this):this._x},fs.y=function(e){return arguments.length?(this._y=e,this):this._y};var hs=function(e){var t,n,r=1,o=1;function a(){for(var e,a,s,u,l,d,c,f=t.length,m=0;m<o;++m)for(a=ls(t,ms,_s).visitAfter(i),e=0;e<f;++e)s=t[e],d=n[s.index],c=d*d,u=s.x+s.vx,l=s.y+s.vy,a.visit(_);function _(e,t,n,o,a){var i=e.data,f=e.r,m=d+f;if(!i)return t>u+m||o<u-m||n>l+m||a<l-m;if(i.index>s.index){var _=u-i.x-i.vx,h=l-i.y-i.vy,p=_*_+h*h;p<m*m&&(0===_&&(p+=(_=os())*_),0===h&&(p+=(h=os())*h),p=(m-(p=Math.sqrt(p)))/p*r,s.vx+=(_*=p)*(m=(f*=f)/(c+f)),s.vy+=(h*=p)*m,i.vx-=_*(m=1-m),i.vy-=h*m)}}}function i(e){if(e.data)return e.r=n[e.data.index];for(var t=e.r=0;t<4;++t)e[t]&&e[t].r>e.r&&(e.r=e[t].r)}function s(){if(t){var r,o,a=t.length;for(n=new Array(a),r=0;r<a;++r)o=t[r],n[o.index]=+e(o,r,t)}}return"function"!=typeof e&&(e=rs(null==e?1:+e)),a.initialize=function(e){t=e,s()},a.iterations=function(e){return arguments.length?(o=+e,a):o},a.strength=function(e){return arguments.length?(r=+e,a):r},a.radius=function(t){return arguments.length?(e="function"==typeof t?t:rs(+t),s(),a):e},a};function ps(e){return e.index}function ys(e,t){var n=e.get(t);if(!n)throw new Error("missing: "+t);return n}var gs=function(e){var t,n,r,o,a,i=ps,s=function(e){return 1/Math.min(o[e.source.index],o[e.target.index])},u=rs(30),l=1;function d(r){for(var o=0,i=e.length;o<l;++o)for(var s,u,d,c,f,m,_,h=0;h<i;++h)u=(s=e[h]).source,c=(d=s.target).x+d.vx-u.x-u.vx||os(),f=d.y+d.vy-u.y-u.vy||os(),c*=m=((m=Math.sqrt(c*c+f*f))-n[h])/m*r*t[h],f*=m,d.vx-=c*(_=a[h]),d.vy-=f*_,u.vx+=c*(_=1-_),u.vy+=f*_}function c(){if(r){var s,u,l=r.length,d=e.length,c=Ja(r,i);for(s=0,o=new Array(l);s<d;++s)(u=e[s]).index=s,"object"!=typeof u.source&&(u.source=ys(c,u.source)),"object"!=typeof u.target&&(u.target=ys(c,u.target)),o[u.source.index]=(o[u.source.index]||0)+1,o[u.target.index]=(o[u.target.index]||0)+1;for(s=0,a=new Array(d);s<d;++s)u=e[s],a[s]=o[u.source.index]/(o[u.source.index]+o[u.target.index]);t=new Array(d),f(),n=new Array(d),m()}}function f(){if(r)for(var n=0,o=e.length;n<o;++n)t[n]=+s(e[n],n,e)}function m(){if(r)for(var t=0,o=e.length;t<o;++t)n[t]=+u(e[t],t,e)}return null==e&&(e=[]),d.initialize=function(e){r=e,c()},d.links=function(t){return arguments.length?(e=t,c(),d):e},d.id=function(e){return arguments.length?(i=e,d):i},d.iterations=function(e){return arguments.length?(l=+e,d):l},d.strength=function(e){return arguments.length?(s="function"==typeof e?e:rs(+e),f(),d):s},d.distance=function(e){return arguments.length?(u="function"==typeof e?e:rs(+e),m(),d):u},d};function vs(e){return e.x}function Ms(e){return e.y}var bs,Ls=10,ws=Math.PI*(3-Math.sqrt(5)),ks=function(e){var t,n=1,r=.001,o=1-Math.pow(r,1/300),a=0,i=.6,s=Ja(),u=Cr(d),l=fe("tick","end");function d(){c(),l.call("tick",t),n<r&&(u.stop(),l.call("end",t))}function c(){var t,r,u=e.length;for(n+=(a-n)*o,s.each(function(e){e(n)}),t=0;t<u;++t)null==(r=e[t]).fx?r.x+=r.vx*=i:(r.x=r.fx,r.vx=0),null==r.fy?r.y+=r.vy*=i:(r.y=r.fy,r.vy=0)}function f(){for(var t,n=0,r=e.length;n<r;++n){if((t=e[n]).index=n,isNaN(t.x)||isNaN(t.y)){var o=Ls*Math.sqrt(n),a=n*ws;t.x=o*Math.cos(a),t.y=o*Math.sin(a)}(isNaN(t.vx)||isNaN(t.vy))&&(t.vx=t.vy=0)}}function m(t){return t.initialize&&t.initialize(e),t}return null==e&&(e=[]),f(),t={tick:c,restart:function(){return u.restart(d),t},stop:function(){return u.stop(),t},nodes:function(n){return arguments.length?(e=n,f(),s.each(m),t):e},alpha:function(e){return arguments.length?(n=+e,t):n},alphaMin:function(e){return arguments.length?(r=+e,t):r},alphaDecay:function(e){return arguments.length?(o=+e,t):+o},alphaTarget:function(e){return arguments.length?(a=+e,t):a},velocityDecay:function(e){return arguments.length?(i=1-e,t):1-i},force:function(e,n){return arguments.length>1?(null==n?s.remove(e):s.set(e,m(n)),t):s.get(e)},find:function(t,n,r){var o,a,i,s,u,l=0,d=e.length;for(null==r?r=1/0:r*=r,l=0;l<d;++l)(i=(o=t-(s=e[l]).x)*o+(a=n-s.y)*a)<r&&(u=s,r=i);return u},on:function(e,n){return arguments.length>1?(l.on(e,n),t):l.on(e)}}},Ys=function(){var e,t,n,r,o=rs(-30),a=1,i=1/0,s=.81;function u(r){var o,a=e.length,i=ls(e,vs,Ms).visitAfter(d);for(n=r,o=0;o<a;++o)t=e[o],i.visit(c)}function l(){if(e){var t,n,a=e.length;for(r=new Array(a),t=0;t<a;++t)n=e[t],r[n.index]=+o(n,t,e)}}function d(e){var t,n,o,a,i,s=0,u=0;if(e.length){for(o=a=i=0;i<4;++i)(t=e[i])&&(n=Math.abs(t.value))&&(s+=t.value,u+=n,o+=n*t.x,a+=n*t.y);e.x=o/u,e.y=a/u}else{(t=e).x=t.data.x,t.y=t.data.y;do{s+=r[t.data.index]}while(t=t.next)}e.value=s}function c(e,o,u,l){if(!e.value)return!0;var d=e.x-t.x,c=e.y-t.y,f=l-o,m=d*d+c*c;if(f*f/s<m)return m<i&&(0===d&&(m+=(d=os())*d),0===c&&(m+=(c=os())*c),m<a&&(m=Math.sqrt(a*m)),t.vx+=d*e.value*n/m,t.vy+=c*e.value*n/m),!0;if(!(e.length||m>=i)){(e.data!==t||e.next)&&(0===d&&(m+=(d=os())*d),0===c&&(m+=(c=os())*c),m<a&&(m=Math.sqrt(a*m)));do{e.data!==t&&(f=r[e.data.index]*n/m,t.vx+=d*f,t.vy+=c*f)}while(e=e.next)}}return u.initialize=function(t){e=t,l()},u.strength=function(e){return arguments.length?(o="function"==typeof e?e:rs(+e),l(),u):o},u.distanceMin=function(e){return arguments.length?(a=e*e,u):Math.sqrt(a)},u.distanceMax=function(e){return arguments.length?(i=e*e,u):Math.sqrt(i)},u.theta=function(e){return arguments.length?(s=e*e,u):Math.sqrt(s)},u},Ts=function(e,t,n){var r,o,a,i=rs(.1);function s(e){for(var i=0,s=r.length;i<s;++i){var u=r[i],l=u.x-t||1e-6,d=u.y-n||1e-6,c=Math.sqrt(l*l+d*d),f=(a[i]-c)*o[i]*e/c;u.vx+=l*f,u.vy+=d*f}}function u(){if(r){var t,n=r.length;for(o=new Array(n),a=new Array(n),t=0;t<n;++t)a[t]=+e(r[t],t,r),o[t]=isNaN(a[t])?0:+i(r[t],t,r)}}return"function"!=typeof e&&(e=rs(+e)),null==t&&(t=0),null==n&&(n=0),s.initialize=function(e){r=e,u()},s.strength=function(e){return arguments.length?(i="function"==typeof e?e:rs(+e),u(),s):i},s.radius=function(t){return arguments.length?(e="function"==typeof t?t:rs(+t),u(),s):e},s.x=function(e){return arguments.length?(t=+e,s):t},s.y=function(e){return arguments.length?(n=+e,s):n},s},xs=function(e){var t,n,r,o=rs(.1);function a(e){for(var o,a=0,i=t.length;a<i;++a)(o=t[a]).vx+=(r[a]-o.x)*n[a]*e}function i(){if(t){var a,i=t.length;for(n=new Array(i),r=new Array(i),a=0;a<i;++a)n[a]=isNaN(r[a]=+e(t[a],a,t))?0:+o(t[a],a,t)}}return"function"!=typeof e&&(e=rs(null==e?0:+e)),a.initialize=function(e){t=e,i()},a.strength=function(e){return arguments.length?(o="function"==typeof e?e:rs(+e),i(),a):o},a.x=function(t){return arguments.length?(e="function"==typeof t?t:rs(+t),i(),a):e},a},Ds=function(e){var t,n,r,o=rs(.1);function a(e){for(var o,a=0,i=t.length;a<i;++a)(o=t[a]).vy+=(r[a]-o.y)*n[a]*e}function i(){if(t){var a,i=t.length;for(n=new Array(i),r=new Array(i),a=0;a<i;++a)n[a]=isNaN(r[a]=+e(t[a],a,t))?0:+o(t[a],a,t)}}return"function"!=typeof e&&(e=rs(null==e?0:+e)),a.initialize=function(e){t=e,i()},a.strength=function(e){return arguments.length?(o="function"==typeof e?e:rs(+e),i(),a):o},a.y=function(t){return arguments.length?(e="function"==typeof t?t:rs(+t),i(),a):e},a},js=function(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]},Ss=function(e){return(e=js(Math.abs(e)))?e[1]:NaN},Es=function(e,t){var n=js(e,t);if(!n)return e+"";var r=n[0],o=n[1];return o<0?"0."+new Array(-o).join("0")+r:r.length>o+1?r.slice(0,o+1)+"."+r.slice(o+1):r+new Array(o-r.length+2).join("0")},Cs={"":function(e,t){e=e.toPrecision(t);e:for(var n,r=e.length,o=1,a=-1;o<r;++o)switch(e[o]){case".":a=n=o;break;case"0":0===a&&(a=o),n=o;break;case"e":break e;default:a>0&&(a=0)}return a>0?e.slice(0,a)+e.slice(n+1):e},"%":function(e,t){return(100*e).toFixed(t)},b:function(e){return Math.round(e).toString(2)},c:function(e){return e+""},d:function(e){return Math.round(e).toString(10)},e:function(e,t){return e.toExponential(t)},f:function(e,t){return e.toFixed(t)},g:function(e,t){return e.toPrecision(t)},o:function(e){return Math.round(e).toString(8)},p:function(e,t){return Es(100*e,t)},r:Es,s:function(e,t){var n=js(e,t);if(!n)return e+"";var r=n[0],o=n[1],a=o-(bs=3*Math.max(-8,Math.min(8,Math.floor(o/3))))+1,i=r.length;return a===i?r:a>i?r+new Array(a-i+1).join("0"):a>0?r.slice(0,a)+"."+r.slice(a):"0."+new Array(1-a).join("0")+js(e,Math.max(0,t+a-1))[0]},X:function(e){return Math.round(e).toString(16).toUpperCase()},x:function(e){return Math.round(e).toString(16)}},Hs=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;function Os(e){return new Ps(e)}function Ps(e){if(!(t=Hs.exec(e)))throw new Error("invalid format: "+e);var t,n=t[1]||" ",r=t[2]||">",o=t[3]||"-",a=t[4]||"",i=!!t[5],s=t[6]&&+t[6],u=!!t[7],l=t[8]&&+t[8].slice(1),d=t[9]||"";"n"===d?(u=!0,d="g"):Cs[d]||(d=""),(i||"0"===n&&"="===r)&&(i=!0,n="0",r="="),this.fill=n,this.align=r,this.sign=o,this.symbol=a,this.zero=i,this.width=s,this.comma=u,this.precision=l,this.type=d}Os.prototype=Ps.prototype,Ps.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var Ns,As,Fs,Is=function(e){return e},zs=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],Rs=function(e){var t,n,r=e.grouping&&e.thousands?(t=e.grouping,n=e.thousands,function(e,r){for(var o=e.length,a=[],i=0,s=t[0],u=0;o>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),a.push(e.substring(o-=s,o+s)),!((u+=s+1)>r));)s=t[i=(i+1)%t.length];return a.reverse().join(n)}):Is,o=e.currency,a=e.decimal,i=e.numerals?function(e){return function(t){return t.replace(/[0-9]/g,function(t){return e[+t]})}}(e.numerals):Is,s=e.percent||"%";function u(e){var t=(e=Os(e)).fill,n=e.align,u=e.sign,l=e.symbol,d=e.zero,c=e.width,f=e.comma,m=e.precision,_=e.type,h="$"===l?o[0]:"#"===l&&/[boxX]/.test(_)?"0"+_.toLowerCase():"",p="$"===l?o[1]:/[%p]/.test(_)?s:"",y=Cs[_],g=!_||/[defgprs%]/.test(_);function v(e){var o,s,l,v=h,M=p;if("c"===_)M=y(e)+M,e="";else{var b=(e=+e)<0;if(e=y(Math.abs(e),m),b&&0==+e&&(b=!1),v=(b?"("===u?u:"-":"-"===u||"("===u?"":u)+v,M=("s"===_?zs[8+bs/3]:"")+M+(b&&"("===u?")":""),g)for(o=-1,s=e.length;++o<s;)if(48>(l=e.charCodeAt(o))||l>57){M=(46===l?a+e.slice(o+1):e.slice(o))+M,e=e.slice(0,o);break}}f&&!d&&(e=r(e,1/0));var L=v.length+e.length+M.length,w=L<c?new Array(c-L+1).join(t):"";switch(f&&d&&(e=r(w+e,w.length?c-M.length:1/0),w=""),n){case"<":e=v+e+M+w;break;case"=":e=v+w+e+M;break;case"^":e=w.slice(0,L=w.length>>1)+v+e+M+w.slice(L);break;default:e=w+v+e+M}return i(e)}return m=null==m?_?6:12:/[gprs]/.test(_)?Math.max(1,Math.min(21,m)):Math.max(0,Math.min(20,m)),v.toString=function(){return e+""},v}return{format:u,formatPrefix:function(e,t){var n=u(((e=Os(e)).type="f",e)),r=3*Math.max(-8,Math.min(8,Math.floor(Ss(t)/3))),o=Math.pow(10,-r),a=zs[8+r/3];return function(e){return n(o*e)+a}}}};function Ws(e){return Ns=Rs(e),As=Ns.format,Fs=Ns.formatPrefix,Ns}Ws({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var Us=function(e){return Math.max(0,-Ss(Math.abs(e)))},Bs=function(e,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Ss(t)/3)))-Ss(Math.abs(e)))},Vs=function(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,Ss(t)-Ss(e))+1},qs=function(){return new Gs};function Gs(){this.reset()}Gs.prototype={constructor:Gs,reset:function(){this.s=this.t=0},add:function(e){Ks(Js,e,this.t),Ks(this,Js.s,this.s),this.s?this.t+=Js.t:this.s=Js.t},valueOf:function(){return this.s}};var Js=new Gs;function Ks(e,t,n){var r=e.s=t+n,o=r-t,a=r-o;e.t=t-a+(n-o)}var $s=1e-6,Qs=Math.PI,Xs=Qs/2,Zs=Qs/4,eu=2*Qs,tu=180/Qs,nu=Qs/180,ru=Math.abs,ou=Math.atan,au=Math.atan2,iu=Math.cos,su=Math.ceil,uu=Math.exp,lu=(Math.floor,Math.log),du=Math.pow,cu=Math.sin,fu=Math.sign||function(e){return e>0?1:e<0?-1:0},mu=Math.sqrt,_u=Math.tan;function hu(e){return e>1?0:e<-1?Qs:Math.acos(e)}function pu(e){return e>1?Xs:e<-1?-Xs:Math.asin(e)}function yu(e){return(e=cu(e/2))*e}function gu(){}function vu(e,t){e&&bu.hasOwnProperty(e.type)&&bu[e.type](e,t)}var Mu={Feature:function(e,t){vu(e.geometry,t)},FeatureCollection:function(e,t){for(var n=e.features,r=-1,o=n.length;++r<o;)vu(n[r].geometry,t)}},bu={Sphere:function(e,t){t.sphere()},Point:function(e,t){e=e.coordinates,t.point(e[0],e[1],e[2])},MultiPoint:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)e=n[r],t.point(e[0],e[1],e[2])},LineString:function(e,t){Lu(e.coordinates,t,0)},MultiLineString:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)Lu(n[r],t,0)},Polygon:function(e,t){wu(e.coordinates,t)},MultiPolygon:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)wu(n[r],t)},GeometryCollection:function(e,t){for(var n=e.geometries,r=-1,o=n.length;++r<o;)vu(n[r],t)}};function Lu(e,t,n){var r,o=-1,a=e.length-n;for(t.lineStart();++o<a;)r=e[o],t.point(r[0],r[1],r[2]);t.lineEnd()}function wu(e,t){var n=-1,r=e.length;for(t.polygonStart();++n<r;)Lu(e[n],t,1);t.polygonEnd()}var ku,Yu,Tu,xu,Du,ju=function(e,t){e&&Mu.hasOwnProperty(e.type)?Mu[e.type](e,t):vu(e,t)},Su=qs(),Eu=qs(),Cu={point:gu,lineStart:gu,lineEnd:gu,polygonStart:function(){Su.reset(),Cu.lineStart=Hu,Cu.lineEnd=Ou},polygonEnd:function(){var e=+Su;Eu.add(e<0?eu+e:e),this.lineStart=this.lineEnd=this.point=gu},sphere:function(){Eu.add(eu)}};function Hu(){Cu.point=Pu}function Ou(){Nu(ku,Yu)}function Pu(e,t){Cu.point=Nu,ku=e,Yu=t,Tu=e*=nu,xu=iu(t=(t*=nu)/2+Zs),Du=cu(t)}function Nu(e,t){t=(t*=nu)/2+Zs;var n=(e*=nu)-Tu,r=n>=0?1:-1,o=r*n,a=iu(t),i=cu(t),s=Du*i,u=xu*a+s*iu(o),l=s*r*cu(o);Su.add(au(l,u)),Tu=e,xu=a,Du=i}var Au=function(e){return Eu.reset(),ju(e,Cu),2*Eu};function Fu(e){return[au(e[1],e[0]),pu(e[2])]}function Iu(e){var t=e[0],n=e[1],r=iu(n);return[r*iu(t),r*cu(t),cu(n)]}function zu(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function Ru(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]}function Wu(e,t){e[0]+=t[0],e[1]+=t[1],e[2]+=t[2]}function Uu(e,t){return[e[0]*t,e[1]*t,e[2]*t]}function Bu(e){var t=mu(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);e[0]/=t,e[1]/=t,e[2]/=t}var Vu,qu,Gu,Ju,Ku,$u,Qu,Xu,Zu,el,tl=qs(),nl={point:rl,lineStart:al,lineEnd:il,polygonStart:function(){nl.point=sl,nl.lineStart=ul,nl.lineEnd=ll,tl.reset(),Cu.polygonStart()},polygonEnd:function(){Cu.polygonEnd(),nl.point=rl,nl.lineStart=al,nl.lineEnd=il,Su<0?(Vu=-(Gu=180),qu=-(Ju=90)):tl>$s?Ju=90:tl<-$s&&(qu=-90),el[0]=Vu,el[1]=Gu}};function rl(e,t){Zu.push(el=[Vu=e,Gu=e]),t<qu&&(qu=t),t>Ju&&(Ju=t)}function ol(e,t){var n=Iu([e*nu,t*nu]);if(Xu){var r=Ru(Xu,n),o=Ru([r[1],-r[0],0],r);Bu(o),o=Fu(o);var a,i=e-Ku,s=i>0?1:-1,u=o[0]*tu*s,l=ru(i)>180;l^(s*Ku<u&&u<s*e)?(a=o[1]*tu)>Ju&&(Ju=a):l^(s*Ku<(u=(u+360)%360-180)&&u<s*e)?(a=-o[1]*tu)<qu&&(qu=a):(t<qu&&(qu=t),t>Ju&&(Ju=t)),l?e<Ku?dl(Vu,e)>dl(Vu,Gu)&&(Gu=e):dl(e,Gu)>dl(Vu,Gu)&&(Vu=e):Gu>=Vu?(e<Vu&&(Vu=e),e>Gu&&(Gu=e)):e>Ku?dl(Vu,e)>dl(Vu,Gu)&&(Gu=e):dl(e,Gu)>dl(Vu,Gu)&&(Vu=e)}else Zu.push(el=[Vu=e,Gu=e]);t<qu&&(qu=t),t>Ju&&(Ju=t),Xu=n,Ku=e}function al(){nl.point=ol}function il(){el[0]=Vu,el[1]=Gu,nl.point=rl,Xu=null}function sl(e,t){if(Xu){var n=e-Ku;tl.add(ru(n)>180?n+(n>0?360:-360):n)}else $u=e,Qu=t;Cu.point(e,t),ol(e,t)}function ul(){Cu.lineStart()}function ll(){sl($u,Qu),Cu.lineEnd(),ru(tl)>$s&&(Vu=-(Gu=180)),el[0]=Vu,el[1]=Gu,Xu=null}function dl(e,t){return(t-=e)<0?t+360:t}function cl(e,t){return e[0]-t[0]}function fl(e,t){return e[0]<=e[1]?e[0]<=t&&t<=e[1]:t<e[0]||e[1]<t}var ml,_l,hl,pl,yl,gl,vl,Ml,bl,Ll,wl,kl,Yl,Tl,xl,Dl,jl=function(e){var t,n,r,o,a,i,s;if(Ju=Gu=-(Vu=qu=1/0),Zu=[],ju(e,nl),n=Zu.length){for(Zu.sort(cl),t=1,a=[r=Zu[0]];t<n;++t)fl(r,(o=Zu[t])[0])||fl(r,o[1])?(dl(r[0],o[1])>dl(r[0],r[1])&&(r[1]=o[1]),dl(o[0],r[1])>dl(r[0],r[1])&&(r[0]=o[0])):a.push(r=o);for(i=-1/0,t=0,r=a[n=a.length-1];t<=n;r=o,++t)o=a[t],(s=dl(r[1],o[0]))>i&&(i=s,Vu=o[0],Gu=r[1])}return Zu=el=null,Vu===1/0||qu===1/0?[[NaN,NaN],[NaN,NaN]]:[[Vu,qu],[Gu,Ju]]},Sl={sphere:gu,point:El,lineStart:Hl,lineEnd:Nl,polygonStart:function(){Sl.lineStart=Al,Sl.lineEnd=Fl},polygonEnd:function(){Sl.lineStart=Hl,Sl.lineEnd=Nl}};function El(e,t){e*=nu;var n=iu(t*=nu);Cl(n*iu(e),n*cu(e),cu(t))}function Cl(e,t,n){hl+=(e-hl)/++ml,pl+=(t-pl)/ml,yl+=(n-yl)/ml}function Hl(){Sl.point=Ol}function Ol(e,t){e*=nu;var n=iu(t*=nu);Tl=n*iu(e),xl=n*cu(e),Dl=cu(t),Sl.point=Pl,Cl(Tl,xl,Dl)}function Pl(e,t){e*=nu;var n=iu(t*=nu),r=n*iu(e),o=n*cu(e),a=cu(t),i=au(mu((i=xl*a-Dl*o)*i+(i=Dl*r-Tl*a)*i+(i=Tl*o-xl*r)*i),Tl*r+xl*o+Dl*a);_l+=i,gl+=i*(Tl+(Tl=r)),vl+=i*(xl+(xl=o)),Ml+=i*(Dl+(Dl=a)),Cl(Tl,xl,Dl)}function Nl(){Sl.point=El}function Al(){Sl.point=Il}function Fl(){zl(kl,Yl),Sl.point=El}function Il(e,t){kl=e,Yl=t,e*=nu,t*=nu,Sl.point=zl;var n=iu(t);Tl=n*iu(e),xl=n*cu(e),Dl=cu(t),Cl(Tl,xl,Dl)}function zl(e,t){e*=nu;var n=iu(t*=nu),r=n*iu(e),o=n*cu(e),a=cu(t),i=xl*a-Dl*o,s=Dl*r-Tl*a,u=Tl*o-xl*r,l=mu(i*i+s*s+u*u),d=pu(l),c=l&&-d/l;bl+=c*i,Ll+=c*s,wl+=c*u,_l+=d,gl+=d*(Tl+(Tl=r)),vl+=d*(xl+(xl=o)),Ml+=d*(Dl+(Dl=a)),Cl(Tl,xl,Dl)}var Rl=function(e){ml=_l=hl=pl=yl=gl=vl=Ml=bl=Ll=wl=0,ju(e,Sl);var t=bl,n=Ll,r=wl,o=t*t+n*n+r*r;return o<1e-12&&(t=gl,n=vl,r=Ml,_l<$s&&(t=hl,n=pl,r=yl),(o=t*t+n*n+r*r)<1e-12)?[NaN,NaN]:[au(n,t)*tu,pu(r/mu(o))*tu]},Wl=function(e){return function(){return e}},Ul=function(e,t){function n(n,r){return n=e(n,r),t(n[0],n[1])}return e.invert&&t.invert&&(n.invert=function(n,r){return(n=t.invert(n,r))&&e.invert(n[0],n[1])}),n};function Bl(e,t){return[e>Qs?e-eu:e<-Qs?e+eu:e,t]}function Vl(e,t,n){return(e%=eu)?t||n?Ul(Gl(e),Jl(t,n)):Gl(e):t||n?Jl(t,n):Bl}function ql(e){return function(t,n){return[(t+=e)>Qs?t-eu:t<-Qs?t+eu:t,n]}}function Gl(e){var t=ql(e);return t.invert=ql(-e),t}function Jl(e,t){var n=iu(e),r=cu(e),o=iu(t),a=cu(t);function i(e,t){var i=iu(t),s=iu(e)*i,u=cu(e)*i,l=cu(t),d=l*n+s*r;return[au(u*o-d*a,s*n-l*r),pu(d*o+u*a)]}return i.invert=function(e,t){var i=iu(t),s=iu(e)*i,u=cu(e)*i,l=cu(t),d=l*o-u*a;return[au(u*o+l*a,s*n+d*r),pu(d*n-s*r)]},i}Bl.invert=Bl;var Kl=function(e){function t(t){return(t=e(t[0]*nu,t[1]*nu))[0]*=tu,t[1]*=tu,t}return e=Vl(e[0]*nu,e[1]*nu,e.length>2?e[2]*nu:0),t.invert=function(t){return(t=e.invert(t[0]*nu,t[1]*nu))[0]*=tu,t[1]*=tu,t},t};function $l(e,t,n,r,o,a){if(n){var i=iu(t),s=cu(t),u=r*n;null==o?(o=t+r*eu,a=t-u/2):(o=Ql(i,o),a=Ql(i,a),(r>0?o<a:o>a)&&(o+=r*eu));for(var l,d=o;r>0?d>a:d<a;d-=u)l=Fu([i,-s*iu(d),-s*cu(d)]),e.point(l[0],l[1])}}function Ql(e,t){(t=Iu(t))[0]-=e,Bu(t);var n=hu(-t[1]);return((-t[2]<0?-n:n)+eu-$s)%eu}var Xl=function(){var e,t,n=Wl([0,0]),r=Wl(90),o=Wl(6),a={point:function(n,r){e.push(n=t(n,r)),n[0]*=tu,n[1]*=tu}};function i(){var i=n.apply(this,arguments),s=r.apply(this,arguments)*nu,u=o.apply(this,arguments)*nu;return e=[],t=Vl(-i[0]*nu,-i[1]*nu,0).invert,$l(a,s,u,1),i={type:"Polygon",coordinates:[e]},e=t=null,i}return i.center=function(e){return arguments.length?(n="function"==typeof e?e:Wl([+e[0],+e[1]]),i):n},i.radius=function(e){return arguments.length?(r="function"==typeof e?e:Wl(+e),i):r},i.precision=function(e){return arguments.length?(o="function"==typeof e?e:Wl(+e),i):o},i},Zl=function(){var e,t=[];return{point:function(t,n){e.push([t,n])},lineStart:function(){t.push(e=[])},lineEnd:gu,rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))},result:function(){var n=t;return t=[],e=null,n}}},ed=function(e,t){return ru(e[0]-t[0])<$s&&ru(e[1]-t[1])<$s};function td(e,t,n,r){this.x=e,this.z=t,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}var nd=function(e,t,n,r,o){var a,i,s=[],u=[];if(e.forEach(function(e){if(!((t=e.length-1)<=0)){var t,n,r=e[0],i=e[t];if(ed(r,i)){for(o.lineStart(),a=0;a<t;++a)o.point((r=e[a])[0],r[1]);o.lineEnd()}else s.push(n=new td(r,e,null,!0)),u.push(n.o=new td(r,null,n,!1)),s.push(n=new td(i,e,null,!1)),u.push(n.o=new td(i,null,n,!0))}}),s.length){for(u.sort(t),rd(s),rd(u),a=0,i=u.length;a<i;++a)u[a].e=n=!n;for(var l,d,c=s[0];;){for(var f=c,m=!0;f.v;)if((f=f.n)===c)return;l=f.z,o.lineStart();do{if(f.v=f.o.v=!0,f.e){if(m)for(a=0,i=l.length;a<i;++a)o.point((d=l[a])[0],d[1]);else r(f.x,f.n.x,1,o);f=f.n}else{if(m)for(l=f.p.z,a=l.length-1;a>=0;--a)o.point((d=l[a])[0],d[1]);else r(f.x,f.p.x,-1,o);f=f.p}l=(f=f.o).z,m=!m}while(!f.v);o.lineEnd()}}};function rd(e){if(t=e.length){for(var t,n,r=0,o=e[0];++r<t;)o.n=n=e[r],n.p=o,o=n;o.n=n=e[0],n.p=o}}var od=qs(),ad=function(e,t){var n=t[0],r=t[1],o=cu(r),a=[cu(n),-iu(n),0],i=0,s=0;od.reset(),1===o?r=Xs+$s:-1===o&&(r=-Xs-$s);for(var u=0,l=e.length;u<l;++u)if(c=(d=e[u]).length)for(var d,c,f=d[c-1],m=f[0],_=f[1]/2+Zs,h=cu(_),p=iu(_),y=0;y<c;++y,m=v,h=b,p=L,f=g){var g=d[y],v=g[0],M=g[1]/2+Zs,b=cu(M),L=iu(M),w=v-m,k=w>=0?1:-1,Y=k*w,T=Y>Qs,x=h*b;if(od.add(au(x*k*cu(Y),p*L+x*iu(Y))),i+=T?w+k*eu:w,T^m>=n^v>=n){var D=Ru(Iu(f),Iu(g));Bu(D);var j=Ru(a,D);Bu(j);var S=(T^w>=0?-1:1)*pu(j[2]);(r>S||r===S&&(D[0]||D[1]))&&(s+=T^w>=0?1:-1)}}return(i<-$s||i<$s&&od<-$s)^1&s},id=function(e,t,n,r){return function(o){var a,i,s,u=t(o),l=Zl(),d=t(l),c=!1,f={point:m,lineStart:h,lineEnd:p,polygonStart:function(){f.point=y,f.lineStart=g,f.lineEnd=v,i=[],a=[]},polygonEnd:function(){f.point=m,f.lineStart=h,f.lineEnd=p,i=A(i);var e=ad(a,r);i.length?(c||(o.polygonStart(),c=!0),nd(i,ud,e,n,o)):e&&(c||(o.polygonStart(),c=!0),o.lineStart(),n(null,null,1,o),o.lineEnd()),c&&(o.polygonEnd(),c=!1),i=a=null},sphere:function(){o.polygonStart(),o.lineStart(),n(null,null,1,o),o.lineEnd(),o.polygonEnd()}};function m(t,n){e(t,n)&&o.point(t,n)}function _(e,t){u.point(e,t)}function h(){f.point=_,u.lineStart()}function p(){f.point=m,u.lineEnd()}function y(e,t){s.push([e,t]),d.point(e,t)}function g(){d.lineStart(),s=[]}function v(){y(s[0][0],s[0][1]),d.lineEnd();var e,t,n,r,u=d.clean(),f=l.result(),m=f.length;if(s.pop(),a.push(s),s=null,m)if(1&u){if((t=(n=f[0]).length-1)>0){for(c||(o.polygonStart(),c=!0),o.lineStart(),e=0;e<t;++e)o.point((r=n[e])[0],r[1]);o.lineEnd()}}else m>1&&2&u&&f.push(f.pop().concat(f.shift())),i.push(f.filter(sd))}return f}};function sd(e){return e.length>1}function ud(e,t){return((e=e.x)[0]<0?e[1]-Xs-$s:Xs-e[1])-((t=t.x)[0]<0?t[1]-Xs-$s:Xs-t[1])}var ld=id(function(){return!0},function(e){var t,n=NaN,r=NaN,o=NaN;return{lineStart:function(){e.lineStart(),t=1},point:function(a,i){var s=a>0?Qs:-Qs,u=ru(a-n);ru(u-Qs)<$s?(e.point(n,r=(r+i)/2>0?Xs:-Xs),e.point(o,r),e.lineEnd(),e.lineStart(),e.point(s,r),e.point(a,r),t=0):o!==s&&u>=Qs&&(ru(n-o)<$s&&(n-=o*$s),ru(a-s)<$s&&(a-=s*$s),r=function(e,t,n,r){var o,a,i=cu(e-n);return ru(i)>$s?ou((cu(t)*(a=iu(r))*cu(n)-cu(r)*(o=iu(t))*cu(e))/(o*a*i)):(t+r)/2}(n,r,a,i),e.point(o,r),e.lineEnd(),e.lineStart(),e.point(s,r),t=0),e.point(n=a,r=i),o=s},lineEnd:function(){e.lineEnd(),n=r=NaN},clean:function(){return 2-t}}},function(e,t,n,r){var o;if(null==e)o=n*Xs,r.point(-Qs,o),r.point(0,o),r.point(Qs,o),r.point(Qs,0),r.point(Qs,-o),r.point(0,-o),r.point(-Qs,-o),r.point(-Qs,0),r.point(-Qs,o);else if(ru(e[0]-t[0])>$s){var a=e[0]<t[0]?Qs:-Qs;o=n*a/2,r.point(-a,o),r.point(0,o),r.point(a,o)}else r.point(t[0],t[1])},[-Qs,-Xs]);var dd=function(e){var t=iu(e),n=6*nu,r=t>0,o=ru(t)>$s;function a(e,n){return iu(e)*iu(n)>t}function i(e,n,r){var o=[1,0,0],a=Ru(Iu(e),Iu(n)),i=zu(a,a),s=a[0],u=i-s*s;if(!u)return!r&&e;var l=t*i/u,d=-t*s/u,c=Ru(o,a),f=Uu(o,l);Wu(f,Uu(a,d));var m=c,_=zu(f,m),h=zu(m,m),p=_*_-h*(zu(f,f)-1);if(!(p<0)){var y=mu(p),g=Uu(m,(-_-y)/h);if(Wu(g,f),g=Fu(g),!r)return g;var v,M=e[0],b=n[0],L=e[1],w=n[1];b<M&&(v=M,M=b,b=v);var k=b-M,Y=ru(k-Qs)<$s;if(!Y&&w<L&&(v=L,L=w,w=v),Y||k<$s?Y?L+w>0^g[1]<(ru(g[0]-M)<$s?L:w):L<=g[1]&&g[1]<=w:k>Qs^(M<=g[0]&&g[0]<=b)){var T=Uu(m,(-_+y)/h);return Wu(T,f),[g,Fu(T)]}}}function s(t,n){var o=r?e:Qs-e,a=0;return t<-o?a|=1:t>o&&(a|=2),n<-o?a|=4:n>o&&(a|=8),a}return id(a,function(e){var t,n,u,l,d;return{lineStart:function(){l=u=!1,d=1},point:function(c,f){var m,_=[c,f],h=a(c,f),p=r?h?0:s(c,f):h?s(c+(c<0?Qs:-Qs),f):0;if(!t&&(l=u=h)&&e.lineStart(),h!==u&&(!(m=i(t,_))||ed(t,m)||ed(_,m))&&(_[0]+=$s,_[1]+=$s,h=a(_[0],_[1])),h!==u)d=0,h?(e.lineStart(),m=i(_,t),e.point(m[0],m[1])):(m=i(t,_),e.point(m[0],m[1]),e.lineEnd()),t=m;else if(o&&t&&r^h){var y;p&n||!(y=i(_,t,!0))||(d=0,r?(e.lineStart(),e.point(y[0][0],y[0][1]),e.point(y[1][0],y[1][1]),e.lineEnd()):(e.point(y[1][0],y[1][1]),e.lineEnd(),e.lineStart(),e.point(y[0][0],y[0][1])))}!h||t&&ed(t,_)||e.point(_[0],_[1]),t=_,u=h,n=p},lineEnd:function(){u&&e.lineEnd(),t=null},clean:function(){return d|(l&&u)<<1}}},function(t,r,o,a){$l(a,e,n,o,t,r)},r?[0,-e]:[-Qs,e-Qs])},cd=function(e,t,n,r,o,a){var i,s=e[0],u=e[1],l=0,d=1,c=t[0]-s,f=t[1]-u;if(i=n-s,c||!(i>0)){if(i/=c,c<0){if(i<l)return;i<d&&(d=i)}else if(c>0){if(i>d)return;i>l&&(l=i)}if(i=o-s,c||!(i<0)){if(i/=c,c<0){if(i>d)return;i>l&&(l=i)}else if(c>0){if(i<l)return;i<d&&(d=i)}if(i=r-u,f||!(i>0)){if(i/=f,f<0){if(i<l)return;i<d&&(d=i)}else if(f>0){if(i>d)return;i>l&&(l=i)}if(i=a-u,f||!(i<0)){if(i/=f,f<0){if(i>d)return;i>l&&(l=i)}else if(f>0){if(i<l)return;i<d&&(d=i)}return l>0&&(e[0]=s+l*c,e[1]=u+l*f),d<1&&(t[0]=s+d*c,t[1]=u+d*f),!0}}}}},fd=1e9,md=-fd;function _d(e,t,n,r){function o(o,a){return e<=o&&o<=n&&t<=a&&a<=r}function a(o,a,s,l){var d=0,c=0;if(null==o||(d=i(o,s))!==(c=i(a,s))||u(o,a)<0^s>0)do{l.point(0===d||3===d?e:n,d>1?r:t)}while((d=(d+s+4)%4)!==c);else l.point(a[0],a[1])}function i(r,o){return ru(r[0]-e)<$s?o>0?0:3:ru(r[0]-n)<$s?o>0?2:1:ru(r[1]-t)<$s?o>0?1:0:o>0?3:2}function s(e,t){return u(e.x,t.x)}function u(e,t){var n=i(e,1),r=i(t,1);return n!==r?n-r:0===n?t[1]-e[1]:1===n?e[0]-t[0]:2===n?e[1]-t[1]:t[0]-e[0]}return function(i){var u,l,d,c,f,m,_,h,p,y,g,v=i,M=Zl(),b={point:L,lineStart:function(){b.point=w,l&&l.push(d=[]);y=!0,p=!1,_=h=NaN},lineEnd:function(){u&&(w(c,f),m&&p&&M.rejoin(),u.push(M.result()));b.point=L,p&&v.lineEnd()},polygonStart:function(){v=M,u=[],l=[],g=!0},polygonEnd:function(){var t=function(){for(var t=0,n=0,o=l.length;n<o;++n)for(var a,i,s=l[n],u=1,d=s.length,c=s[0],f=c[0],m=c[1];u<d;++u)a=f,i=m,c=s[u],f=c[0],m=c[1],i<=r?m>r&&(f-a)*(r-i)>(m-i)*(e-a)&&++t:m<=r&&(f-a)*(r-i)<(m-i)*(e-a)&&--t;return t}(),n=g&&t,o=(u=A(u)).length;(n||o)&&(i.polygonStart(),n&&(i.lineStart(),a(null,null,1,i),i.lineEnd()),o&&nd(u,s,t,a,i),i.polygonEnd());v=i,u=l=d=null}};function L(e,t){o(e,t)&&v.point(e,t)}function w(a,i){var s=o(a,i);if(l&&d.push([a,i]),y)c=a,f=i,m=s,y=!1,s&&(v.lineStart(),v.point(a,i));else if(s&&p)v.point(a,i);else{var u=[_=Math.max(md,Math.min(fd,_)),h=Math.max(md,Math.min(fd,h))],M=[a=Math.max(md,Math.min(fd,a)),i=Math.max(md,Math.min(fd,i))];cd(u,M,e,t,n,r)?(p||(v.lineStart(),v.point(u[0],u[1])),v.point(M[0],M[1]),s||v.lineEnd(),g=!1):s&&(v.lineStart(),v.point(a,i),g=!1)}_=a,h=i,p=s}return b}}var hd,pd,yd,gd=function(){var e,t,n,r=0,o=0,a=960,i=500;return n={stream:function(n){return e&&t===n?e:e=_d(r,o,a,i)(t=n)},extent:function(s){return arguments.length?(r=+s[0][0],o=+s[0][1],a=+s[1][0],i=+s[1][1],e=t=null,n):[[r,o],[a,i]]}}},vd=qs(),Md={sphere:gu,point:gu,lineStart:function(){Md.point=Ld,Md.lineEnd=bd},lineEnd:gu,polygonStart:gu,polygonEnd:gu};function bd(){Md.point=Md.lineEnd=gu}function Ld(e,t){hd=e*=nu,pd=cu(t*=nu),yd=iu(t),Md.point=wd}function wd(e,t){e*=nu;var n=cu(t*=nu),r=iu(t),o=ru(e-hd),a=iu(o),i=r*cu(o),s=yd*n-pd*r*a,u=pd*n+yd*r*a;vd.add(au(mu(i*i+s*s),u)),hd=e,pd=n,yd=r}var kd=function(e){return vd.reset(),ju(e,Md),+vd},Yd=[null,null],Td={type:"LineString",coordinates:Yd},xd=function(e,t){return Yd[0]=e,Yd[1]=t,kd(Td)},Dd={Feature:function(e,t){return Sd(e.geometry,t)},FeatureCollection:function(e,t){for(var n=e.features,r=-1,o=n.length;++r<o;)if(Sd(n[r].geometry,t))return!0;return!1}},jd={Sphere:function(){return!0},Point:function(e,t){return Ed(e.coordinates,t)},MultiPoint:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)if(Ed(n[r],t))return!0;return!1},LineString:function(e,t){return Cd(e.coordinates,t)},MultiLineString:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)if(Cd(n[r],t))return!0;return!1},Polygon:function(e,t){return Hd(e.coordinates,t)},MultiPolygon:function(e,t){for(var n=e.coordinates,r=-1,o=n.length;++r<o;)if(Hd(n[r],t))return!0;return!1},GeometryCollection:function(e,t){for(var n=e.geometries,r=-1,o=n.length;++r<o;)if(Sd(n[r],t))return!0;return!1}};function Sd(e,t){return!(!e||!jd.hasOwnProperty(e.type))&&jd[e.type](e,t)}function Ed(e,t){return 0===xd(e,t)}function Cd(e,t){var n=xd(e[0],e[1]);return xd(e[0],t)+xd(t,e[1])<=n+$s}function Hd(e,t){return!!ad(e.map(Od),Pd(t))}function Od(e){return(e=e.map(Pd)).pop(),e}function Pd(e){return[e[0]*nu,e[1]*nu]}var Nd=function(e,t){return(e&&Dd.hasOwnProperty(e.type)?Dd[e.type]:Sd)(e,t)};function Ad(e,t,n){var r=L(e,t-$s,n).concat(t);return function(e){return r.map(function(t){return[e,t]})}}function Fd(e,t,n){var r=L(e,t-$s,n).concat(t);return function(e){return r.map(function(t){return[t,e]})}}function Id(){var e,t,n,r,o,a,i,s,u,l,d,c,f=10,m=f,_=90,h=360,p=2.5;function y(){return{type:"MultiLineString",coordinates:g()}}function g(){return L(su(r/_)*_,n,_).map(d).concat(L(su(s/h)*h,i,h).map(c)).concat(L(su(t/f)*f,e,f).filter(function(e){return ru(e%_)>$s}).map(u)).concat(L(su(a/m)*m,o,m).filter(function(e){return ru(e%h)>$s}).map(l))}return y.lines=function(){return g().map(function(e){return{type:"LineString",coordinates:e}})},y.outline=function(){return{type:"Polygon",coordinates:[d(r).concat(c(i).slice(1),d(n).reverse().slice(1),c(s).reverse().slice(1))]}},y.extent=function(e){return arguments.length?y.extentMajor(e).extentMinor(e):y.extentMinor()},y.extentMajor=function(e){return arguments.length?(r=+e[0][0],n=+e[1][0],s=+e[0][1],i=+e[1][1],r>n&&(e=r,r=n,n=e),s>i&&(e=s,s=i,i=e),y.precision(p)):[[r,s],[n,i]]},y.extentMinor=function(n){return arguments.length?(t=+n[0][0],e=+n[1][0],a=+n[0][1],o=+n[1][1],t>e&&(n=t,t=e,e=n),a>o&&(n=a,a=o,o=n),y.precision(p)):[[t,a],[e,o]]},y.step=function(e){return arguments.length?y.stepMajor(e).stepMinor(e):y.stepMinor()},y.stepMajor=function(e){return arguments.length?(_=+e[0],h=+e[1],y):[_,h]},y.stepMinor=function(e){return arguments.length?(f=+e[0],m=+e[1],y):[f,m]},y.precision=function(f){return arguments.length?(p=+f,u=Ad(a,o,90),l=Fd(t,e,p),d=Ad(s,i,90),c=Fd(r,n,p),y):p},y.extentMajor([[-180,-90+$s],[180,90-$s]]).extentMinor([[-180,-80-$s],[180,80+$s]])}function zd(){return Id()()}var Rd,Wd,Ud,Bd,Vd=function(e,t){var n=e[0]*nu,r=e[1]*nu,o=t[0]*nu,a=t[1]*nu,i=iu(r),s=cu(r),u=iu(a),l=cu(a),d=i*iu(n),c=i*cu(n),f=u*iu(o),m=u*cu(o),_=2*pu(mu(yu(a-r)+i*u*yu(o-n))),h=cu(_),p=_?function(e){var t=cu(e*=_)/h,n=cu(_-e)/h,r=n*d+t*f,o=n*c+t*m,a=n*s+t*l;return[au(o,r)*tu,au(a,mu(r*r+o*o))*tu]}:function(){return[n*tu,r*tu]};return p.distance=_,p},qd=function(e){return e},Gd=qs(),Jd=qs(),Kd={point:gu,lineStart:gu,lineEnd:gu,polygonStart:function(){Kd.lineStart=$d,Kd.lineEnd=Zd},polygonEnd:function(){Kd.lineStart=Kd.lineEnd=Kd.point=gu,Gd.add(ru(Jd)),Jd.reset()},result:function(){var e=Gd/2;return Gd.reset(),e}};function $d(){Kd.point=Qd}function Qd(e,t){Kd.point=Xd,Rd=Ud=e,Wd=Bd=t}function Xd(e,t){Jd.add(Bd*e-Ud*t),Ud=e,Bd=t}function Zd(){Xd(Rd,Wd)}var ec=Kd,tc=1/0,nc=tc,rc=-tc,oc=rc;var ac,ic,sc,uc,lc={point:function(e,t){e<tc&&(tc=e);e>rc&&(rc=e);t<nc&&(nc=t);t>oc&&(oc=t)},lineStart:gu,lineEnd:gu,polygonStart:gu,polygonEnd:gu,result:function(){var e=[[tc,nc],[rc,oc]];return rc=oc=-(nc=tc=1/0),e}},dc=0,cc=0,fc=0,mc=0,_c=0,hc=0,pc=0,yc=0,gc=0,vc={point:Mc,lineStart:bc,lineEnd:kc,polygonStart:function(){vc.lineStart=Yc,vc.lineEnd=Tc},polygonEnd:function(){vc.point=Mc,vc.lineStart=bc,vc.lineEnd=kc},result:function(){var e=gc?[pc/gc,yc/gc]:hc?[mc/hc,_c/hc]:fc?[dc/fc,cc/fc]:[NaN,NaN];return dc=cc=fc=mc=_c=hc=pc=yc=gc=0,e}};function Mc(e,t){dc+=e,cc+=t,++fc}function bc(){vc.point=Lc}function Lc(e,t){vc.point=wc,Mc(sc=e,uc=t)}function wc(e,t){var n=e-sc,r=t-uc,o=mu(n*n+r*r);mc+=o*(sc+e)/2,_c+=o*(uc+t)/2,hc+=o,Mc(sc=e,uc=t)}function kc(){vc.point=Mc}function Yc(){vc.point=xc}function Tc(){Dc(ac,ic)}function xc(e,t){vc.point=Dc,Mc(ac=sc=e,ic=uc=t)}function Dc(e,t){var n=e-sc,r=t-uc,o=mu(n*n+r*r);mc+=o*(sc+e)/2,_c+=o*(uc+t)/2,hc+=o,pc+=(o=uc*e-sc*t)*(sc+e),yc+=o*(uc+t),gc+=3*o,Mc(sc=e,uc=t)}var jc=vc;function Sc(e){this._context=e}Sc.prototype={_radius:4.5,pointRadius:function(e){return this._radius=e,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(e,t){switch(this._point){case 0:this._context.moveTo(e,t),this._point=1;break;case 1:this._context.lineTo(e,t);break;default:this._context.moveTo(e+this._radius,t),this._context.arc(e,t,this._radius,0,eu)}},result:gu};var Ec,Cc,Hc,Oc,Pc,Nc=qs(),Ac={point:gu,lineStart:function(){Ac.point=Fc},lineEnd:function(){Ec&&Ic(Cc,Hc),Ac.point=gu},polygonStart:function(){Ec=!0},polygonEnd:function(){Ec=null},result:function(){var e=+Nc;return Nc.reset(),e}};function Fc(e,t){Ac.point=Ic,Cc=Oc=e,Hc=Pc=t}function Ic(e,t){Oc-=e,Pc-=t,Nc.add(mu(Oc*Oc+Pc*Pc)),Oc=e,Pc=t}var zc=Ac;function Rc(){this._string=[]}function Wc(e){return"m0,"+e+"a"+e+","+e+" 0 1,1 0,"+-2*e+"a"+e+","+e+" 0 1,1 0,"+2*e+"z"}Rc.prototype={_radius:4.5,_circle:Wc(4.5),pointRadius:function(e){return(e=+e)!==this._radius&&(this._radius=e,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(e,t){switch(this._point){case 0:this._string.push("M",e,",",t),this._point=1;break;case 1:this._string.push("L",e,",",t);break;default:null==this._circle&&(this._circle=Wc(this._radius)),this._string.push("M",e,",",t,this._circle)}},result:function(){if(this._string.length){var e=this._string.join("");return this._string=[],e}return null}};var Uc=function(e,t){var n,r,o=4.5;function a(e){return e&&("function"==typeof o&&r.pointRadius(+o.apply(this,arguments)),ju(e,n(r))),r.result()}return a.area=function(e){return ju(e,n(ec)),ec.result()},a.measure=function(e){return ju(e,n(zc)),zc.result()},a.bounds=function(e){return ju(e,n(lc)),lc.result()},a.centroid=function(e){return ju(e,n(jc)),jc.result()},a.projection=function(t){return arguments.length?(n=null==t?(e=null,qd):(e=t).stream,a):e},a.context=function(e){return arguments.length?(r=null==e?(t=null,new Rc):new Sc(t=e),"function"!=typeof o&&r.pointRadius(o),a):t},a.pointRadius=function(e){return arguments.length?(o="function"==typeof e?e:(r.pointRadius(+e),+e),a):o},a.projection(e).context(t)},Bc=function(e){return{stream:Vc(e)}};function Vc(e){return function(t){var n=new qc;for(var r in e)n[r]=e[r];return n.stream=t,n}}function qc(){}function Gc(e,t,n){var r=e.clipExtent&&e.clipExtent();return e.scale(150).translate([0,0]),null!=r&&e.clipExtent(null),ju(n,e.stream(lc)),t(lc.result()),null!=r&&e.clipExtent(r),e}function Jc(e,t,n){return Gc(e,function(n){var r=t[1][0]-t[0][0],o=t[1][1]-t[0][1],a=Math.min(r/(n[1][0]-n[0][0]),o/(n[1][1]-n[0][1])),i=+t[0][0]+(r-a*(n[1][0]+n[0][0]))/2,s=+t[0][1]+(o-a*(n[1][1]+n[0][1]))/2;e.scale(150*a).translate([i,s])},n)}function Kc(e,t,n){return Jc(e,[[0,0],t],n)}function $c(e,t,n){return Gc(e,function(n){var r=+t,o=r/(n[1][0]-n[0][0]),a=(r-o*(n[1][0]+n[0][0]))/2,i=-o*n[0][1];e.scale(150*o).translate([a,i])},n)}function Qc(e,t,n){return Gc(e,function(n){var r=+t,o=r/(n[1][1]-n[0][1]),a=-o*n[0][0],i=(r-o*(n[1][1]+n[0][1]))/2;e.scale(150*o).translate([a,i])},n)}qc.prototype={constructor:qc,point:function(e,t){this.stream.point(e,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var Xc=16,Zc=iu(30*nu),ef=function(e,t){return+t?function(e,t){function n(r,o,a,i,s,u,l,d,c,f,m,_,h,p){var y=l-r,g=d-o,v=y*y+g*g;if(v>4*t&&h--){var M=i+f,b=s+m,L=u+_,w=mu(M*M+b*b+L*L),k=pu(L/=w),Y=ru(ru(L)-1)<$s||ru(a-c)<$s?(a+c)/2:au(b,M),T=e(Y,k),x=T[0],D=T[1],j=x-r,S=D-o,E=g*j-y*S;(E*E/v>t||ru((y*j+g*S)/v-.5)>.3||i*f+s*m+u*_<Zc)&&(n(r,o,a,i,s,u,x,D,Y,M/=w,b/=w,L,h,p),p.point(x,D),n(x,D,Y,M,b,L,l,d,c,f,m,_,h,p))}}return function(t){var r,o,a,i,s,u,l,d,c,f,m,_,h={point:p,lineStart:y,lineEnd:v,polygonStart:function(){t.polygonStart(),h.lineStart=M},polygonEnd:function(){t.polygonEnd(),h.lineStart=y}};function p(n,r){n=e(n,r),t.point(n[0],n[1])}function y(){d=NaN,h.point=g,t.lineStart()}function g(r,o){var a=Iu([r,o]),i=e(r,o);n(d,c,l,f,m,_,d=i[0],c=i[1],l=r,f=a[0],m=a[1],_=a[2],Xc,t),t.point(d,c)}function v(){h.point=p,t.lineEnd()}function M(){y(),h.point=b,h.lineEnd=L}function b(e,t){g(r=e,t),o=d,a=c,i=f,s=m,u=_,h.point=g}function L(){n(d,c,l,f,m,_,o,a,r,i,s,u,Xc,t),h.lineEnd=v,v()}return h}}(e,t):function(e){return Vc({point:function(t,n){t=e(t,n),this.stream.point(t[0],t[1])}})}(e)};var tf=Vc({point:function(e,t){this.stream.point(e*nu,t*nu)}});function nf(e,t,n,r){var o=iu(r),a=cu(r),i=o*e,s=a*e,u=o/e,l=a/e,d=(a*n-o*t)/e,c=(a*t+o*n)/e;function f(e,r){return[i*e-s*r+t,n-s*e-i*r]}return f.invert=function(e,t){return[u*e-l*t+d,c-l*e-u*t]},f}function rf(e){return of(function(){return e})()}function of(e){var t,n,r,o,a,i,s,u,l,d,c=150,f=480,m=250,_=0,h=0,p=0,y=0,g=0,v=0,M=null,b=ld,L=null,w=qd,k=.5;function Y(e){return u(e[0]*nu,e[1]*nu)}function T(e){return(e=u.invert(e[0],e[1]))&&[e[0]*tu,e[1]*tu]}function x(){var e=nf(c,0,0,v).apply(null,t(_,h)),r=(v?nf:function(e,t,n){function r(r,o){return[t+e*r,n-e*o]}return r.invert=function(r,o){return[(r-t)/e,(n-o)/e]},r})(c,f-e[0],m-e[1],v);return n=Vl(p,y,g),s=Ul(t,r),u=Ul(n,s),i=ef(s,k),D()}function D(){return l=d=null,Y}return Y.stream=function(e){return l&&d===e?l:l=tf(function(e){return Vc({point:function(t,n){var r=e(t,n);return this.stream.point(r[0],r[1])}})}(n)(b(i(w(d=e)))))},Y.preclip=function(e){return arguments.length?(b=e,M=void 0,D()):b},Y.postclip=function(e){return arguments.length?(w=e,L=r=o=a=null,D()):w},Y.clipAngle=function(e){return arguments.length?(b=+e?dd(M=e*nu):(M=null,ld),D()):M*tu},Y.clipExtent=function(e){return arguments.length?(w=null==e?(L=r=o=a=null,qd):_d(L=+e[0][0],r=+e[0][1],o=+e[1][0],a=+e[1][1]),D()):null==L?null:[[L,r],[o,a]]},Y.scale=function(e){return arguments.length?(c=+e,x()):c},Y.translate=function(e){return arguments.length?(f=+e[0],m=+e[1],x()):[f,m]},Y.center=function(e){return arguments.length?(_=e[0]%360*nu,h=e[1]%360*nu,x()):[_*tu,h*tu]},Y.rotate=function(e){return arguments.length?(p=e[0]%360*nu,y=e[1]%360*nu,g=e.length>2?e[2]%360*nu:0,x()):[p*tu,y*tu,g*tu]},Y.angle=function(e){return arguments.length?(v=e%360*nu,x()):v*tu},Y.precision=function(e){return arguments.length?(i=ef(s,k=e*e),D()):mu(k)},Y.fitExtent=function(e,t){return Jc(Y,e,t)},Y.fitSize=function(e,t){return Kc(Y,e,t)},Y.fitWidth=function(e,t){return $c(Y,e,t)},Y.fitHeight=function(e,t){return Qc(Y,e,t)},function(){return t=e.apply(this,arguments),Y.invert=t.invert&&T,x()}}function af(e){var t=0,n=Qs/3,r=of(e),o=r(t,n);return o.parallels=function(e){return arguments.length?r(t=e[0]*nu,n=e[1]*nu):[t*tu,n*tu]},o}function sf(e,t){var n=cu(e),r=(n+cu(t))/2;if(ru(r)<$s)return function(e){var t=iu(e);function n(e,n){return[e*t,cu(n)/t]}return n.invert=function(e,n){return[e/t,pu(n*t)]},n}(e);var o=1+n*(2*r-n),a=mu(o)/r;function i(e,t){var n=mu(o-2*r*cu(t))/r;return[n*cu(e*=r),a-n*iu(e)]}return i.invert=function(e,t){var n=a-t;return[au(e,ru(n))/r*fu(n),pu((o-(e*e+n*n)*r*r)/(2*r))]},i}var uf=function(){return af(sf).scale(155.424).center([0,33.6442])},lf=function(){return uf().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};var df=function(){var e,t,n,r,o,a,i=lf(),s=uf().rotate([154,0]).center([-2,58.5]).parallels([55,65]),u=uf().rotate([157,0]).center([-3,19.9]).parallels([8,18]),l={point:function(e,t){a=[e,t]}};function d(e){var t=e[0],i=e[1];return a=null,n.point(t,i),a||(r.point(t,i),a)||(o.point(t,i),a)}function c(){return e=t=null,d}return d.invert=function(e){var t=i.scale(),n=i.translate(),r=(e[0]-n[0])/t,o=(e[1]-n[1])/t;return(o>=.12&&o<.234&&r>=-.425&&r<-.214?s:o>=.166&&o<.234&&r>=-.214&&r<-.115?u:i).invert(e)},d.stream=function(n){return e&&t===n?e:(r=[i.stream(t=n),s.stream(n),u.stream(n)],o=r.length,e={point:function(e,t){for(var n=-1;++n<o;)r[n].point(e,t)},sphere:function(){for(var e=-1;++e<o;)r[e].sphere()},lineStart:function(){for(var e=-1;++e<o;)r[e].lineStart()},lineEnd:function(){for(var e=-1;++e<o;)r[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<o;)r[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<o;)r[e].polygonEnd()}});var r,o},d.precision=function(e){return arguments.length?(i.precision(e),s.precision(e),u.precision(e),c()):i.precision()},d.scale=function(e){return arguments.length?(i.scale(e),s.scale(.35*e),u.scale(e),d.translate(i.translate())):i.scale()},d.translate=function(e){if(!arguments.length)return i.translate();var t=i.scale(),a=+e[0],d=+e[1];return n=i.translate(e).clipExtent([[a-.455*t,d-.238*t],[a+.455*t,d+.238*t]]).stream(l),r=s.translate([a-.307*t,d+.201*t]).clipExtent([[a-.425*t+$s,d+.12*t+$s],[a-.214*t-$s,d+.234*t-$s]]).stream(l),o=u.translate([a-.205*t,d+.212*t]).clipExtent([[a-.214*t+$s,d+.166*t+$s],[a-.115*t-$s,d+.234*t-$s]]).stream(l),c()},d.fitExtent=function(e,t){return Jc(d,e,t)},d.fitSize=function(e,t){return Kc(d,e,t)},d.fitWidth=function(e,t){return $c(d,e,t)},d.fitHeight=function(e,t){return Qc(d,e,t)},d.scale(1070)};function cf(e){return function(t,n){var r=iu(t),o=iu(n),a=e(r*o);return[a*o*cu(t),a*cu(n)]}}function ff(e){return function(t,n){var r=mu(t*t+n*n),o=e(r),a=cu(o),i=iu(o);return[au(t*a,r*i),pu(r&&n*a/r)]}}var mf=cf(function(e){return mu(2/(1+e))});mf.invert=ff(function(e){return 2*pu(e/2)});var _f=function(){return rf(mf).scale(124.75).clipAngle(179.999)},hf=cf(function(e){return(e=hu(e))&&e/cu(e)});hf.invert=ff(function(e){return e});var pf=function(){return rf(hf).scale(79.4188).clipAngle(179.999)};function yf(e,t){return[e,lu(_u((Xs+t)/2))]}yf.invert=function(e,t){return[e,2*ou(uu(t))-Xs]};var gf=function(){return vf(yf).scale(961/eu)};function vf(e){var t,n,r,o=rf(e),a=o.center,i=o.scale,s=o.translate,u=o.clipExtent,l=null;function d(){var a=Qs*i(),s=o(Kl(o.rotate()).invert([0,0]));return u(null==l?[[s[0]-a,s[1]-a],[s[0]+a,s[1]+a]]:e===yf?[[Math.max(s[0]-a,l),t],[Math.min(s[0]+a,n),r]]:[[l,Math.max(s[1]-a,t)],[n,Math.min(s[1]+a,r)]])}return o.scale=function(e){return arguments.length?(i(e),d()):i()},o.translate=function(e){return arguments.length?(s(e),d()):s()},o.center=function(e){return arguments.length?(a(e),d()):a()},o.clipExtent=function(e){return arguments.length?(null==e?l=t=n=r=null:(l=+e[0][0],t=+e[0][1],n=+e[1][0],r=+e[1][1]),d()):null==l?null:[[l,t],[n,r]]},d()}function Mf(e){return _u((Xs+e)/2)}function bf(e,t){var n=iu(e),r=e===t?cu(e):lu(n/iu(t))/lu(Mf(t)/Mf(e)),o=n*du(Mf(e),r)/r;if(!r)return yf;function a(e,t){o>0?t<-Xs+$s&&(t=-Xs+$s):t>Xs-$s&&(t=Xs-$s);var n=o/du(Mf(t),r);return[n*cu(r*e),o-n*iu(r*e)]}return a.invert=function(e,t){var n=o-t,a=fu(r)*mu(e*e+n*n);return[au(e,ru(n))/r*fu(n),2*ou(du(o/a,1/r))-Xs]},a}var Lf=function(){return af(bf).scale(109.5).parallels([30,30])};function wf(e,t){return[e,t]}wf.invert=wf;var kf=function(){return rf(wf).scale(152.63)};function Yf(e,t){var n=iu(e),r=e===t?cu(e):(n-iu(t))/(t-e),o=n/r+e;if(ru(r)<$s)return wf;function a(e,t){var n=o-t,a=r*e;return[n*cu(a),o-n*iu(a)]}return a.invert=function(e,t){var n=o-t;return[au(e,ru(n))/r*fu(n),o-fu(r)*mu(e*e+n*n)]},a}var Tf=function(){return af(Yf).scale(131.154).center([0,13.9389])};function xf(e,t){var n=iu(t),r=iu(e)*n;return[n*cu(e)/r,cu(t)/r]}xf.invert=ff(ou);var Df=function(){return rf(xf).scale(144.049).clipAngle(60)};function jf(e,t,n,r){return 1===e&&1===t&&0===n&&0===r?qd:Vc({point:function(o,a){this.stream.point(o*e+n,a*t+r)}})}var Sf=function(){var e,t,n,r,o,a,i=1,s=0,u=0,l=1,d=1,c=qd,f=null,m=qd;function _(){return r=o=null,a}return a={stream:function(e){return r&&o===e?r:r=c(m(o=e))},postclip:function(r){return arguments.length?(m=r,f=e=t=n=null,_()):m},clipExtent:function(r){return arguments.length?(m=null==r?(f=e=t=n=null,qd):_d(f=+r[0][0],e=+r[0][1],t=+r[1][0],n=+r[1][1]),_()):null==f?null:[[f,e],[t,n]]},scale:function(e){return arguments.length?(c=jf((i=+e)*l,i*d,s,u),_()):i},translate:function(e){return arguments.length?(c=jf(i*l,i*d,s=+e[0],u=+e[1]),_()):[s,u]},reflectX:function(e){return arguments.length?(c=jf(i*(l=e?-1:1),i*d,s,u),_()):l<0},reflectY:function(e){return arguments.length?(c=jf(i*l,i*(d=e?-1:1),s,u),_()):d<0},fitExtent:function(e,t){return Jc(a,e,t)},fitSize:function(e,t){return Kc(a,e,t)},fitWidth:function(e,t){return $c(a,e,t)},fitHeight:function(e,t){return Qc(a,e,t)}}};function Ef(e,t){var n=t*t,r=n*n;return[e*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),t*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}Ef.invert=function(e,t){var n,r=t,o=25;do{var a=r*r,i=a*a;r-=n=(r*(1.007226+a*(.015085+i*(.028874*a-.044475-.005916*i)))-t)/(1.007226+a*(.045255+i*(.259866*a-.311325-.005916*11*i)))}while(ru(n)>$s&&--o>0);return[e/(.8707+(a=r*r)*(a*(a*a*a*(.003971-.001529*a)-.013791)-.131979)),r]};var Cf=function(){return rf(Ef).scale(175.295)};function Hf(e,t){return[iu(t)*cu(e),cu(t)]}Hf.invert=ff(pu);var Of=function(){return rf(Hf).scale(249.5).clipAngle(90+$s)};function Pf(e,t){var n=iu(t),r=1+iu(e)*n;return[n*cu(e)/r,cu(t)/r]}Pf.invert=ff(function(e){return 2*ou(e)});var Nf=function(){return rf(Pf).scale(250).clipAngle(142)};function Af(e,t){return[lu(_u((Xs+t)/2)),-e]}Af.invert=function(e,t){return[-t,2*ou(uu(e))-Xs]};var Ff=function(){var e=vf(Af),t=e.center,n=e.rotate;return e.center=function(e){return arguments.length?t([-e[1],e[0]]):[(e=t())[1],-e[0]]},e.rotate=function(e){return arguments.length?n([e[0],e[1],e.length>2?e[2]+90:90]):[(e=n())[0],e[1],e[2]-90]},n([0,0,90]).scale(159.155)};function If(e,t){return e.parent===t.parent?1:2}function zf(e,t){return e+t.x}function Rf(e,t){return Math.max(e,t.y)}var Wf=function(){var e=If,t=1,n=1,r=!1;function o(o){var a,i=0;o.eachAfter(function(t){var n=t.children;n?(t.x=function(e){return e.reduce(zf,0)/e.length}(n),t.y=function(e){return 1+e.reduce(Rf,0)}(n)):(t.x=a?i+=e(t,a):0,t.y=0,a=t)});var s=function(e){for(var t;t=e.children;)e=t[0];return e}(o),u=function(e){for(var t;t=e.children;)e=t[t.length-1];return e}(o),l=s.x-e(s,u)/2,d=u.x+e(u,s)/2;return o.eachAfter(r?function(e){e.x=(e.x-o.x)*t,e.y=(o.y-e.y)*n}:function(e){e.x=(e.x-l)/(d-l)*t,e.y=(1-(o.y?e.y/o.y:1))*n})}return o.separation=function(t){return arguments.length?(e=t,o):e},o.size=function(e){return arguments.length?(r=!1,t=+e[0],n=+e[1],o):r?null:[t,n]},o.nodeSize=function(e){return arguments.length?(r=!0,t=+e[0],n=+e[1],o):r?[t,n]:null},o};function Uf(e){var t=0,n=e.children,r=n&&n.length;if(r)for(;--r>=0;)t+=n[r].value;else t=1;e.value=t}function Bf(e,t){var n,r,o,a,i,s=new Jf(e),u=+e.value&&(s.value=e.value),l=[s];for(null==t&&(t=Vf);n=l.pop();)if(u&&(n.value=+n.data.value),(o=t(n.data))&&(i=o.length))for(n.children=new Array(i),a=i-1;a>=0;--a)l.push(r=n.children[a]=new Jf(o[a])),r.parent=n,r.depth=n.depth+1;return s.eachBefore(Gf)}function Vf(e){return e.children}function qf(e){e.data=e.data.data}function Gf(e){var t=0;do{e.height=t}while((e=e.parent)&&e.height<++t)}function Jf(e){this.data=e,this.depth=this.height=0,this.parent=null}Jf.prototype=Bf.prototype={constructor:Jf,count:function(){return this.eachAfter(Uf)},each:function(e){var t,n,r,o,a=this,i=[a];do{for(t=i.reverse(),i=[];a=t.pop();)if(e(a),n=a.children)for(r=0,o=n.length;r<o;++r)i.push(n[r])}while(i.length);return this},eachAfter:function(e){for(var t,n,r,o=this,a=[o],i=[];o=a.pop();)if(i.push(o),t=o.children)for(n=0,r=t.length;n<r;++n)a.push(t[n]);for(;o=i.pop();)e(o);return this},eachBefore:function(e){for(var t,n,r=this,o=[r];r=o.pop();)if(e(r),t=r.children)for(n=t.length-1;n>=0;--n)o.push(t[n]);return this},sum:function(e){return this.eachAfter(function(t){for(var n=+e(t.data)||0,r=t.children,o=r&&r.length;--o>=0;)n+=r[o].value;t.value=n})},sort:function(e){return this.eachBefore(function(t){t.children&&t.children.sort(e)})},path:function(e){for(var t=this,n=function(e,t){if(e===t)return e;var n=e.ancestors(),r=t.ancestors(),o=null;for(e=n.pop(),t=r.pop();e===t;)o=e,e=n.pop(),t=r.pop();return o}(t,e),r=[t];t!==n;)t=t.parent,r.push(t);for(var o=r.length;e!==n;)r.splice(o,0,e),e=e.parent;return r},ancestors:function(){for(var e=this,t=[e];e=e.parent;)t.push(e);return t},descendants:function(){var e=[];return this.each(function(t){e.push(t)}),e},leaves:function(){var e=[];return this.eachBefore(function(t){t.children||e.push(t)}),e},links:function(){var e=this,t=[];return e.each(function(n){n!==e&&t.push({source:n.parent,target:n})}),t},copy:function(){return Bf(this).eachBefore(qf)}};var Kf=Array.prototype.slice;var $f=function(e){for(var t,n,r=0,o=(e=function(e){for(var t,n,r=e.length;r;)n=Math.random()*r--|0,t=e[r],e[r]=e[n],e[n]=t;return e}(Kf.call(e))).length,a=[];r<o;)t=e[r],n&&Zf(n,t)?++r:(n=tm(a=Qf(a,t)),r=0);return n};function Qf(e,t){var n,r;if(em(t,e))return[t];for(n=0;n<e.length;++n)if(Xf(t,e[n])&&em(nm(e[n],t),e))return[e[n],t];for(n=0;n<e.length-1;++n)for(r=n+1;r<e.length;++r)if(Xf(nm(e[n],e[r]),t)&&Xf(nm(e[n],t),e[r])&&Xf(nm(e[r],t),e[n])&&em(rm(e[n],e[r],t),e))return[e[n],e[r],t];throw new Error}function Xf(e,t){var n=e.r-t.r,r=t.x-e.x,o=t.y-e.y;return n<0||n*n<r*r+o*o}function Zf(e,t){var n=e.r-t.r+1e-6,r=t.x-e.x,o=t.y-e.y;return n>0&&n*n>r*r+o*o}function em(e,t){for(var n=0;n<t.length;++n)if(!Zf(e,t[n]))return!1;return!0}function tm(e){switch(e.length){case 1:return{x:(t=e[0]).x,y:t.y,r:t.r};case 2:return nm(e[0],e[1]);case 3:return rm(e[0],e[1],e[2])}var t}function nm(e,t){var n=e.x,r=e.y,o=e.r,a=t.x,i=t.y,s=t.r,u=a-n,l=i-r,d=s-o,c=Math.sqrt(u*u+l*l);return{x:(n+a+u/c*d)/2,y:(r+i+l/c*d)/2,r:(c+o+s)/2}}function rm(e,t,n){var r=e.x,o=e.y,a=e.r,i=t.x,s=t.y,u=t.r,l=n.x,d=n.y,c=n.r,f=r-i,m=r-l,_=o-s,h=o-d,p=u-a,y=c-a,g=r*r+o*o-a*a,v=g-i*i-s*s+u*u,M=g-l*l-d*d+c*c,b=m*_-f*h,L=(_*M-h*v)/(2*b)-r,w=(h*p-_*y)/b,k=(m*v-f*M)/(2*b)-o,Y=(f*y-m*p)/b,T=w*w+Y*Y-1,x=2*(a+L*w+k*Y),D=L*L+k*k-a*a,j=-(T?(x+Math.sqrt(x*x-4*T*D))/(2*T):D/x);return{x:r+L+w*j,y:o+k+Y*j,r:j}}function om(e,t,n){var r,o,a,i,s=e.x-t.x,u=e.y-t.y,l=s*s+u*u;l?(o=t.r+n.r,o*=o,i=e.r+n.r,o>(i*=i)?(r=(l+i-o)/(2*l),a=Math.sqrt(Math.max(0,i/l-r*r)),n.x=e.x-r*s-a*u,n.y=e.y-r*u+a*s):(r=(l+o-i)/(2*l),a=Math.sqrt(Math.max(0,o/l-r*r)),n.x=t.x+r*s-a*u,n.y=t.y+r*u+a*s)):(n.x=t.x+n.r,n.y=t.y)}function am(e,t){var n=e.r+t.r-1e-6,r=t.x-e.x,o=t.y-e.y;return n>0&&n*n>r*r+o*o}function im(e){var t=e._,n=e.next._,r=t.r+n.r,o=(t.x*n.r+n.x*t.r)/r,a=(t.y*n.r+n.y*t.r)/r;return o*o+a*a}function sm(e){this._=e,this.next=null,this.previous=null}function um(e){if(!(o=e.length))return 0;var t,n,r,o,a,i,s,u,l,d,c;if((t=e[0]).x=0,t.y=0,!(o>1))return t.r;if(n=e[1],t.x=-n.r,n.x=t.r,n.y=0,!(o>2))return t.r+n.r;om(n,t,r=e[2]),t=new sm(t),n=new sm(n),r=new sm(r),t.next=r.previous=n,n.next=t.previous=r,r.next=n.previous=t;e:for(s=3;s<o;++s){om(t._,n._,r=e[s]),r=new sm(r),u=n.next,l=t.previous,d=n._.r,c=t._.r;do{if(d<=c){if(am(u._,r._)){n=u,t.next=n,n.previous=t,--s;continue e}d+=u._.r,u=u.next}else{if(am(l._,r._)){(t=l).next=n,n.previous=t,--s;continue e}c+=l._.r,l=l.previous}}while(u!==l.next);for(r.previous=t,r.next=n,t.next=n.previous=n=r,a=im(t);(r=r.next)!==n;)(i=im(r))<a&&(t=r,a=i);n=t.next}for(t=[n._],r=n;(r=r.next)!==n;)t.push(r._);for(r=$f(t),s=0;s<o;++s)(t=e[s]).x-=r.x,t.y-=r.y;return r.r}var lm=function(e){return um(e),e};function dm(e){if("function"!=typeof e)throw new Error;return e}function cm(){return 0}var fm=function(e){return function(){return e}};function mm(e){return Math.sqrt(e.value)}var _m=function(){var e=null,t=1,n=1,r=cm;function o(o){return o.x=t/2,o.y=n/2,e?o.eachBefore(hm(e)).eachAfter(pm(r,.5)).eachBefore(ym(1)):o.eachBefore(hm(mm)).eachAfter(pm(cm,1)).eachAfter(pm(r,o.r/Math.min(t,n))).eachBefore(ym(Math.min(t,n)/(2*o.r))),o}return o.radius=function(t){return arguments.length?(e=null==(n=t)?null:dm(n),o):e;var n},o.size=function(e){return arguments.length?(t=+e[0],n=+e[1],o):[t,n]},o.padding=function(e){return arguments.length?(r="function"==typeof e?e:fm(+e),o):r},o};function hm(e){return function(t){t.children||(t.r=Math.max(0,+e(t)||0))}}function pm(e,t){return function(n){if(r=n.children){var r,o,a,i=r.length,s=e(n)*t||0;if(s)for(o=0;o<i;++o)r[o].r+=s;if(a=um(r),s)for(o=0;o<i;++o)r[o].r-=s;n.r=a+s}}}function ym(e){return function(t){var n=t.parent;t.r*=e,n&&(t.x=n.x+e*t.x,t.y=n.y+e*t.y)}}var gm=function(e){e.x0=Math.round(e.x0),e.y0=Math.round(e.y0),e.x1=Math.round(e.x1),e.y1=Math.round(e.y1)},vm=function(e,t,n,r,o){for(var a,i=e.children,s=-1,u=i.length,l=e.value&&(r-t)/e.value;++s<u;)(a=i[s]).y0=n,a.y1=o,a.x0=t,a.x1=t+=a.value*l},Mm=function(){var e=1,t=1,n=0,r=!1;function o(o){var a=o.height+1;return o.x0=o.y0=n,o.x1=e,o.y1=t/a,o.eachBefore(function(e,t){return function(r){r.children&&vm(r,r.x0,e*(r.depth+1)/t,r.x1,e*(r.depth+2)/t);var o=r.x0,a=r.y0,i=r.x1-n,s=r.y1-n;i<o&&(o=i=(o+i)/2),s<a&&(a=s=(a+s)/2),r.x0=o,r.y0=a,r.x1=i,r.y1=s}}(t,a)),r&&o.eachBefore(gm),o}return o.round=function(e){return arguments.length?(r=!!e,o):r},o.size=function(n){return arguments.length?(e=+n[0],t=+n[1],o):[e,t]},o.padding=function(e){return arguments.length?(n=+e,o):n},o},bm="$",Lm={depth:-1},wm={};function km(e){return e.id}function Ym(e){return e.parentId}var Tm=function(){var e=km,t=Ym;function n(n){var r,o,a,i,s,u,l,d=n.length,c=new Array(d),f={};for(o=0;o<d;++o)r=n[o],s=c[o]=new Jf(r),null!=(u=e(r,o,n))&&(u+="")&&(f[l=bm+(s.id=u)]=l in f?wm:s);for(o=0;o<d;++o)if(s=c[o],null!=(u=t(n[o],o,n))&&(u+="")){if(!(i=f[bm+u]))throw new Error("missing: "+u);if(i===wm)throw new Error("ambiguous: "+u);i.children?i.children.push(s):i.children=[s],s.parent=i}else{if(a)throw new Error("multiple roots");a=s}if(!a)throw new Error("no root");if(a.parent=Lm,a.eachBefore(function(e){e.depth=e.parent.depth+1,--d}).eachBefore(Gf),a.parent=null,d>0)throw new Error("cycle");return a}return n.id=function(t){return arguments.length?(e=dm(t),n):e},n.parentId=function(e){return arguments.length?(t=dm(e),n):t},n};function xm(e,t){return e.parent===t.parent?1:2}function Dm(e){var t=e.children;return t?t[0]:e.t}function jm(e){var t=e.children;return t?t[t.length-1]:e.t}function Sm(e,t,n){var r=n/(t.i-e.i);t.c-=r,t.s+=n,e.c+=r,t.z+=n,t.m+=n}function Em(e,t,n){return e.a.parent===t.parent?e.a:n}function Cm(e,t){this._=e,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=t}Cm.prototype=Object.create(Jf.prototype);var Hm=function(){var e=xm,t=1,n=1,r=null;function o(o){var u=function(e){for(var t,n,r,o,a,i=new Cm(e,0),s=[i];t=s.pop();)if(r=t._.children)for(t.children=new Array(a=r.length),o=a-1;o>=0;--o)s.push(n=t.children[o]=new Cm(r[o],o)),n.parent=t;return(i.parent=new Cm(null,0)).children=[i],i}(o);if(u.eachAfter(a),u.parent.m=-u.z,u.eachBefore(i),r)o.eachBefore(s);else{var l=o,d=o,c=o;o.eachBefore(function(e){e.x<l.x&&(l=e),e.x>d.x&&(d=e),e.depth>c.depth&&(c=e)});var f=l===d?1:e(l,d)/2,m=f-l.x,_=t/(d.x+f+m),h=n/(c.depth||1);o.eachBefore(function(e){e.x=(e.x+m)*_,e.y=e.depth*h})}return o}function a(t){var n=t.children,r=t.parent.children,o=t.i?r[t.i-1]:null;if(n){!function(e){for(var t,n=0,r=0,o=e.children,a=o.length;--a>=0;)(t=o[a]).z+=n,t.m+=n,n+=t.s+(r+=t.c)}(t);var a=(n[0].z+n[n.length-1].z)/2;o?(t.z=o.z+e(t._,o._),t.m=t.z-a):t.z=a}else o&&(t.z=o.z+e(t._,o._));t.parent.A=function(t,n,r){if(n){for(var o,a=t,i=t,s=n,u=a.parent.children[0],l=a.m,d=i.m,c=s.m,f=u.m;s=jm(s),a=Dm(a),s&&a;)u=Dm(u),(i=jm(i)).a=t,(o=s.z+c-a.z-l+e(s._,a._))>0&&(Sm(Em(s,t,r),t,o),l+=o,d+=o),c+=s.m,l+=a.m,f+=u.m,d+=i.m;s&&!jm(i)&&(i.t=s,i.m+=c-d),a&&!Dm(u)&&(u.t=a,u.m+=l-f,r=t)}return r}(t,o,t.parent.A||r[0])}function i(e){e._.x=e.z+e.parent.m,e.m+=e.parent.m}function s(e){e.x*=t,e.y=e.depth*n}return o.separation=function(t){return arguments.length?(e=t,o):e},o.size=function(e){return arguments.length?(r=!1,t=+e[0],n=+e[1],o):r?null:[t,n]},o.nodeSize=function(e){return arguments.length?(r=!0,t=+e[0],n=+e[1],o):r?[t,n]:null},o},Om=function(e,t,n,r,o){for(var a,i=e.children,s=-1,u=i.length,l=e.value&&(o-n)/e.value;++s<u;)(a=i[s]).x0=t,a.x1=r,a.y0=n,a.y1=n+=a.value*l},Pm=(1+Math.sqrt(5))/2;function Nm(e,t,n,r,o,a){for(var i,s,u,l,d,c,f,m,_,h,p,y=[],g=t.children,v=0,M=0,b=g.length,L=t.value;v<b;){u=o-n,l=a-r;do{d=g[M++].value}while(!d&&M<b);for(c=f=d,p=d*d*(h=Math.max(l/u,u/l)/(L*e)),_=Math.max(f/p,p/c);M<b;++M){if(d+=s=g[M].value,s<c&&(c=s),s>f&&(f=s),p=d*d*h,(m=Math.max(f/p,p/c))>_){d-=s;break}_=m}y.push(i={value:d,dice:u<l,children:g.slice(v,M)}),i.dice?vm(i,n,r,o,L?r+=l*d/L:a):Om(i,n,r,L?n+=u*d/L:o,a),L-=d,v=M}return y}var Am=function e(t){function n(e,n,r,o,a){Nm(t,e,n,r,o,a)}return n.ratio=function(t){return e((t=+t)>1?t:1)},n}(Pm),Fm=function(){var e=Am,t=!1,n=1,r=1,o=[0],a=cm,i=cm,s=cm,u=cm,l=cm;function d(e){return e.x0=e.y0=0,e.x1=n,e.y1=r,e.eachBefore(c),o=[0],t&&e.eachBefore(gm),e}function c(t){var n=o[t.depth],r=t.x0+n,d=t.y0+n,c=t.x1-n,f=t.y1-n;c<r&&(r=c=(r+c)/2),f<d&&(d=f=(d+f)/2),t.x0=r,t.y0=d,t.x1=c,t.y1=f,t.children&&(n=o[t.depth+1]=a(t)/2,r+=l(t)-n,d+=i(t)-n,c-=s(t)-n,f-=u(t)-n,c<r&&(r=c=(r+c)/2),f<d&&(d=f=(d+f)/2),e(t,r,d,c,f))}return d.round=function(e){return arguments.length?(t=!!e,d):t},d.size=function(e){return arguments.length?(n=+e[0],r=+e[1],d):[n,r]},d.tile=function(t){return arguments.length?(e=dm(t),d):e},d.padding=function(e){return arguments.length?d.paddingInner(e).paddingOuter(e):d.paddingInner()},d.paddingInner=function(e){return arguments.length?(a="function"==typeof e?e:fm(+e),d):a},d.paddingOuter=function(e){return arguments.length?d.paddingTop(e).paddingRight(e).paddingBottom(e).paddingLeft(e):d.paddingTop()},d.paddingTop=function(e){return arguments.length?(i="function"==typeof e?e:fm(+e),d):i},d.paddingRight=function(e){return arguments.length?(s="function"==typeof e?e:fm(+e),d):s},d.paddingBottom=function(e){return arguments.length?(u="function"==typeof e?e:fm(+e),d):u},d.paddingLeft=function(e){return arguments.length?(l="function"==typeof e?e:fm(+e),d):l},d},Im=function(e,t,n,r,o){var a,i,s=e.children,u=s.length,l=new Array(u+1);for(l[0]=i=a=0;a<u;++a)l[a+1]=i+=s[a].value;!function e(t,n,r,o,a,i,u){if(t>=n-1){var d=s[t];return d.x0=o,d.y0=a,d.x1=i,void(d.y1=u)}var c=l[t],f=r/2+c,m=t+1,_=n-1;for(;m<_;){var h=m+_>>>1;l[h]<f?m=h+1:_=h}f-l[m-1]<l[m]-f&&t+1<m&&--m;var p=l[m]-c,y=r-p;if(i-o>u-a){var g=(o*y+i*p)/r;e(t,m,p,o,a,g,u),e(m,n,y,g,a,i,u)}else{var v=(a*y+u*p)/r;e(t,m,p,o,a,i,v),e(m,n,y,o,v,i,u)}}(0,u,e.value,t,n,r,o)},zm=function(e,t,n,r,o){(1&e.depth?Om:vm)(e,t,n,r,o)},Rm=function e(t){function n(e,n,r,o,a){if((i=e._squarify)&&i.ratio===t)for(var i,s,u,l,d,c=-1,f=i.length,m=e.value;++c<f;){for(u=(s=i[c]).children,l=s.value=0,d=u.length;l<d;++l)s.value+=u[l].value;s.dice?vm(s,n,r,o,r+=(a-r)*s.value/m):Om(s,n,r,n+=(o-n)*s.value/m,a),m-=s.value}else e._squarify=i=Nm(t,e,n,r,o,a),i.ratio=t}return n.ratio=function(t){return e((t=+t)>1?t:1)},n}(Pm),Wm=function(e){for(var t,n=-1,r=e.length,o=e[r-1],a=0;++n<r;)t=o,o=e[n],a+=t[1]*o[0]-t[0]*o[1];return a/2},Um=function(e){for(var t,n,r=-1,o=e.length,a=0,i=0,s=e[o-1],u=0;++r<o;)t=s,s=e[r],u+=n=t[0]*s[1]-s[0]*t[1],a+=(t[0]+s[0])*n,i+=(t[1]+s[1])*n;return[a/(u*=3),i/u]},Bm=function(e,t,n){return(t[0]-e[0])*(n[1]-e[1])-(t[1]-e[1])*(n[0]-e[0])};function Vm(e,t){return e[0]-t[0]||e[1]-t[1]}function qm(e){for(var t=e.length,n=[0,1],r=2,o=2;o<t;++o){for(;r>1&&Bm(e[n[r-2]],e[n[r-1]],e[o])<=0;)--r;n[r++]=o}return n.slice(0,r)}var Gm=function(e){if((n=e.length)<3)return null;var t,n,r=new Array(n),o=new Array(n);for(t=0;t<n;++t)r[t]=[+e[t][0],+e[t][1],t];for(r.sort(Vm),t=0;t<n;++t)o[t]=[r[t][0],-r[t][1]];var a=qm(r),i=qm(o),s=i[0]===a[0],u=i[i.length-1]===a[a.length-1],l=[];for(t=a.length-1;t>=0;--t)l.push(e[r[a[t]][2]]);for(t=+s;t<i.length-u;++t)l.push(e[r[i[t]][2]]);return l},Jm=function(e,t){for(var n,r,o=e.length,a=e[o-1],i=t[0],s=t[1],u=a[0],l=a[1],d=!1,c=0;c<o;++c)n=(a=e[c])[0],(r=a[1])>s!=l>s&&i<(u-n)*(s-r)/(l-r)+n&&(d=!d),u=n,l=r;return d},Km=function(e){for(var t,n,r=-1,o=e.length,a=e[o-1],i=a[0],s=a[1],u=0;++r<o;)t=i,n=s,t-=i=(a=e[r])[0],n-=s=a[1],u+=Math.sqrt(t*t+n*n);return u},$m=function(){return Math.random()},Qm=function e(t){function n(e,n){return e=null==e?0:+e,n=null==n?1:+n,1===arguments.length?(n=e,e=0):n-=e,function(){return t()*n+e}}return n.source=e,n}($m),Xm=function e(t){function n(e,n){var r,o;return e=null==e?0:+e,n=null==n?1:+n,function(){var a;if(null!=r)a=r,r=null;else do{r=2*t()-1,a=2*t()-1,o=r*r+a*a}while(!o||o>1);return e+n*a*Math.sqrt(-2*Math.log(o)/o)}}return n.source=e,n}($m),Zm=function e(t){function n(){var e=Xm.source(t).apply(this,arguments);return function(){return Math.exp(e())}}return n.source=e,n}($m),e_=function e(t){function n(e){return function(){for(var n=0,r=0;r<e;++r)n+=t();return n}}return n.source=e,n}($m),t_=function e(t){function n(e){var n=e_.source(t)(e);return function(){return n()/e}}return n.source=e,n}($m),n_=function e(t){function n(e){return function(){return-Math.log(1-t())/e}}return n.source=e,n}($m),r_=Array.prototype,o_=r_.map,a_=r_.slice,i_={name:"implicit"};function s_(e){var t=Ja(),n=[],r=i_;function o(o){var a=o+"",i=t.get(a);if(!i){if(r!==i_)return r;t.set(a,i=n.push(o))}return e[(i-1)%e.length]}return e=null==e?[]:a_.call(e),o.domain=function(e){if(!arguments.length)return n.slice();n=[],t=Ja();for(var r,a,i=-1,s=e.length;++i<s;)t.has(a=(r=e[i])+"")||t.set(a,n.push(r));return o},o.range=function(t){return arguments.length?(e=a_.call(t),o):e.slice()},o.unknown=function(e){return arguments.length?(r=e,o):r},o.copy=function(){return s_().domain(n).range(e).unknown(r)},o}function u_(){var e,t,n=s_().unknown(void 0),r=n.domain,o=n.range,a=[0,1],i=!1,s=0,u=0,l=.5;function d(){var n=r().length,d=a[1]<a[0],c=a[d-0],f=a[1-d];e=(f-c)/Math.max(1,n-s+2*u),i&&(e=Math.floor(e)),c+=(f-c-e*(n-s))*l,t=e*(1-s),i&&(c=Math.round(c),t=Math.round(t));var m=L(n).map(function(t){return c+e*t});return o(d?m.reverse():m)}return delete n.unknown,n.domain=function(e){return arguments.length?(r(e),d()):r()},n.range=function(e){return arguments.length?(a=[+e[0],+e[1]],d()):a.slice()},n.rangeRound=function(e){return a=[+e[0],+e[1]],i=!0,d()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(i=!!e,d()):i},n.padding=function(e){return arguments.length?(s=u=Math.max(0,Math.min(1,e)),d()):s},n.paddingInner=function(e){return arguments.length?(s=Math.max(0,Math.min(1,e)),d()):s},n.paddingOuter=function(e){return arguments.length?(u=Math.max(0,Math.min(1,e)),d()):u},n.align=function(e){return arguments.length?(l=Math.max(0,Math.min(1,e)),d()):l},n.copy=function(){return u_().domain(r()).range(a).round(i).paddingInner(s).paddingOuter(u).align(l)},d()}function l_(){return function e(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return e(n())},t}(u_().paddingInner(1))}var d_=function(e){return function(){return e}},c_=function(e){return+e},f_=[0,1];function m_(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:d_(t)}function __(e,t,n,r){var o=e[0],a=e[1],i=t[0],s=t[1];return a<o?(o=n(a,o),i=r(s,i)):(o=n(o,a),i=r(i,s)),function(e){return i(o(e))}}function h_(e,t,n,r){var o=Math.min(e.length,t.length)-1,a=new Array(o),i=new Array(o),s=-1;for(e[o]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++s<o;)a[s]=n(e[s],e[s+1]),i[s]=r(t[s],t[s+1]);return function(t){var n=u(e,t,1,o)-1;return i[n](a[n](t))}}function p_(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp())}function y_(e,t){var n,r,o,a=f_,i=f_,s=$n,u=!1;function l(){return n=Math.min(a.length,i.length)>2?h_:__,r=o=null,d}function d(t){return(r||(r=n(a,i,u?function(e){return function(t,n){var r=e(t=+t,n=+n);return function(e){return e<=t?0:e>=n?1:r(e)}}}(e):e,s)))(+t)}return d.invert=function(e){return(o||(o=n(i,a,m_,u?function(e){return function(t,n){var r=e(t=+t,n=+n);return function(e){return e<=0?t:e>=1?n:r(e)}}}(t):t)))(+e)},d.domain=function(e){return arguments.length?(a=o_.call(e,c_),l()):a.slice()},d.range=function(e){return arguments.length?(i=a_.call(e),l()):i.slice()},d.rangeRound=function(e){return i=a_.call(e),s=Qn,l()},d.clamp=function(e){return arguments.length?(u=!!e,l()):u},d.interpolate=function(e){return arguments.length?(s=e,l()):s},l()}var g_=function(e,t,n){var r,o=e[0],a=e[e.length-1],i=D(o,a,null==t?10:t);switch((n=Os(null==n?",f":n)).type){case"s":var s=Math.max(Math.abs(o),Math.abs(a));return null!=n.precision||isNaN(r=Bs(i,s))||(n.precision=r),Fs(n,s);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(r=Vs(i,Math.max(Math.abs(o),Math.abs(a))))||(n.precision=r-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(r=Us(i))||(n.precision=r-2*("%"===n.type))}return As(n)};function v_(e){var t=e.domain;return e.ticks=function(e){var n=t();return T(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){return g_(t(),e,n)},e.nice=function(n){null==n&&(n=10);var r,o=t(),a=0,i=o.length-1,s=o[a],u=o[i];return u<s&&(r=s,s=u,u=r,r=a,a=i,i=r),(r=x(s,u,n))>0?r=x(s=Math.floor(s/r)*r,u=Math.ceil(u/r)*r,n):r<0&&(r=x(s=Math.ceil(s*r)/r,u=Math.floor(u*r)/r,n)),r>0?(o[a]=Math.floor(s/r)*r,o[i]=Math.ceil(u/r)*r,t(o)):r<0&&(o[a]=Math.ceil(s*r)/r,o[i]=Math.floor(u*r)/r,t(o)),e},e}function M_(){var e=y_(m_,Rn);return e.copy=function(){return p_(e,M_())},v_(e)}function b_(){var e=[0,1];function t(e){return+e}return t.invert=t,t.domain=t.range=function(n){return arguments.length?(e=o_.call(n,c_),t):e.slice()},t.copy=function(){return b_().domain(e)},v_(t)}var L_=function(e,t){var n,r=0,o=(e=e.slice()).length-1,a=e[r],i=e[o];return i<a&&(n=r,r=o,o=n,n=a,a=i,i=n),e[r]=t.floor(a),e[o]=t.ceil(i),e};function w_(e,t){return(t=Math.log(t/e))?function(n){return Math.log(n/e)/t}:d_(t)}function k_(e,t){return e<0?function(n){return-Math.pow(-t,n)*Math.pow(-e,1-n)}:function(n){return Math.pow(t,n)*Math.pow(e,1-n)}}function Y_(e){return isFinite(e)?+("1e"+e):e<0?0:e}function T_(e){return 10===e?Y_:e===Math.E?Math.exp:function(t){return Math.pow(e,t)}}function x_(e){return e===Math.E?Math.log:10===e&&Math.log10||2===e&&Math.log2||(e=Math.log(e),function(t){return Math.log(t)/e})}function D_(e){return function(t){return-e(-t)}}function j_(){var e=y_(w_,k_).domain([1,10]),t=e.domain,n=10,r=x_(10),o=T_(10);function a(){return r=x_(n),o=T_(n),t()[0]<0&&(r=D_(r),o=D_(o)),e}return e.base=function(e){return arguments.length?(n=+e,a()):n},e.domain=function(e){return arguments.length?(t(e),a()):t()},e.ticks=function(e){var a,i=t(),s=i[0],u=i[i.length-1];(a=u<s)&&(f=s,s=u,u=f);var l,d,c,f=r(s),m=r(u),_=null==e?10:+e,h=[];if(!(n%1)&&m-f<_){if(f=Math.round(f)-1,m=Math.round(m)+1,s>0){for(;f<m;++f)for(d=1,l=o(f);d<n;++d)if(!((c=l*d)<s)){if(c>u)break;h.push(c)}}else for(;f<m;++f)for(d=n-1,l=o(f);d>=1;--d)if(!((c=l*d)<s)){if(c>u)break;h.push(c)}}else h=T(f,m,Math.min(m-f,_)).map(o);return a?h.reverse():h},e.tickFormat=function(t,a){if(null==a&&(a=10===n?".0e":","),"function"!=typeof a&&(a=As(a)),t===1/0)return a;null==t&&(t=10);var i=Math.max(1,n*t/e.ticks().length);return function(e){var t=e/o(Math.round(r(e)));return t*n<n-.5&&(t*=n),t<=i?a(e):""}},e.nice=function(){return t(L_(t(),{floor:function(e){return o(Math.floor(r(e)))},ceil:function(e){return o(Math.ceil(r(e)))}}))},e.copy=function(){return p_(e,j_().base(n))},e}function S_(e,t){return e<0?-Math.pow(-e,t):Math.pow(e,t)}function E_(){var e=1,t=y_(function(t,n){return(n=S_(n,e)-(t=S_(t,e)))?function(r){return(S_(r,e)-t)/n}:d_(n)},function(t,n){return n=S_(n,e)-(t=S_(t,e)),function(r){return S_(t+n*r,1/e)}}),n=t.domain;return t.exponent=function(t){return arguments.length?(e=+t,n(n())):e},t.copy=function(){return p_(t,E_().exponent(e))},v_(t)}function C_(){return E_().exponent(.5)}function H_(){var e=[],t=[],n=[];function o(){var r=0,o=Math.max(1,t.length);for(n=new Array(o-1);++r<o;)n[r-1]=E(e,r/o);return a}function a(e){if(!isNaN(e=+e))return t[u(n,e)]}return a.invertExtent=function(r){var o=t.indexOf(r);return o<0?[NaN,NaN]:[o>0?n[o-1]:e[0],o<n.length?n[o]:e[e.length-1]]},a.domain=function(t){if(!arguments.length)return e.slice();e=[];for(var n,a=0,i=t.length;a<i;++a)null==(n=t[a])||isNaN(n=+n)||e.push(n);return e.sort(r),o()},a.range=function(e){return arguments.length?(t=a_.call(e),o()):t.slice()},a.quantiles=function(){return n.slice()},a.copy=function(){return H_().domain(e).range(t)},a}function O_(){var e=0,t=1,n=1,r=[.5],o=[0,1];function a(e){if(e<=e)return o[u(r,e,0,n)]}function i(){var o=-1;for(r=new Array(n);++o<n;)r[o]=((o+1)*t-(o-n)*e)/(n+1);return a}return a.domain=function(n){return arguments.length?(e=+n[0],t=+n[1],i()):[e,t]},a.range=function(e){return arguments.length?(n=(o=a_.call(e)).length-1,i()):o.slice()},a.invertExtent=function(a){var i=o.indexOf(a);return i<0?[NaN,NaN]:i<1?[e,r[0]]:i>=n?[r[n-1],t]:[r[i-1],r[i]]},a.copy=function(){return O_().domain([e,t]).range(o)},v_(a)}function P_(){var e=[.5],t=[0,1],n=1;function r(r){if(r<=r)return t[u(e,r,0,n)]}return r.domain=function(o){return arguments.length?(e=a_.call(o),n=Math.min(e.length,t.length-1),r):e.slice()},r.range=function(o){return arguments.length?(t=a_.call(o),n=Math.min(e.length,t.length-1),r):t.slice()},r.invertExtent=function(n){var r=t.indexOf(n);return[e[r-1],e[r]]},r.copy=function(){return P_().domain(e).range(t)},r}var N_=new Date,A_=new Date;function F_(e,t,n,r){function o(t){return e(t=new Date(+t)),t}return o.floor=o,o.ceil=function(n){return e(n=new Date(n-1)),t(n,1),e(n),n},o.round=function(e){var t=o(e),n=o.ceil(e);return e-t<n-e?t:n},o.offset=function(e,n){return t(e=new Date(+e),null==n?1:Math.floor(n)),e},o.range=function(n,r,a){var i,s=[];if(n=o.ceil(n),a=null==a?1:Math.floor(a),!(n<r&&a>0))return s;do{s.push(i=new Date(+n)),t(n,a),e(n)}while(i<n&&n<r);return s},o.filter=function(n){return F_(function(t){if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)},function(e,r){if(e>=e)if(r<0)for(;++r<=0;)for(;t(e,-1),!n(e););else for(;--r>=0;)for(;t(e,1),!n(e););})},n&&(o.count=function(t,r){return N_.setTime(+t),A_.setTime(+r),e(N_),e(A_),Math.floor(n(N_,A_))},o.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?o.filter(r?function(t){return r(t)%e==0}:function(t){return o.count(0,t)%e==0}):o:null}),o}var I_=F_(function(){},function(e,t){e.setTime(+e+t)},function(e,t){return t-e});I_.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?F_(function(t){t.setTime(Math.floor(t/e)*e)},function(t,n){t.setTime(+t+n*e)},function(t,n){return(n-t)/e}):I_:null};var z_=I_,R_=I_.range,W_=6e4,U_=6048e5,B_=F_(function(e){e.setTime(1e3*Math.floor(e/1e3))},function(e,t){e.setTime(+e+1e3*t)},function(e,t){return(t-e)/1e3},function(e){return e.getUTCSeconds()}),V_=B_,q_=B_.range,G_=F_(function(e){e.setTime(Math.floor(e/W_)*W_)},function(e,t){e.setTime(+e+t*W_)},function(e,t){return(t-e)/W_},function(e){return e.getMinutes()}),J_=G_,K_=G_.range,$_=F_(function(e){var t=e.getTimezoneOffset()*W_%36e5;t<0&&(t+=36e5),e.setTime(36e5*Math.floor((+e-t)/36e5)+t)},function(e,t){e.setTime(+e+36e5*t)},function(e,t){return(t-e)/36e5},function(e){return e.getHours()}),Q_=$_,X_=$_.range,Z_=F_(function(e){e.setHours(0,0,0,0)},function(e,t){e.setDate(e.getDate()+t)},function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*W_)/864e5},function(e){return e.getDate()-1}),eh=Z_,th=Z_.range;function nh(e){return F_(function(t){t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)},function(e,t){e.setDate(e.getDate()+7*t)},function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*W_)/U_})}var rh=nh(0),oh=nh(1),ah=nh(2),ih=nh(3),sh=nh(4),uh=nh(5),lh=nh(6),dh=rh.range,ch=oh.range,fh=ah.range,mh=ih.range,_h=sh.range,hh=uh.range,ph=lh.range,yh=F_(function(e){e.setDate(1),e.setHours(0,0,0,0)},function(e,t){e.setMonth(e.getMonth()+t)},function(e,t){return t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())},function(e){return e.getMonth()}),gh=yh,vh=yh.range,Mh=F_(function(e){e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,t){e.setFullYear(e.getFullYear()+t)},function(e,t){return t.getFullYear()-e.getFullYear()},function(e){return e.getFullYear()});Mh.every=function(e){return isFinite(e=Math.floor(e))&&e>0?F_(function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n*e)}):null};var bh=Mh,Lh=Mh.range,wh=F_(function(e){e.setUTCSeconds(0,0)},function(e,t){e.setTime(+e+t*W_)},function(e,t){return(t-e)/W_},function(e){return e.getUTCMinutes()}),kh=wh,Yh=wh.range,Th=F_(function(e){e.setUTCMinutes(0,0,0)},function(e,t){e.setTime(+e+36e5*t)},function(e,t){return(t-e)/36e5},function(e){return e.getUTCHours()}),xh=Th,Dh=Th.range,jh=F_(function(e){e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCDate(e.getUTCDate()+t)},function(e,t){return(t-e)/864e5},function(e){return e.getUTCDate()-1}),Sh=jh,Eh=jh.range;function Ch(e){return F_(function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)},function(e,t){e.setUTCDate(e.getUTCDate()+7*t)},function(e,t){return(t-e)/U_})}var Hh=Ch(0),Oh=Ch(1),Ph=Ch(2),Nh=Ch(3),Ah=Ch(4),Fh=Ch(5),Ih=Ch(6),zh=Hh.range,Rh=Oh.range,Wh=Ph.range,Uh=Nh.range,Bh=Ah.range,Vh=Fh.range,qh=Ih.range,Gh=F_(function(e){e.setUTCDate(1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCMonth(e.getUTCMonth()+t)},function(e,t){return t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())},function(e){return e.getUTCMonth()}),Jh=Gh,Kh=Gh.range,$h=F_(function(e){e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t)},function(e,t){return t.getUTCFullYear()-e.getUTCFullYear()},function(e){return e.getUTCFullYear()});$h.every=function(e){return isFinite(e=Math.floor(e))&&e>0?F_(function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)}):null};var Qh=$h,Xh=$h.range;function Zh(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function ep(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function tp(e){return{y:e,m:0,d:1,H:0,M:0,S:0,L:0}}function np(e){var t=e.dateTime,n=e.date,r=e.time,o=e.periods,a=e.days,i=e.shortDays,s=e.months,u=e.shortMonths,l=_p(o),d=hp(o),c=_p(a),f=hp(a),m=_p(i),_=hp(i),h=_p(s),p=hp(s),y=_p(u),g=hp(u),v={a:function(e){return i[e.getDay()]},A:function(e){return a[e.getDay()]},b:function(e){return u[e.getMonth()]},B:function(e){return s[e.getMonth()]},c:null,d:Pp,e:Pp,f:zp,H:Np,I:Ap,j:Fp,L:Ip,m:Rp,M:Wp,p:function(e){return o[+(e.getHours()>=12)]},Q:py,s:yy,S:Up,u:Bp,U:Vp,V:qp,w:Gp,W:Jp,x:null,X:null,y:Kp,Y:$p,Z:Qp,"%":hy},M={a:function(e){return i[e.getUTCDay()]},A:function(e){return a[e.getUTCDay()]},b:function(e){return u[e.getUTCMonth()]},B:function(e){return s[e.getUTCMonth()]},c:null,d:Xp,e:Xp,f:ry,H:Zp,I:ey,j:ty,L:ny,m:oy,M:ay,p:function(e){return o[+(e.getUTCHours()>=12)]},Q:py,s:yy,S:iy,u:sy,U:uy,V:ly,w:dy,W:cy,x:null,X:null,y:fy,Y:my,Z:_y,"%":hy},b={a:function(e,t,n){var r=m.exec(t.slice(n));return r?(e.w=_[r[0].toLowerCase()],n+r[0].length):-1},A:function(e,t,n){var r=c.exec(t.slice(n));return r?(e.w=f[r[0].toLowerCase()],n+r[0].length):-1},b:function(e,t,n){var r=y.exec(t.slice(n));return r?(e.m=g[r[0].toLowerCase()],n+r[0].length):-1},B:function(e,t,n){var r=h.exec(t.slice(n));return r?(e.m=p[r[0].toLowerCase()],n+r[0].length):-1},c:function(e,n,r){return k(e,t,n,r)},d:Yp,e:Yp,f:Ep,H:xp,I:xp,j:Tp,L:Sp,m:kp,M:Dp,p:function(e,t,n){var r=l.exec(t.slice(n));return r?(e.p=d[r[0].toLowerCase()],n+r[0].length):-1},Q:Hp,s:Op,S:jp,u:yp,U:gp,V:vp,w:pp,W:Mp,x:function(e,t,r){return k(e,n,t,r)},X:function(e,t,n){return k(e,r,t,n)},y:Lp,Y:bp,Z:wp,"%":Cp};function L(e,t){return function(n){var r,o,a,i=[],s=-1,u=0,l=e.length;for(n instanceof Date||(n=new Date(+n));++s<l;)37===e.charCodeAt(s)&&(i.push(e.slice(u,s)),null!=(o=up[r=e.charAt(++s)])?r=e.charAt(++s):o="e"===r?" ":"0",(a=t[r])&&(r=a(n,o)),i.push(r),u=s+1);return i.push(e.slice(u,s)),i.join("")}}function w(e,t){return function(n){var r,o,a=tp(1900);if(k(a,e,n+="",0)!=n.length)return null;if("Q"in a)return new Date(a.Q);if("p"in a&&(a.H=a.H%12+12*a.p),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(r=(o=(r=ep(tp(a.y))).getUTCDay())>4||0===o?Oh.ceil(r):Oh(r),r=Sh.offset(r,7*(a.V-1)),a.y=r.getUTCFullYear(),a.m=r.getUTCMonth(),a.d=r.getUTCDate()+(a.w+6)%7):(r=(o=(r=t(tp(a.y))).getDay())>4||0===o?oh.ceil(r):oh(r),r=eh.offset(r,7*(a.V-1)),a.y=r.getFullYear(),a.m=r.getMonth(),a.d=r.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),o="Z"in a?ep(tp(a.y)).getUTCDay():t(tp(a.y)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(o+5)%7:a.w+7*a.U-(o+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,ep(a)):t(a)}}function k(e,t,n,r){for(var o,a,i=0,s=t.length,u=n.length;i<s;){if(r>=u)return-1;if(37===(o=t.charCodeAt(i++))){if(o=t.charAt(i++),!(a=b[o in up?t.charAt(i++):o])||(r=a(e,n,r))<0)return-1}else if(o!=n.charCodeAt(r++))return-1}return r}return v.x=L(n,v),v.X=L(r,v),v.c=L(t,v),M.x=L(n,M),M.X=L(r,M),M.c=L(t,M),{format:function(e){var t=L(e+="",v);return t.toString=function(){return e},t},parse:function(e){var t=w(e+="",Zh);return t.toString=function(){return e},t},utcFormat:function(e){var t=L(e+="",M);return t.toString=function(){return e},t},utcParse:function(e){var t=w(e,ep);return t.toString=function(){return e},t}}}var rp,op,ap,ip,sp,up={"-":"",_:" ",0:"0"},lp=/^\s*\d+/,dp=/^%/,cp=/[\\^$*+?|[\]().{}]/g;function fp(e,t,n){var r=e<0?"-":"",o=(r?-e:e)+"",a=o.length;return r+(a<n?new Array(n-a+1).join(t)+o:o)}function mp(e){return e.replace(cp,"\\$&")}function _p(e){return new RegExp("^(?:"+e.map(mp).join("|")+")","i")}function hp(e){for(var t={},n=-1,r=e.length;++n<r;)t[e[n].toLowerCase()]=n;return t}function pp(e,t,n){var r=lp.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function yp(e,t,n){var r=lp.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function gp(e,t,n){var r=lp.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function vp(e,t,n){var r=lp.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function Mp(e,t,n){var r=lp.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function bp(e,t,n){var r=lp.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function Lp(e,t,n){var r=lp.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function wp(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function kp(e,t,n){var r=lp.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function Yp(e,t,n){var r=lp.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function Tp(e,t,n){var r=lp.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function xp(e,t,n){var r=lp.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function Dp(e,t,n){var r=lp.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function jp(e,t,n){var r=lp.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function Sp(e,t,n){var r=lp.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function Ep(e,t,n){var r=lp.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Cp(e,t,n){var r=dp.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function Hp(e,t,n){var r=lp.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function Op(e,t,n){var r=lp.exec(t.slice(n));return r?(e.Q=1e3*+r[0],n+r[0].length):-1}function Pp(e,t){return fp(e.getDate(),t,2)}function Np(e,t){return fp(e.getHours(),t,2)}function Ap(e,t){return fp(e.getHours()%12||12,t,2)}function Fp(e,t){return fp(1+eh.count(bh(e),e),t,3)}function Ip(e,t){return fp(e.getMilliseconds(),t,3)}function zp(e,t){return Ip(e,t)+"000"}function Rp(e,t){return fp(e.getMonth()+1,t,2)}function Wp(e,t){return fp(e.getMinutes(),t,2)}function Up(e,t){return fp(e.getSeconds(),t,2)}function Bp(e){var t=e.getDay();return 0===t?7:t}function Vp(e,t){return fp(rh.count(bh(e),e),t,2)}function qp(e,t){var n=e.getDay();return e=n>=4||0===n?sh(e):sh.ceil(e),fp(sh.count(bh(e),e)+(4===bh(e).getDay()),t,2)}function Gp(e){return e.getDay()}function Jp(e,t){return fp(oh.count(bh(e),e),t,2)}function Kp(e,t){return fp(e.getFullYear()%100,t,2)}function $p(e,t){return fp(e.getFullYear()%1e4,t,4)}function Qp(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+fp(t/60|0,"0",2)+fp(t%60,"0",2)}function Xp(e,t){return fp(e.getUTCDate(),t,2)}function Zp(e,t){return fp(e.getUTCHours(),t,2)}function ey(e,t){return fp(e.getUTCHours()%12||12,t,2)}function ty(e,t){return fp(1+Sh.count(Qh(e),e),t,3)}function ny(e,t){return fp(e.getUTCMilliseconds(),t,3)}function ry(e,t){return ny(e,t)+"000"}function oy(e,t){return fp(e.getUTCMonth()+1,t,2)}function ay(e,t){return fp(e.getUTCMinutes(),t,2)}function iy(e,t){return fp(e.getUTCSeconds(),t,2)}function sy(e){var t=e.getUTCDay();return 0===t?7:t}function uy(e,t){return fp(Hh.count(Qh(e),e),t,2)}function ly(e,t){var n=e.getUTCDay();return e=n>=4||0===n?Ah(e):Ah.ceil(e),fp(Ah.count(Qh(e),e)+(4===Qh(e).getUTCDay()),t,2)}function dy(e){return e.getUTCDay()}function cy(e,t){return fp(Oh.count(Qh(e),e),t,2)}function fy(e,t){return fp(e.getUTCFullYear()%100,t,2)}function my(e,t){return fp(e.getUTCFullYear()%1e4,t,4)}function _y(){return"+0000"}function hy(){return"%"}function py(e){return+e}function yy(e){return Math.floor(+e/1e3)}function gy(e){return rp=np(e),op=rp.format,ap=rp.parse,ip=rp.utcFormat,sp=rp.utcParse,rp}gy({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var vy=Date.prototype.toISOString?function(e){return e.toISOString()}:ip("%Y-%m-%dT%H:%M:%S.%LZ");var My=+new Date("2000-01-01T00:00:00.000Z")?function(e){var t=new Date(e);return isNaN(t)?null:t}:sp("%Y-%m-%dT%H:%M:%S.%LZ"),by=1e3,Ly=60*by,wy=60*Ly,ky=24*wy,Yy=7*ky,Ty=30*ky,xy=365*ky;function Dy(e){return new Date(e)}function jy(e){return e instanceof Date?+e:+new Date(+e)}function Sy(e,t,n,r,a,i,s,u,l){var d=y_(m_,Rn),c=d.invert,f=d.domain,m=l(".%L"),_=l(":%S"),h=l("%I:%M"),p=l("%I %p"),y=l("%a %d"),g=l("%b %d"),v=l("%B"),M=l("%Y"),b=[[s,1,by],[s,5,5*by],[s,15,15*by],[s,30,30*by],[i,1,Ly],[i,5,5*Ly],[i,15,15*Ly],[i,30,30*Ly],[a,1,wy],[a,3,3*wy],[a,6,6*wy],[a,12,12*wy],[r,1,ky],[r,2,2*ky],[n,1,Yy],[t,1,Ty],[t,3,3*Ty],[e,1,xy]];function L(o){return(s(o)<o?m:i(o)<o?_:a(o)<o?h:r(o)<o?p:t(o)<o?n(o)<o?y:g:e(o)<o?v:M)(o)}function w(t,n,r,a){if(null==t&&(t=10),"number"==typeof t){var i=Math.abs(r-n)/t,s=o(function(e){return e[2]}).right(b,i);s===b.length?(a=D(n/xy,r/xy,t),t=e):s?(a=(s=b[i/b[s-1][2]<b[s][2]/i?s-1:s])[1],t=s[0]):(a=Math.max(D(n,r,t),1),t=u)}return null==a?t:t.every(a)}return d.invert=function(e){return new Date(c(e))},d.domain=function(e){return arguments.length?f(o_.call(e,jy)):f().map(Dy)},d.ticks=function(e,t){var n,r=f(),o=r[0],a=r[r.length-1],i=a<o;return i&&(n=o,o=a,a=n),n=(n=w(e,o,a,t))?n.range(o,a+1):[],i?n.reverse():n},d.tickFormat=function(e,t){return null==t?L:l(t)},d.nice=function(e,t){var n=f();return(e=w(e,n[0],n[n.length-1],t))?f(L_(n,e)):d},d.copy=function(){return p_(d,Sy(e,t,n,r,a,i,s,u,l))},d}var Ey=function(){return Sy(bh,gh,rh,eh,Q_,J_,V_,z_,op).domain([new Date(2e3,0,1),new Date(2e3,0,2)])},Cy=function(){return Sy(Qh,Jh,Hh,Sh,xh,kh,V_,z_,ip).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])};function Hy(e){var t=0,n=1,r=!1;function o(o){var a=(o-t)/(n-t);return e(r?Math.max(0,Math.min(1,a)):a)}return o.domain=function(e){return arguments.length?(t=+e[0],n=+e[1],o):[t,n]},o.clamp=function(e){return arguments.length?(r=!!e,o):r},o.interpolator=function(t){return arguments.length?(e=t,o):e},o.copy=function(){return Hy(e).domain([t,n]).clamp(r)},v_(o)}var Oy=function(e){for(var t=e.length/6|0,n=new Array(t),r=0;r<t;)n[r]="#"+e.slice(6*r,6*++r);return n},Py=Oy("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Ny=Oy("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Ay=Oy("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Fy=Oy("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Iy=Oy("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),zy=Oy("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Ry=Oy("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Wy=Oy("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Uy=Oy("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),By=function(e){return An(e[e.length-1])},Vy=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Oy),qy=By(Vy),Gy=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Oy),Jy=By(Gy),Ky=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Oy),$y=By(Ky),Qy=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Oy),Xy=By(Qy),Zy=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Oy),eg=By(Zy),tg=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Oy),ng=By(tg),rg=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Oy),og=By(rg),ag=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Oy),ig=By(ag),sg=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Oy),ug=By(sg),lg=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Oy),dg=By(lg),cg=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Oy),fg=By(cg),mg=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Oy),_g=By(mg),hg=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Oy),pg=By(hg),yg=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Oy),gg=By(yg),vg=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Oy),Mg=By(vg),bg=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Oy),Lg=By(bg),wg=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Oy),kg=By(wg),Yg=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Oy),Tg=By(Yg),xg=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Oy),Dg=By(xg),jg=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Oy),Sg=By(jg),Eg=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Oy),Cg=By(Eg),Hg=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Oy),Og=By(Hg),Pg=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Oy),Ng=By(Pg),Ag=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Oy),Fg=By(Ag),Ig=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Oy),zg=By(Ig),Rg=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Oy),Wg=By(Rg),Ug=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Oy),Bg=By(Ug),Vg=gr(Yn(300,.5,0),Yn(-240,.5,1)),qg=gr(Yn(-100,.75,.35),Yn(80,1.5,.8)),Gg=gr(Yn(260,.75,.35),Yn(80,1.5,.8)),Jg=Yn(),Kg=function(e){(e<0||e>1)&&(e-=Math.floor(e));var t=Math.abs(e-.5);return Jg.h=360*e-100,Jg.s=1.5-1.5*t,Jg.l=.8-.9*t,Jg+""};function $g(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}var Qg=$g(Oy("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Xg=$g(Oy("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Zg=$g(Oy("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),ev=$g(Oy("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),tv=function(e){return function(){return e}},nv=Math.abs,rv=Math.atan2,ov=Math.cos,av=Math.max,iv=Math.min,sv=Math.sin,uv=Math.sqrt,lv=1e-12,dv=Math.PI,cv=dv/2,fv=2*dv;function mv(e){return e>=1?cv:e<=-1?-cv:Math.asin(e)}function _v(e){return e.innerRadius}function hv(e){return e.outerRadius}function pv(e){return e.startAngle}function yv(e){return e.endAngle}function gv(e){return e&&e.padAngle}function vv(e,t,n,r,o,a,i){var s=e-n,u=t-r,l=(i?a:-a)/uv(s*s+u*u),d=l*u,c=-l*s,f=e+d,m=t+c,_=n+d,h=r+c,p=(f+_)/2,y=(m+h)/2,g=_-f,v=h-m,M=g*g+v*v,b=o-a,L=f*h-_*m,w=(v<0?-1:1)*uv(av(0,b*b*M-L*L)),k=(L*v-g*w)/M,Y=(-L*g-v*w)/M,T=(L*v+g*w)/M,x=(-L*g+v*w)/M,D=k-p,j=Y-y,S=T-p,E=x-y;return D*D+j*j>S*S+E*E&&(k=T,Y=x),{cx:k,cy:Y,x01:-d,y01:-c,x11:k*(o/b-1),y11:Y*(o/b-1)}}var Mv=function(){var e=_v,t=hv,n=tv(0),r=null,o=pv,a=yv,i=gv,s=null;function u(){var u,l,d,c=+e.apply(this,arguments),f=+t.apply(this,arguments),m=o.apply(this,arguments)-cv,_=a.apply(this,arguments)-cv,h=nv(_-m),p=_>m;if(s||(s=u=Ia()),f<c&&(l=f,f=c,c=l),f>lv)if(h>fv-lv)s.moveTo(f*ov(m),f*sv(m)),s.arc(0,0,f,m,_,!p),c>lv&&(s.moveTo(c*ov(_),c*sv(_)),s.arc(0,0,c,_,m,p));else{var y,g,v=m,M=_,b=m,L=_,w=h,k=h,Y=i.apply(this,arguments)/2,T=Y>lv&&(r?+r.apply(this,arguments):uv(c*c+f*f)),x=iv(nv(f-c)/2,+n.apply(this,arguments)),D=x,j=x;if(T>lv){var S=mv(T/c*sv(Y)),E=mv(T/f*sv(Y));(w-=2*S)>lv?(b+=S*=p?1:-1,L-=S):(w=0,b=L=(m+_)/2),(k-=2*E)>lv?(v+=E*=p?1:-1,M-=E):(k=0,v=M=(m+_)/2)}var C=f*ov(v),H=f*sv(v),O=c*ov(L),P=c*sv(L);if(x>lv){var N=f*ov(M),A=f*sv(M),F=c*ov(b),I=c*sv(b);if(h<dv){var z=w>lv?function(e,t,n,r,o,a,i,s){var u=n-e,l=r-t,d=i-o,c=s-a,f=(d*(t-a)-c*(e-o))/(c*u-d*l);return[e+f*u,t+f*l]}(C,H,F,I,N,A,O,P):[O,P],R=C-z[0],W=H-z[1],U=N-z[0],B=A-z[1],V=1/sv(((d=(R*U+W*B)/(uv(R*R+W*W)*uv(U*U+B*B)))>1?0:d<-1?dv:Math.acos(d))/2),q=uv(z[0]*z[0]+z[1]*z[1]);D=iv(x,(c-q)/(V-1)),j=iv(x,(f-q)/(V+1))}}k>lv?j>lv?(y=vv(F,I,C,H,f,j,p),g=vv(N,A,O,P,f,j,p),s.moveTo(y.cx+y.x01,y.cy+y.y01),j<x?s.arc(y.cx,y.cy,j,rv(y.y01,y.x01),rv(g.y01,g.x01),!p):(s.arc(y.cx,y.cy,j,rv(y.y01,y.x01),rv(y.y11,y.x11),!p),s.arc(0,0,f,rv(y.cy+y.y11,y.cx+y.x11),rv(g.cy+g.y11,g.cx+g.x11),!p),s.arc(g.cx,g.cy,j,rv(g.y11,g.x11),rv(g.y01,g.x01),!p))):(s.moveTo(C,H),s.arc(0,0,f,v,M,!p)):s.moveTo(C,H),c>lv&&w>lv?D>lv?(y=vv(O,P,N,A,c,-D,p),g=vv(C,H,F,I,c,-D,p),s.lineTo(y.cx+y.x01,y.cy+y.y01),D<x?s.arc(y.cx,y.cy,D,rv(y.y01,y.x01),rv(g.y01,g.x01),!p):(s.arc(y.cx,y.cy,D,rv(y.y01,y.x01),rv(y.y11,y.x11),!p),s.arc(0,0,c,rv(y.cy+y.y11,y.cx+y.x11),rv(g.cy+g.y11,g.cx+g.x11),p),s.arc(g.cx,g.cy,D,rv(g.y11,g.x11),rv(g.y01,g.x01),!p))):s.arc(0,0,c,L,b,p):s.lineTo(O,P)}else s.moveTo(0,0);if(s.closePath(),u)return s=null,u+""||null}return u.centroid=function(){var n=(+e.apply(this,arguments)+ +t.apply(this,arguments))/2,r=(+o.apply(this,arguments)+ +a.apply(this,arguments))/2-dv/2;return[ov(r)*n,sv(r)*n]},u.innerRadius=function(t){return arguments.length?(e="function"==typeof t?t:tv(+t),u):e},u.outerRadius=function(e){return arguments.length?(t="function"==typeof e?e:tv(+e),u):t},u.cornerRadius=function(e){return arguments.length?(n="function"==typeof e?e:tv(+e),u):n},u.padRadius=function(e){return arguments.length?(r=null==e?null:"function"==typeof e?e:tv(+e),u):r},u.startAngle=function(e){return arguments.length?(o="function"==typeof e?e:tv(+e),u):o},u.endAngle=function(e){return arguments.length?(a="function"==typeof e?e:tv(+e),u):a},u.padAngle=function(e){return arguments.length?(i="function"==typeof e?e:tv(+e),u):i},u.context=function(e){return arguments.length?(s=null==e?null:e,u):s},u};function bv(e){this._context=e}bv.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t)}}};var Lv=function(e){return new bv(e)};function wv(e){return e[0]}function kv(e){return e[1]}var Yv=function(){var e=wv,t=kv,n=tv(!0),r=null,o=Lv,a=null;function i(i){var s,u,l,d=i.length,c=!1;for(null==r&&(a=o(l=Ia())),s=0;s<=d;++s)!(s<d&&n(u=i[s],s,i))===c&&((c=!c)?a.lineStart():a.lineEnd()),c&&a.point(+e(u,s,i),+t(u,s,i));if(l)return a=null,l+""||null}return i.x=function(t){return arguments.length?(e="function"==typeof t?t:tv(+t),i):e},i.y=function(e){return arguments.length?(t="function"==typeof e?e:tv(+e),i):t},i.defined=function(e){return arguments.length?(n="function"==typeof e?e:tv(!!e),i):n},i.curve=function(e){return arguments.length?(o=e,null!=r&&(a=o(r)),i):o},i.context=function(e){return arguments.length?(null==e?r=a=null:a=o(r=e),i):r},i},Tv=function(){var e=wv,t=null,n=tv(0),r=kv,o=tv(!0),a=null,i=Lv,s=null;function u(u){var l,d,c,f,m,_=u.length,h=!1,p=new Array(_),y=new Array(_);for(null==a&&(s=i(m=Ia())),l=0;l<=_;++l){if(!(l<_&&o(f=u[l],l,u))===h)if(h=!h)d=l,s.areaStart(),s.lineStart();else{for(s.lineEnd(),s.lineStart(),c=l-1;c>=d;--c)s.point(p[c],y[c]);s.lineEnd(),s.areaEnd()}h&&(p[l]=+e(f,l,u),y[l]=+n(f,l,u),s.point(t?+t(f,l,u):p[l],r?+r(f,l,u):y[l]))}if(m)return s=null,m+""||null}function l(){return Yv().defined(o).curve(i).context(a)}return u.x=function(n){return arguments.length?(e="function"==typeof n?n:tv(+n),t=null,u):e},u.x0=function(t){return arguments.length?(e="function"==typeof t?t:tv(+t),u):e},u.x1=function(e){return arguments.length?(t=null==e?null:"function"==typeof e?e:tv(+e),u):t},u.y=function(e){return arguments.length?(n="function"==typeof e?e:tv(+e),r=null,u):n},u.y0=function(e){return arguments.length?(n="function"==typeof e?e:tv(+e),u):n},u.y1=function(e){return arguments.length?(r=null==e?null:"function"==typeof e?e:tv(+e),u):r},u.lineX0=u.lineY0=function(){return l().x(e).y(n)},u.lineY1=function(){return l().x(e).y(r)},u.lineX1=function(){return l().x(t).y(n)},u.defined=function(e){return arguments.length?(o="function"==typeof e?e:tv(!!e),u):o},u.curve=function(e){return arguments.length?(i=e,null!=a&&(s=i(a)),u):i},u.context=function(e){return arguments.length?(null==e?a=s=null:s=i(a=e),u):a},u},xv=function(e,t){return t<e?-1:t>e?1:t>=e?0:NaN},Dv=function(e){return e},jv=function(){var e=Dv,t=xv,n=null,r=tv(0),o=tv(fv),a=tv(0);function i(i){var s,u,l,d,c,f=i.length,m=0,_=new Array(f),h=new Array(f),p=+r.apply(this,arguments),y=Math.min(fv,Math.max(-fv,o.apply(this,arguments)-p)),g=Math.min(Math.abs(y)/f,a.apply(this,arguments)),v=g*(y<0?-1:1);for(s=0;s<f;++s)(c=h[_[s]=s]=+e(i[s],s,i))>0&&(m+=c);for(null!=t?_.sort(function(e,n){return t(h[e],h[n])}):null!=n&&_.sort(function(e,t){return n(i[e],i[t])}),s=0,l=m?(y-f*v)/m:0;s<f;++s,p=d)u=_[s],d=p+((c=h[u])>0?c*l:0)+v,h[u]={data:i[u],index:s,value:c,startAngle:p,endAngle:d,padAngle:g};return h}return i.value=function(t){return arguments.length?(e="function"==typeof t?t:tv(+t),i):e},i.sortValues=function(e){return arguments.length?(t=e,n=null,i):t},i.sort=function(e){return arguments.length?(n=e,t=null,i):n},i.startAngle=function(e){return arguments.length?(r="function"==typeof e?e:tv(+e),i):r},i.endAngle=function(e){return arguments.length?(o="function"==typeof e?e:tv(+e),i):o},i.padAngle=function(e){return arguments.length?(a="function"==typeof e?e:tv(+e),i):a},i},Sv=Cv(Lv);function Ev(e){this._curve=e}function Cv(e){function t(t){return new Ev(e(t))}return t._curve=e,t}function Hv(e){var t=e.curve;return e.angle=e.x,delete e.x,e.radius=e.y,delete e.y,e.curve=function(e){return arguments.length?t(Cv(e)):t()._curve},e}Ev.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(e,t){this._curve.point(t*Math.sin(e),t*-Math.cos(e))}};var Ov=function(){return Hv(Yv().curve(Sv))},Pv=function(){var e=Tv().curve(Sv),t=e.curve,n=e.lineX0,r=e.lineX1,o=e.lineY0,a=e.lineY1;return e.angle=e.x,delete e.x,e.startAngle=e.x0,delete e.x0,e.endAngle=e.x1,delete e.x1,e.radius=e.y,delete e.y,e.innerRadius=e.y0,delete e.y0,e.outerRadius=e.y1,delete e.y1,e.lineStartAngle=function(){return Hv(n())},delete e.lineX0,e.lineEndAngle=function(){return Hv(r())},delete e.lineX1,e.lineInnerRadius=function(){return Hv(o())},delete e.lineY0,e.lineOuterRadius=function(){return Hv(a())},delete e.lineY1,e.curve=function(e){return arguments.length?t(Cv(e)):t()._curve},e},Nv=function(e,t){return[(t=+t)*Math.cos(e-=Math.PI/2),t*Math.sin(e)]},Av=Array.prototype.slice;function Fv(e){return e.source}function Iv(e){return e.target}function zv(e){var t=Fv,n=Iv,r=wv,o=kv,a=null;function i(){var i,s=Av.call(arguments),u=t.apply(this,s),l=n.apply(this,s);if(a||(a=i=Ia()),e(a,+r.apply(this,(s[0]=u,s)),+o.apply(this,s),+r.apply(this,(s[0]=l,s)),+o.apply(this,s)),i)return a=null,i+""||null}return i.source=function(e){return arguments.length?(t=e,i):t},i.target=function(e){return arguments.length?(n=e,i):n},i.x=function(e){return arguments.length?(r="function"==typeof e?e:tv(+e),i):r},i.y=function(e){return arguments.length?(o="function"==typeof e?e:tv(+e),i):o},i.context=function(e){return arguments.length?(a=null==e?null:e,i):a},i}function Rv(e,t,n,r,o){e.moveTo(t,n),e.bezierCurveTo(t=(t+r)/2,n,t,o,r,o)}function Wv(e,t,n,r,o){e.moveTo(t,n),e.bezierCurveTo(t,n=(n+o)/2,r,n,r,o)}function Uv(e,t,n,r,o){var a=Nv(t,n),i=Nv(t,n=(n+o)/2),s=Nv(r,n),u=Nv(r,o);e.moveTo(a[0],a[1]),e.bezierCurveTo(i[0],i[1],s[0],s[1],u[0],u[1])}function Bv(){return zv(Rv)}function Vv(){return zv(Wv)}function qv(){var e=zv(Uv);return e.angle=e.x,delete e.x,e.radius=e.y,delete e.y,e}var Gv={draw:function(e,t){var n=Math.sqrt(t/dv);e.moveTo(n,0),e.arc(0,0,n,0,fv)}},Jv={draw:function(e,t){var n=Math.sqrt(t/5)/2;e.moveTo(-3*n,-n),e.lineTo(-n,-n),e.lineTo(-n,-3*n),e.lineTo(n,-3*n),e.lineTo(n,-n),e.lineTo(3*n,-n),e.lineTo(3*n,n),e.lineTo(n,n),e.lineTo(n,3*n),e.lineTo(-n,3*n),e.lineTo(-n,n),e.lineTo(-3*n,n),e.closePath()}},Kv=Math.sqrt(1/3),$v=2*Kv,Qv={draw:function(e,t){var n=Math.sqrt(t/$v),r=n*Kv;e.moveTo(0,-n),e.lineTo(r,0),e.lineTo(0,n),e.lineTo(-r,0),e.closePath()}},Xv=Math.sin(dv/10)/Math.sin(7*dv/10),Zv=Math.sin(fv/10)*Xv,eM=-Math.cos(fv/10)*Xv,tM={draw:function(e,t){var n=Math.sqrt(.8908130915292852*t),r=Zv*n,o=eM*n;e.moveTo(0,-n),e.lineTo(r,o);for(var a=1;a<5;++a){var i=fv*a/5,s=Math.cos(i),u=Math.sin(i);e.lineTo(u*n,-s*n),e.lineTo(s*r-u*o,u*r+s*o)}e.closePath()}},nM={draw:function(e,t){var n=Math.sqrt(t),r=-n/2;e.rect(r,r,n,n)}},rM=Math.sqrt(3),oM={draw:function(e,t){var n=-Math.sqrt(t/(3*rM));e.moveTo(0,2*n),e.lineTo(-rM*n,-n),e.lineTo(rM*n,-n),e.closePath()}},aM=Math.sqrt(3)/2,iM=1/Math.sqrt(12),sM=3*(iM/2+1),uM={draw:function(e,t){var n=Math.sqrt(t/sM),r=n/2,o=n*iM,a=r,i=n*iM+n,s=-a,u=i;e.moveTo(r,o),e.lineTo(a,i),e.lineTo(s,u),e.lineTo(-.5*r-aM*o,aM*r+-.5*o),e.lineTo(-.5*a-aM*i,aM*a+-.5*i),e.lineTo(-.5*s-aM*u,aM*s+-.5*u),e.lineTo(-.5*r+aM*o,-.5*o-aM*r),e.lineTo(-.5*a+aM*i,-.5*i-aM*a),e.lineTo(-.5*s+aM*u,-.5*u-aM*s),e.closePath()}},lM=[Gv,Jv,Qv,nM,tM,oM,uM],dM=function(){var e=tv(Gv),t=tv(64),n=null;function r(){var r;if(n||(n=r=Ia()),e.apply(this,arguments).draw(n,+t.apply(this,arguments)),r)return n=null,r+""||null}return r.type=function(t){return arguments.length?(e="function"==typeof t?t:tv(t),r):e},r.size=function(e){return arguments.length?(t="function"==typeof e?e:tv(+e),r):t},r.context=function(e){return arguments.length?(n=null==e?null:e,r):n},r},cM=function(){};function fM(e,t,n){e._context.bezierCurveTo((2*e._x0+e._x1)/3,(2*e._y0+e._y1)/3,(e._x0+2*e._x1)/3,(e._y0+2*e._y1)/3,(e._x0+4*e._x1+t)/6,(e._y0+4*e._y1+n)/6)}function mM(e){this._context=e}mM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:fM(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:fM(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};var _M=function(e){return new mM(e)};function hM(e){this._context=e}hM.prototype={areaStart:cM,areaEnd:cM,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x2=e,this._y2=t;break;case 1:this._point=2,this._x3=e,this._y3=t;break;case 2:this._point=3,this._x4=e,this._y4=t,this._context.moveTo((this._x0+4*this._x1+e)/6,(this._y0+4*this._y1+t)/6);break;default:fM(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};var pM=function(e){return new hM(e)};function yM(e){this._context=e}yM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+e)/6,r=(this._y0+4*this._y1+t)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:fM(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};var gM=function(e){return new yM(e)};function vM(e,t){this._basis=new mM(e),this._beta=t}vM.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var e=this._x,t=this._y,n=e.length-1;if(n>0)for(var r,o=e[0],a=t[0],i=e[n]-o,s=t[n]-a,u=-1;++u<=n;)r=u/n,this._basis.point(this._beta*e[u]+(1-this._beta)*(o+r*i),this._beta*t[u]+(1-this._beta)*(a+r*s));this._x=this._y=null,this._basis.lineEnd()},point:function(e,t){this._x.push(+e),this._y.push(+t)}};var MM=function e(t){function n(e){return 1===t?new mM(e):new vM(e,t)}return n.beta=function(t){return e(+t)},n}(.85);function bM(e,t,n){e._context.bezierCurveTo(e._x1+e._k*(e._x2-e._x0),e._y1+e._k*(e._y2-e._y0),e._x2+e._k*(e._x1-t),e._y2+e._k*(e._y1-n),e._x2,e._y2)}function LM(e,t){this._context=e,this._k=(1-t)/6}LM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:bM(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2,this._x1=e,this._y1=t;break;case 2:this._point=3;default:bM(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var wM=function e(t){function n(e){return new LM(e,t)}return n.tension=function(t){return e(+t)},n}(0);function kM(e,t){this._context=e,this._k=(1-t)/6}kM.prototype={areaStart:cM,areaEnd:cM,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:bM(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var YM=function e(t){function n(e){return new kM(e,t)}return n.tension=function(t){return e(+t)},n}(0);function TM(e,t){this._context=e,this._k=(1-t)/6}TM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:bM(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var xM=function e(t){function n(e){return new TM(e,t)}return n.tension=function(t){return e(+t)},n}(0);function DM(e,t,n){var r=e._x1,o=e._y1,a=e._x2,i=e._y2;if(e._l01_a>lv){var s=2*e._l01_2a+3*e._l01_a*e._l12_a+e._l12_2a,u=3*e._l01_a*(e._l01_a+e._l12_a);r=(r*s-e._x0*e._l12_2a+e._x2*e._l01_2a)/u,o=(o*s-e._y0*e._l12_2a+e._y2*e._l01_2a)/u}if(e._l23_a>lv){var l=2*e._l23_2a+3*e._l23_a*e._l12_a+e._l12_2a,d=3*e._l23_a*(e._l23_a+e._l12_a);a=(a*l+e._x1*e._l23_2a-t*e._l12_2a)/d,i=(i*l+e._y1*e._l23_2a-n*e._l12_2a)/d}e._context.bezierCurveTo(r,o,a,i,e._x2,e._y2)}function jM(e,t){this._context=e,this._alpha=t}jM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3;default:DM(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var SM=function e(t){function n(e){return t?new jM(e,t):new LM(e,0)}return n.alpha=function(t){return e(+t)},n}(.5);function EM(e,t){this._context=e,this._alpha=t}EM.prototype={areaStart:cM,areaEnd:cM,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:DM(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var CM=function e(t){function n(e){return t?new EM(e,t):new kM(e,0)}return n.alpha=function(t){return e(+t)},n}(.5);function HM(e,t){this._context=e,this._alpha=t}HM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:DM(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var OM=function e(t){function n(e){return t?new HM(e,t):new TM(e,0)}return n.alpha=function(t){return e(+t)},n}(.5);function PM(e){this._context=e}PM.prototype={areaStart:cM,areaEnd:cM,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(e,t){e=+e,t=+t,this._point?this._context.lineTo(e,t):(this._point=1,this._context.moveTo(e,t))}};var NM=function(e){return new PM(e)};function AM(e){return e<0?-1:1}function FM(e,t,n){var r=e._x1-e._x0,o=t-e._x1,a=(e._y1-e._y0)/(r||o<0&&-0),i=(n-e._y1)/(o||r<0&&-0),s=(a*o+i*r)/(r+o);return(AM(a)+AM(i))*Math.min(Math.abs(a),Math.abs(i),.5*Math.abs(s))||0}function IM(e,t){var n=e._x1-e._x0;return n?(3*(e._y1-e._y0)/n-t)/2:t}function zM(e,t,n){var r=e._x0,o=e._y0,a=e._x1,i=e._y1,s=(a-r)/3;e._context.bezierCurveTo(r+s,o+s*t,a-s,i-s*n,a,i)}function RM(e){this._context=e}function WM(e){this._context=new UM(e)}function UM(e){this._context=e}function BM(e){return new RM(e)}function VM(e){return new WM(e)}function qM(e){this._context=e}function GM(e){var t,n,r=e.length-1,o=new Array(r),a=new Array(r),i=new Array(r);for(o[0]=0,a[0]=2,i[0]=e[0]+2*e[1],t=1;t<r-1;++t)o[t]=1,a[t]=4,i[t]=4*e[t]+2*e[t+1];for(o[r-1]=2,a[r-1]=7,i[r-1]=8*e[r-1]+e[r],t=1;t<r;++t)n=o[t]/a[t-1],a[t]-=n,i[t]-=n*i[t-1];for(o[r-1]=i[r-1]/a[r-1],t=r-2;t>=0;--t)o[t]=(i[t]-o[t+1])/a[t];for(a[r-1]=(e[r]+o[r-1])/2,t=0;t<r-1;++t)a[t]=2*e[t+1]-o[t+1];return[o,a]}RM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:zM(this,this._t0,IM(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){var n=NaN;if(t=+t,(e=+e)!==this._x1||t!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,zM(this,IM(this,n=FM(this,e,t)),n);break;default:zM(this,this._t0,n=FM(this,e,t))}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=n}}},(WM.prototype=Object.create(RM.prototype)).point=function(e,t){RM.prototype.point.call(this,t,e)},UM.prototype={moveTo:function(e,t){this._context.moveTo(t,e)},closePath:function(){this._context.closePath()},lineTo:function(e,t){this._context.lineTo(t,e)},bezierCurveTo:function(e,t,n,r,o,a){this._context.bezierCurveTo(t,e,r,n,a,o)}},qM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var e=this._x,t=this._y,n=e.length;if(n)if(this._line?this._context.lineTo(e[0],t[0]):this._context.moveTo(e[0],t[0]),2===n)this._context.lineTo(e[1],t[1]);else for(var r=GM(e),o=GM(t),a=0,i=1;i<n;++a,++i)this._context.bezierCurveTo(r[0][a],o[0][a],r[1][a],o[1][a],e[i],t[i]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(e,t){this._x.push(+e),this._y.push(+t)}};var JM=function(e){return new qM(e)};function KM(e,t){this._context=e,this._t=t}KM.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,t),this._context.lineTo(e,t);else{var n=this._x*(1-this._t)+e*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,t)}}this._x=e,this._y=t}};var $M=function(e){return new KM(e,.5)};function QM(e){return new KM(e,0)}function XM(e){return new KM(e,1)}var ZM=function(e,t){if((o=e.length)>1)for(var n,r,o,a=1,i=e[t[0]],s=i.length;a<o;++a)for(r=i,i=e[t[a]],n=0;n<s;++n)i[n][1]+=i[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]},eb=function(e){for(var t=e.length,n=new Array(t);--t>=0;)n[t]=t;return n};function tb(e,t){return e[t]}var nb=function(){var e=tv([]),t=eb,n=ZM,r=tb;function o(o){var a,i,s=e.apply(this,arguments),u=o.length,l=s.length,d=new Array(l);for(a=0;a<l;++a){for(var c,f=s[a],m=d[a]=new Array(u),_=0;_<u;++_)m[_]=c=[0,+r(o[_],f,_,o)],c.data=o[_];m.key=f}for(a=0,i=t(d);a<l;++a)d[i[a]].index=a;return n(d,i),d}return o.keys=function(t){return arguments.length?(e="function"==typeof t?t:tv(Av.call(t)),o):e},o.value=function(e){return arguments.length?(r="function"==typeof e?e:tv(+e),o):r},o.order=function(e){return arguments.length?(t=null==e?eb:"function"==typeof e?e:tv(Av.call(e)),o):t},o.offset=function(e){return arguments.length?(n=null==e?ZM:e,o):n},o},rb=function(e,t){if((r=e.length)>0){for(var n,r,o,a=0,i=e[0].length;a<i;++a){for(o=n=0;n<r;++n)o+=e[n][a][1]||0;if(o)for(n=0;n<r;++n)e[n][a][1]/=o}ZM(e,t)}},ob=function(e,t){if((s=e.length)>1)for(var n,r,o,a,i,s,u=0,l=e[t[0]].length;u<l;++u)for(a=i=0,n=0;n<s;++n)(o=(r=e[t[n]][u])[1]-r[0])>=0?(r[0]=a,r[1]=a+=o):o<0?(r[1]=i,r[0]=i+=o):r[0]=a},ab=function(e,t){if((n=e.length)>0){for(var n,r=0,o=e[t[0]],a=o.length;r<a;++r){for(var i=0,s=0;i<n;++i)s+=e[i][r][1]||0;o[r][1]+=o[r][0]=-s/2}ZM(e,t)}},ib=function(e,t){if((o=e.length)>0&&(r=(n=e[t[0]]).length)>0){for(var n,r,o,a=0,i=1;i<r;++i){for(var s=0,u=0,l=0;s<o;++s){for(var d=e[t[s]],c=d[i][1]||0,f=(c-(d[i-1][1]||0))/2,m=0;m<s;++m){var _=e[t[m]];f+=(_[i][1]||0)-(_[i-1][1]||0)}u+=c,l+=f*c}n[i-1][1]+=n[i-1][0]=a,u&&(a-=l/u)}n[i-1][1]+=n[i-1][0]=a,ZM(e,t)}},sb=function(e){var t=e.map(ub);return eb(e).sort(function(e,n){return t[e]-t[n]})};function ub(e){for(var t,n=0,r=-1,o=e.length;++r<o;)(t=+e[r][1])&&(n+=t);return n}var lb=function(e){return sb(e).reverse()},db=function(e){var t,n,r=e.length,o=e.map(ub),a=eb(e).sort(function(e,t){return o[t]-o[e]}),i=0,s=0,u=[],l=[];for(t=0;t<r;++t)n=a[t],i<s?(i+=o[n],u.push(n)):(s+=o[n],l.push(n));return l.reverse().concat(u)},cb=function(e){return eb(e).reverse()},fb=function(e){return function(){return e}};function mb(e){return e[0]}function _b(e){return e[1]}function hb(){this._=null}function pb(e){e.U=e.C=e.L=e.R=e.P=e.N=null}function yb(e,t){var n=t,r=t.R,o=n.U;o?o.L===n?o.L=r:o.R=r:e._=r,r.U=o,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function gb(e,t){var n=t,r=t.L,o=n.U;o?o.L===n?o.L=r:o.R=r:e._=r,r.U=o,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function vb(e){for(;e.L;)e=e.L;return e}hb.prototype={constructor:hb,insert:function(e,t){var n,r,o;if(e){if(t.P=e,t.N=e.N,e.N&&(e.N.P=t),e.N=t,e.R){for(e=e.R;e.L;)e=e.L;e.L=t}else e.R=t;n=e}else this._?(e=vb(this._),t.P=null,t.N=e,e.P=e.L=t,n=e):(t.P=t.N=null,this._=t,n=null);for(t.L=t.R=null,t.U=n,t.C=!0,e=t;n&&n.C;)n===(r=n.U).L?(o=r.R)&&o.C?(n.C=o.C=!1,r.C=!0,e=r):(e===n.R&&(yb(this,n),n=(e=n).U),n.C=!1,r.C=!0,gb(this,r)):(o=r.L)&&o.C?(n.C=o.C=!1,r.C=!0,e=r):(e===n.L&&(gb(this,n),n=(e=n).U),n.C=!1,r.C=!0,yb(this,r)),n=e.U;this._.C=!1},remove:function(e){e.N&&(e.N.P=e.P),e.P&&(e.P.N=e.N),e.N=e.P=null;var t,n,r,o=e.U,a=e.L,i=e.R;if(n=a?i?vb(i):a:i,o?o.L===e?o.L=n:o.R=n:this._=n,a&&i?(r=n.C,n.C=e.C,n.L=a,a.U=n,n!==i?(o=n.U,n.U=e.U,e=n.R,o.L=e,n.R=i,i.U=n):(n.U=o,o=n,e=n.R)):(r=e.C,e=n),e&&(e.U=o),!r)if(e&&e.C)e.C=!1;else{do{if(e===this._)break;if(e===o.L){if((t=o.R).C&&(t.C=!1,o.C=!0,yb(this,o),t=o.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,gb(this,t),t=o.R),t.C=o.C,o.C=t.R.C=!1,yb(this,o),e=this._;break}}else if((t=o.L).C&&(t.C=!1,o.C=!0,gb(this,o),t=o.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,yb(this,t),t=o.L),t.C=o.C,o.C=t.L.C=!1,gb(this,o),e=this._;break}t.C=!0,e=o,o=o.U}while(!e.C);e&&(e.C=!1)}}};var Mb=hb;function bb(e,t,n,r){var o=[null,null],a=Ub.push(o)-1;return o.left=e,o.right=t,n&&wb(o,e,t,n),r&&wb(o,t,e,r),Rb[e.index].halfedges.push(a),Rb[t.index].halfedges.push(a),o}function Lb(e,t,n){var r=[t,n];return r.left=e,r}function wb(e,t,n,r){e[0]||e[1]?e.left===n?e[1]=r:e[0]=r:(e[0]=r,e.left=t,e.right=n)}function kb(e,t,n,r,o){var a,i=e[0],s=e[1],u=i[0],l=i[1],d=0,c=1,f=s[0]-u,m=s[1]-l;if(a=t-u,f||!(a>0)){if(a/=f,f<0){if(a<d)return;a<c&&(c=a)}else if(f>0){if(a>c)return;a>d&&(d=a)}if(a=r-u,f||!(a<0)){if(a/=f,f<0){if(a>c)return;a>d&&(d=a)}else if(f>0){if(a<d)return;a<c&&(c=a)}if(a=n-l,m||!(a>0)){if(a/=m,m<0){if(a<d)return;a<c&&(c=a)}else if(m>0){if(a>c)return;a>d&&(d=a)}if(a=o-l,m||!(a<0)){if(a/=m,m<0){if(a>c)return;a>d&&(d=a)}else if(m>0){if(a<d)return;a<c&&(c=a)}return!(d>0||c<1)||(d>0&&(e[0]=[u+d*f,l+d*m]),c<1&&(e[1]=[u+c*f,l+c*m]),!0)}}}}}function Yb(e,t,n,r,o){var a=e[1];if(a)return!0;var i,s,u=e[0],l=e.left,d=e.right,c=l[0],f=l[1],m=d[0],_=d[1],h=(c+m)/2,p=(f+_)/2;if(_===f){if(h<t||h>=r)return;if(c>m){if(u){if(u[1]>=o)return}else u=[h,n];a=[h,o]}else{if(u){if(u[1]<n)return}else u=[h,o];a=[h,n]}}else if(s=p-(i=(c-m)/(_-f))*h,i<-1||i>1)if(c>m){if(u){if(u[1]>=o)return}else u=[(n-s)/i,n];a=[(o-s)/i,o]}else{if(u){if(u[1]<n)return}else u=[(o-s)/i,o];a=[(n-s)/i,n]}else if(f<_){if(u){if(u[0]>=r)return}else u=[t,i*t+s];a=[r,i*r+s]}else{if(u){if(u[0]<t)return}else u=[r,i*r+s];a=[t,i*t+s]}return e[0]=u,e[1]=a,!0}function Tb(e,t){var n=e.site,r=t.left,o=t.right;return n===o&&(o=r,r=n),o?Math.atan2(o[1]-r[1],o[0]-r[0]):(n===r?(r=t[1],o=t[0]):(r=t[0],o=t[1]),Math.atan2(r[0]-o[0],o[1]-r[1]))}function xb(e,t){return t[+(t.left!==e.site)]}function Db(e,t){return t[+(t.left===e.site)]}var jb,Sb=[];function Eb(e){var t=e.P,n=e.N;if(t&&n){var r=t.site,o=e.site,a=n.site;if(r!==a){var i=o[0],s=o[1],u=r[0]-i,l=r[1]-s,d=a[0]-i,c=a[1]-s,f=2*(u*c-l*d);if(!(f>=-Vb)){var m=u*u+l*l,_=d*d+c*c,h=(c*m-l*_)/f,p=(u*_-d*m)/f,y=Sb.pop()||new function(){pb(this),this.x=this.y=this.arc=this.site=this.cy=null};y.arc=e,y.site=o,y.x=h+i,y.y=(y.cy=p+s)+Math.sqrt(h*h+p*p),e.circle=y;for(var g=null,v=Wb._;v;)if(y.y<v.y||y.y===v.y&&y.x<=v.x){if(!v.L){g=v.P;break}v=v.L}else{if(!v.R){g=v;break}v=v.R}Wb.insert(g,y),g||(jb=y)}}}}function Cb(e){var t=e.circle;t&&(t.P||(jb=t.N),Wb.remove(t),Sb.push(t),pb(t),e.circle=null)}var Hb=[];function Ob(e){var t=Hb.pop()||new function(){pb(this),this.edge=this.site=this.circle=null};return t.site=e,t}function Pb(e){Cb(e),zb.remove(e),Hb.push(e),pb(e)}function Nb(e){var t=e.circle,n=t.x,r=t.cy,o=[n,r],a=e.P,i=e.N,s=[e];Pb(e);for(var u=a;u.circle&&Math.abs(n-u.circle.x)<Bb&&Math.abs(r-u.circle.cy)<Bb;)a=u.P,s.unshift(u),Pb(u),u=a;s.unshift(u),Cb(u);for(var l=i;l.circle&&Math.abs(n-l.circle.x)<Bb&&Math.abs(r-l.circle.cy)<Bb;)i=l.N,s.push(l),Pb(l),l=i;s.push(l),Cb(l);var d,c=s.length;for(d=1;d<c;++d)l=s[d],u=s[d-1],wb(l.edge,u.site,l.site,o);u=s[0],(l=s[c-1]).edge=bb(u.site,l.site,null,o),Eb(u),Eb(l)}function Ab(e){for(var t,n,r,o,a=e[0],i=e[1],s=zb._;s;)if((r=Fb(s,i)-a)>Bb)s=s.L;else{if(!((o=a-Ib(s,i))>Bb)){r>-Bb?(t=s.P,n=s):o>-Bb?(t=s,n=s.N):t=n=s;break}if(!s.R){t=s;break}s=s.R}!function(e){Rb[e.index]={site:e,halfedges:[]}}(e);var u=Ob(e);if(zb.insert(t,u),t||n){if(t===n)return Cb(t),n=Ob(t.site),zb.insert(u,n),u.edge=n.edge=bb(t.site,u.site),Eb(t),void Eb(n);if(n){Cb(t),Cb(n);var l=t.site,d=l[0],c=l[1],f=e[0]-d,m=e[1]-c,_=n.site,h=_[0]-d,p=_[1]-c,y=2*(f*p-m*h),g=f*f+m*m,v=h*h+p*p,M=[(p*g-m*v)/y+d,(f*v-h*g)/y+c];wb(n.edge,l,_,M),u.edge=bb(l,e,null,M),n.edge=bb(e,_,null,M),Eb(t),Eb(n)}else u.edge=bb(t.site,u.site)}}function Fb(e,t){var n=e.site,r=n[0],o=n[1],a=o-t;if(!a)return r;var i=e.P;if(!i)return-1/0;var s=(n=i.site)[0],u=n[1],l=u-t;if(!l)return s;var d=s-r,c=1/a-1/l,f=d/l;return c?(-f+Math.sqrt(f*f-2*c*(d*d/(-2*l)-u+l/2+o-a/2)))/c+r:(r+s)/2}function Ib(e,t){var n=e.N;if(n)return Fb(n,t);var r=e.site;return r[1]===t?r[0]:1/0}var zb,Rb,Wb,Ub,Bb=1e-6,Vb=1e-12;function qb(e,t){return t[1]-e[1]||t[0]-e[0]}function Gb(e,t){var n,r,o,a=e.sort(qb).pop();for(Ub=[],Rb=new Array(e.length),zb=new Mb,Wb=new Mb;;)if(o=jb,a&&(!o||a[1]<o.y||a[1]===o.y&&a[0]<o.x))a[0]===n&&a[1]===r||(Ab(a),n=a[0],r=a[1]),a=e.pop();else{if(!o)break;Nb(o.arc)}if(function(){for(var e,t,n,r,o=0,a=Rb.length;o<a;++o)if((e=Rb[o])&&(r=(t=e.halfedges).length)){var i=new Array(r),s=new Array(r);for(n=0;n<r;++n)i[n]=n,s[n]=Tb(e,Ub[t[n]]);for(i.sort(function(e,t){return s[t]-s[e]}),n=0;n<r;++n)s[n]=t[i[n]];for(n=0;n<r;++n)t[n]=s[n]}}(),t){var i=+t[0][0],s=+t[0][1],u=+t[1][0],l=+t[1][1];!function(e,t,n,r){for(var o,a=Ub.length;a--;)Yb(o=Ub[a],e,t,n,r)&&kb(o,e,t,n,r)&&(Math.abs(o[0][0]-o[1][0])>Bb||Math.abs(o[0][1]-o[1][1])>Bb)||delete Ub[a]}(i,s,u,l),function(e,t,n,r){var o,a,i,s,u,l,d,c,f,m,_,h,p=Rb.length,y=!0;for(o=0;o<p;++o)if(a=Rb[o]){for(i=a.site,s=(u=a.halfedges).length;s--;)Ub[u[s]]||u.splice(s,1);for(s=0,l=u.length;s<l;)_=(m=Db(a,Ub[u[s]]))[0],h=m[1],c=(d=xb(a,Ub[u[++s%l]]))[0],f=d[1],(Math.abs(_-c)>Bb||Math.abs(h-f)>Bb)&&(u.splice(s,0,Ub.push(Lb(i,m,Math.abs(_-e)<Bb&&r-h>Bb?[e,Math.abs(c-e)<Bb?f:r]:Math.abs(h-r)<Bb&&n-_>Bb?[Math.abs(f-r)<Bb?c:n,r]:Math.abs(_-n)<Bb&&h-t>Bb?[n,Math.abs(c-n)<Bb?f:t]:Math.abs(h-t)<Bb&&_-e>Bb?[Math.abs(f-t)<Bb?c:e,t]:null))-1),++l);l&&(y=!1)}if(y){var g,v,M,b=1/0;for(o=0,y=null;o<p;++o)(a=Rb[o])&&(M=(g=(i=a.site)[0]-e)*g+(v=i[1]-t)*v)<b&&(b=M,y=a);if(y){var L=[e,t],w=[e,r],k=[n,r],Y=[n,t];y.halfedges.push(Ub.push(Lb(i=y.site,L,w))-1,Ub.push(Lb(i,w,k))-1,Ub.push(Lb(i,k,Y))-1,Ub.push(Lb(i,Y,L))-1)}}for(o=0;o<p;++o)(a=Rb[o])&&(a.halfedges.length||delete Rb[o])}(i,s,u,l)}this.edges=Ub,this.cells=Rb,zb=Wb=Ub=Rb=null}Gb.prototype={constructor:Gb,polygons:function(){var e=this.edges;return this.cells.map(function(t){var n=t.halfedges.map(function(n){return xb(t,e[n])});return n.data=t.site.data,n})},triangles:function(){var e=[],t=this.edges;return this.cells.forEach(function(n,r){if(a=(o=n.halfedges).length)for(var o,a,i,s,u,l,d=n.site,c=-1,f=t[o[a-1]],m=f.left===d?f.right:f.left;++c<a;)i=m,m=(f=t[o[c]]).left===d?f.right:f.left,i&&m&&r<i.index&&r<m.index&&(u=i,l=m,((s=d)[0]-l[0])*(u[1]-s[1])-(s[0]-u[0])*(l[1]-s[1])<0)&&e.push([d.data,i.data,m.data])}),e},links:function(){return this.edges.filter(function(e){return e.right}).map(function(e){return{source:e.left.data,target:e.right.data}})},find:function(e,t,n){for(var r,o,a=this,i=a._found||0,s=a.cells.length;!(o=a.cells[i]);)if(++i>=s)return null;var u=e-o.site[0],l=t-o.site[1],d=u*u+l*l;do{o=a.cells[r=i],i=null,o.halfedges.forEach(function(n){var r=a.edges[n],s=r.left;if(s!==o.site&&s||(s=r.right)){var u=e-s[0],l=t-s[1],c=u*u+l*l;c<d&&(d=c,i=s.index)}})}while(null!==i);return a._found=r,null==n||d<=n*n?o.site:null}};var Jb=function(){var e=mb,t=_b,n=null;function r(r){return new Gb(r.map(function(n,o){var a=[Math.round(e(n,o,r)/Bb)*Bb,Math.round(t(n,o,r)/Bb)*Bb];return a.index=o,a.data=n,a}),n)}return r.polygons=function(e){return r(e).polygons()},r.links=function(e){return r(e).links()},r.triangles=function(e){return r(e).triangles()},r.x=function(t){return arguments.length?(e="function"==typeof t?t:fb(+t),r):e},r.y=function(e){return arguments.length?(t="function"==typeof e?e:fb(+e),r):t},r.extent=function(e){return arguments.length?(n=null==e?null:[[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]],r):n&&[[n[0][0],n[0][1]],[n[1][0],n[1][1]]]},r.size=function(e){return arguments.length?(n=null==e?null:[[0,0],[+e[0],+e[1]]],r):n&&[n[1][0]-n[0][0],n[1][1]-n[0][1]]},r},Kb=function(e){return function(){return e}};function $b(e,t,n){this.k=e,this.x=t,this.y=n}$b.prototype={constructor:$b,scale:function(e){return 1===e?this:new $b(this.k*e,this.x,this.y)},translate:function(e,t){return 0===e&0===t?this:new $b(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var Qb=new $b(1,0,0);function Xb(e){return e.__zoom||Qb}function Zb(){Ge.stopImmediatePropagation()}Xb.prototype=$b.prototype;var eL=function(){Ge.preventDefault(),Ge.stopImmediatePropagation()};function tL(){return!Ge.button}function nL(){var e,t,n=this;return n instanceof SVGElement?(e=(n=n.ownerSVGElement||n).width.baseVal.value,t=n.height.baseVal.value):(e=n.clientWidth,t=n.clientHeight),[[0,0],[e,t]]}function rL(){return this.__zoom||Qb}function oL(){return-Ge.deltaY*(Ge.deltaMode?120:1)/500}function aL(){return"ontouchstart"in this}function iL(e,t,n){var r=e.invertX(t[0][0])-n[0][0],o=e.invertX(t[1][0])-n[1][0],a=e.invertY(t[0][1])-n[0][1],i=e.invertY(t[1][1])-n[1][1];return e.translate(o>r?(r+o)/2:Math.min(0,r)||Math.max(0,o),i>a?(a+i)/2:Math.min(0,a)||Math.max(0,i))}var sL=function(){var e,t,n=tL,r=nL,o=iL,a=oL,i=aL,s=[0,1/0],u=[[-1/0,-1/0],[1/0,1/0]],l=250,d=ir,c=[],f=fe("start","zoom","end"),m=500,_=150,h=0;function p(e){e.property("__zoom",rL).on("wheel.zoom",w).on("mousedown.zoom",k).on("dblclick.zoom",Y).filter(i).on("touchstart.zoom",T).on("touchmove.zoom",x).on("touchend.zoom touchcancel.zoom",D).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function y(e,t){return(t=Math.max(s[0],Math.min(s[1],t)))===e.k?e:new $b(t,e.x,e.y)}function g(e,t,n){var r=t[0]-n[0]*e.k,o=t[1]-n[1]*e.k;return r===e.x&&o===e.y?e:new $b(e.k,r,o)}function v(e){return[(+e[0][0]+ +e[1][0])/2,(+e[0][1]+ +e[1][1])/2]}function M(e,t,n){e.on("start.zoom",function(){b(this,arguments).start()}).on("interrupt.zoom end.zoom",function(){b(this,arguments).end()}).tween("zoom",function(){var e=arguments,o=b(this,e),a=r.apply(this,e),i=n||v(a),s=Math.max(a[1][0]-a[0][0],a[1][1]-a[0][1]),u=this.__zoom,l="function"==typeof t?t.apply(this,e):t,c=d(u.invert(i).concat(s/u.k),l.invert(i).concat(s/l.k));return function(e){if(1===e)e=l;else{var t=c(e),n=s/t[2];e=new $b(n,i[0]-t[0]*n,i[1]-t[1]*n)}o.zoom(null,e)}})}function b(e,t){for(var n,r=0,o=c.length;r<o;++r)if((n=c[r]).that===e)return n;return new L(e,t)}function L(e,t){this.that=e,this.args=t,this.index=-1,this.active=0,this.extent=r.apply(e,t)}function w(){if(n.apply(this,arguments)){var e=b(this,arguments),t=this.__zoom,r=Math.max(s[0],Math.min(s[1],t.k*Math.pow(2,a.apply(this,arguments)))),i=ct(this);if(e.wheel)e.mouse[0][0]===i[0]&&e.mouse[0][1]===i[1]||(e.mouse[1]=t.invert(e.mouse[0]=i)),clearTimeout(e.wheel);else{if(t.k===r)return;e.mouse=[i,t.invert(i)],Xr(this),e.start()}eL(),e.wheel=setTimeout(function(){e.wheel=null,e.end()},_),e.zoom("mouse",o(g(y(t,r),e.mouse[0],e.mouse[1]),e.extent,u))}}function k(){if(!t&&n.apply(this,arguments)){var e=b(this,arguments),r=ot(Ge.view).on("mousemove.zoom",function(){if(eL(),!e.moved){var t=Ge.clientX-i,n=Ge.clientY-s;e.moved=t*t+n*n>h}e.zoom("mouse",o(g(e.that.__zoom,e.mouse[0]=ct(e.that),e.mouse[1]),e.extent,u))},!0).on("mouseup.zoom",function(){r.on("mousemove.zoom mouseup.zoom",null),gt(Ge.view,e.moved),eL(),e.end()},!0),a=ct(this),i=Ge.clientX,s=Ge.clientY;yt(Ge.view),Zb(),e.mouse=[a,this.__zoom.invert(a)],Xr(this),e.start()}}function Y(){if(n.apply(this,arguments)){var e=this.__zoom,t=ct(this),a=e.invert(t),i=e.k*(Ge.shiftKey?.5:2),s=o(g(y(e,i),t,a),r.apply(this,arguments),u);eL(),l>0?ot(this).transition().duration(l).call(M,s,t):ot(this).call(p.transform,s)}}function T(){if(n.apply(this,arguments)){var t,r,o,a,i=b(this,arguments),s=Ge.changedTouches,u=s.length;for(Zb(),r=0;r<u;++r)o=s[r],a=[a=mt(this,s,o.identifier),this.__zoom.invert(a),o.identifier],i.touch0?i.touch1||(i.touch1=a):(i.touch0=a,t=!0);if(e&&(e=clearTimeout(e),!i.touch1))return i.end(),void((a=ot(this).on("dblclick.zoom"))&&a.apply(this,arguments));t&&(e=setTimeout(function(){e=null},m),Xr(this),i.start())}}function x(){var t,n,r,a,i=b(this,arguments),s=Ge.changedTouches,l=s.length;for(eL(),e&&(e=clearTimeout(e)),t=0;t<l;++t)n=s[t],r=mt(this,s,n.identifier),i.touch0&&i.touch0[2]===n.identifier?i.touch0[0]=r:i.touch1&&i.touch1[2]===n.identifier&&(i.touch1[0]=r);if(n=i.that.__zoom,i.touch1){var d=i.touch0[0],c=i.touch0[1],f=i.touch1[0],m=i.touch1[1],_=(_=f[0]-d[0])*_+(_=f[1]-d[1])*_,h=(h=m[0]-c[0])*h+(h=m[1]-c[1])*h;n=y(n,Math.sqrt(_/h)),r=[(d[0]+f[0])/2,(d[1]+f[1])/2],a=[(c[0]+m[0])/2,(c[1]+m[1])/2]}else{if(!i.touch0)return;r=i.touch0[0],a=i.touch0[1]}i.zoom("touch",o(g(n,r,a),i.extent,u))}function D(){var e,n,r=b(this,arguments),o=Ge.changedTouches,a=o.length;for(Zb(),t&&clearTimeout(t),t=setTimeout(function(){t=null},m),e=0;e<a;++e)n=o[e],r.touch0&&r.touch0[2]===n.identifier?delete r.touch0:r.touch1&&r.touch1[2]===n.identifier&&delete r.touch1;r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0?r.touch0[1]=this.__zoom.invert(r.touch0[0]):r.end()}return p.transform=function(e,t){var n=e.selection?e.selection():e;n.property("__zoom",rL),e!==n?M(e,t):n.interrupt().each(function(){b(this,arguments).start().zoom(null,"function"==typeof t?t.apply(this,arguments):t).end()})},p.scaleBy=function(e,t){p.scaleTo(e,function(){return this.__zoom.k*("function"==typeof t?t.apply(this,arguments):t)})},p.scaleTo=function(e,t){p.transform(e,function(){var e=r.apply(this,arguments),n=this.__zoom,a=v(e),i=n.invert(a),s="function"==typeof t?t.apply(this,arguments):t;return o(g(y(n,s),a,i),e,u)})},p.translateBy=function(e,t,n){p.transform(e,function(){return o(this.__zoom.translate("function"==typeof t?t.apply(this,arguments):t,"function"==typeof n?n.apply(this,arguments):n),r.apply(this,arguments),u)})},p.translateTo=function(e,t,n){p.transform(e,function(){var e=r.apply(this,arguments),a=this.__zoom,i=v(e);return o(Qb.translate(i[0],i[1]).scale(a.k).translate("function"==typeof t?-t.apply(this,arguments):-t,"function"==typeof n?-n.apply(this,arguments):-n),e,u)})},L.prototype={start:function(){return 1==++this.active&&(this.index=c.push(this)-1,this.emit("start")),this},zoom:function(e,t){return this.mouse&&"mouse"!==e&&(this.mouse[1]=t.invert(this.mouse[0])),this.touch0&&"touch"!==e&&(this.touch0[1]=t.invert(this.touch0[0])),this.touch1&&"touch"!==e&&(this.touch1[1]=t.invert(this.touch1[0])),this.that.__zoom=t,this.emit("zoom"),this},end:function(){return 0==--this.active&&(c.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(e){Xe(new function(e,t,n){this.target=e,this.type=t,this.transform=n}(p,e,this.that.__zoom),f.apply,f,[e,this.that,this.args])}},p.wheelDelta=function(e){return arguments.length?(a="function"==typeof e?e:Kb(+e),p):a},p.filter=function(e){return arguments.length?(n="function"==typeof e?e:Kb(!!e),p):n},p.touchable=function(e){return arguments.length?(i="function"==typeof e?e:Kb(!!e),p):i},p.extent=function(e){return arguments.length?(r="function"==typeof e?e:Kb([[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]]),p):r},p.scaleExtent=function(e){return arguments.length?(s[0]=+e[0],s[1]=+e[1],p):[s[0],s[1]]},p.translateExtent=function(e){return arguments.length?(u[0][0]=+e[0][0],u[1][0]=+e[1][0],u[0][1]=+e[0][1],u[1][1]=+e[1][1],p):[[u[0][0],u[0][1]],[u[1][0],u[1][1]]]},p.constrain=function(e){return arguments.length?(o=e,p):o},p.duration=function(e){return arguments.length?(l=+e,p):l},p.interpolate=function(e){return arguments.length?(d=e,p):d},p.on=function(){var e=f.on.apply(f,arguments);return e===f?p:e},p.clickDistance=function(e){return arguments.length?(h=(e=+e)*e,p):Math.sqrt(h)},p};n.d(t,"version",function(){return"5.1.0"}),n.d(t,"bisect",function(){return u}),n.d(t,"bisectRight",function(){return i}),n.d(t,"bisectLeft",function(){return s}),n.d(t,"ascending",function(){return r}),n.d(t,"bisector",function(){return o}),n.d(t,"cross",function(){return c}),n.d(t,"descending",function(){return f}),n.d(t,"deviation",function(){return h}),n.d(t,"extent",function(){return p}),n.d(t,"histogram",function(){return S}),n.d(t,"thresholdFreedmanDiaconis",function(){return C}),n.d(t,"thresholdScott",function(){return H}),n.d(t,"thresholdSturges",function(){return j}),n.d(t,"max",function(){return O}),n.d(t,"mean",function(){return P}),n.d(t,"median",function(){return N}),n.d(t,"merge",function(){return A}),n.d(t,"min",function(){return F}),n.d(t,"pairs",function(){return l}),n.d(t,"permute",function(){return I}),n.d(t,"quantile",function(){return E}),n.d(t,"range",function(){return L}),n.d(t,"scan",function(){return z}),n.d(t,"shuffle",function(){return R}),n.d(t,"sum",function(){return W}),n.d(t,"ticks",function(){return T}),n.d(t,"tickIncrement",function(){return x}),n.d(t,"tickStep",function(){return D}),n.d(t,"transpose",function(){return U}),n.d(t,"variance",function(){return _}),n.d(t,"zip",function(){return V}),n.d(t,"axisTop",function(){return re}),n.d(t,"axisRight",function(){return oe}),n.d(t,"axisBottom",function(){return ae}),n.d(t,"axisLeft",function(){return ie}),n.d(t,"brush",function(){return wa}),n.d(t,"brushX",function(){return ba}),n.d(t,"brushY",function(){return La}),n.d(t,"brushSelection",function(){return Ma}),n.d(t,"chord",function(){return Ea}),n.d(t,"ribbon",function(){return Va}),n.d(t,"nest",function(){return Ka}),n.d(t,"set",function(){return ri}),n.d(t,"map",function(){return Ja}),n.d(t,"keys",function(){return oi}),n.d(t,"values",function(){return ai}),n.d(t,"entries",function(){return ii}),n.d(t,"color",function(){return Rt}),n.d(t,"rgb",function(){return Vt}),n.d(t,"hsl",function(){return Jt}),n.d(t,"lab",function(){return ln}),n.d(t,"hcl",function(){return yn}),n.d(t,"lch",function(){return pn}),n.d(t,"gray",function(){return un}),n.d(t,"cubehelix",function(){return Yn}),n.d(t,"contours",function(){return pi}),n.d(t,"contourDensity",function(){return bi}),n.d(t,"dispatch",function(){return fe}),n.d(t,"drag",function(){return Yt}),n.d(t,"dragDisable",function(){return yt}),n.d(t,"dragEnable",function(){return gt}),n.d(t,"dsvFormat",function(){return Di}),n.d(t,"csvParse",function(){return Si}),n.d(t,"csvParseRows",function(){return Ei}),n.d(t,"csvFormat",function(){return Ci}),n.d(t,"csvFormatRows",function(){return Hi}),n.d(t,"tsvParse",function(){return Pi}),n.d(t,"tsvParseRows",function(){return Ni}),n.d(t,"tsvFormat",function(){return Ai}),n.d(t,"tsvFormatRows",function(){return Fi}),n.d(t,"easeLinear",function(){return so}),n.d(t,"easeQuad",function(){return co}),n.d(t,"easeQuadIn",function(){return uo}),n.d(t,"easeQuadOut",function(){return lo}),n.d(t,"easeQuadInOut",function(){return co}),n.d(t,"easeCubic",function(){return _o}),n.d(t,"easeCubicIn",function(){return fo}),n.d(t,"easeCubicOut",function(){return mo}),n.d(t,"easeCubicInOut",function(){return _o}),n.d(t,"easePoly",function(){return yo}),n.d(t,"easePolyIn",function(){return ho}),n.d(t,"easePolyOut",function(){return po}),n.d(t,"easePolyInOut",function(){return yo}),n.d(t,"easeSin",function(){return Lo}),n.d(t,"easeSinIn",function(){return Mo}),n.d(t,"easeSinOut",function(){return bo}),n.d(t,"easeSinInOut",function(){return Lo}),n.d(t,"easeExp",function(){return Yo}),n.d(t,"easeExpIn",function(){return wo}),n.d(t,"easeExpOut",function(){return ko}),n.d(t,"easeExpInOut",function(){return Yo}),n.d(t,"easeCircle",function(){return Do}),n.d(t,"easeCircleIn",function(){return To}),n.d(t,"easeCircleOut",function(){return xo}),n.d(t,"easeCircleInOut",function(){return Do}),n.d(t,"easeBounce",function(){return zo}),n.d(t,"easeBounceIn",function(){return Io}),n.d(t,"easeBounceOut",function(){return zo}),n.d(t,"easeBounceInOut",function(){return Ro}),n.d(t,"easeBack",function(){return Bo}),n.d(t,"easeBackIn",function(){return Wo}),n.d(t,"easeBackOut",function(){return Uo}),n.d(t,"easeBackInOut",function(){return Bo}),n.d(t,"easeElastic",function(){return Go}),n.d(t,"easeElasticIn",function(){return qo}),n.d(t,"easeElasticOut",function(){return Go}),n.d(t,"easeElasticInOut",function(){return Jo}),n.d(t,"blob",function(){return zi}),n.d(t,"buffer",function(){return Wi}),n.d(t,"dsv",function(){return qi}),n.d(t,"csv",function(){return Gi}),n.d(t,"tsv",function(){return Ji}),n.d(t,"image",function(){return Ki}),n.d(t,"json",function(){return Qi}),n.d(t,"text",function(){return Bi}),n.d(t,"xml",function(){return Zi}),n.d(t,"html",function(){return es}),n.d(t,"svg",function(){return ts}),n.d(t,"forceCenter",function(){return ns}),n.d(t,"forceCollide",function(){return hs}),n.d(t,"forceLink",function(){return gs}),n.d(t,"forceManyBody",function(){return Ys}),n.d(t,"forceRadial",function(){return Ts}),n.d(t,"forceSimulation",function(){return ks}),n.d(t,"forceX",function(){return xs}),n.d(t,"forceY",function(){return Ds}),n.d(t,"formatDefaultLocale",function(){return Ws}),n.d(t,"format",function(){return As}),n.d(t,"formatPrefix",function(){return Fs}),n.d(t,"formatLocale",function(){return Rs}),n.d(t,"formatSpecifier",function(){return Os}),n.d(t,"precisionFixed",function(){return Us}),n.d(t,"precisionPrefix",function(){return Bs}),n.d(t,"precisionRound",function(){return Vs}),n.d(t,"geoArea",function(){return Au}),n.d(t,"geoBounds",function(){return jl}),n.d(t,"geoCentroid",function(){return Rl}),n.d(t,"geoCircle",function(){return Xl}),n.d(t,"geoClipAntimeridian",function(){return ld}),n.d(t,"geoClipCircle",function(){return dd}),n.d(t,"geoClipExtent",function(){return gd}),n.d(t,"geoClipRectangle",function(){return _d}),n.d(t,"geoContains",function(){return Nd}),n.d(t,"geoDistance",function(){return xd}),n.d(t,"geoGraticule",function(){return Id}),n.d(t,"geoGraticule10",function(){return zd}),n.d(t,"geoInterpolate",function(){return Vd}),n.d(t,"geoLength",function(){return kd}),n.d(t,"geoPath",function(){return Uc}),n.d(t,"geoAlbers",function(){return lf}),n.d(t,"geoAlbersUsa",function(){return df}),n.d(t,"geoAzimuthalEqualArea",function(){return _f}),n.d(t,"geoAzimuthalEqualAreaRaw",function(){return mf}),n.d(t,"geoAzimuthalEquidistant",function(){return pf}),n.d(t,"geoAzimuthalEquidistantRaw",function(){return hf}),n.d(t,"geoConicConformal",function(){return Lf}),n.d(t,"geoConicConformalRaw",function(){return bf}),n.d(t,"geoConicEqualArea",function(){return uf}),n.d(t,"geoConicEqualAreaRaw",function(){return sf}),n.d(t,"geoConicEquidistant",function(){return Tf}),n.d(t,"geoConicEquidistantRaw",function(){return Yf}),n.d(t,"geoEquirectangular",function(){return kf}),n.d(t,"geoEquirectangularRaw",function(){return wf}),n.d(t,"geoGnomonic",function(){return Df}),n.d(t,"geoGnomonicRaw",function(){return xf}),n.d(t,"geoIdentity",function(){return Sf}),n.d(t,"geoProjection",function(){return rf}),n.d(t,"geoProjectionMutator",function(){return of}),n.d(t,"geoMercator",function(){return gf}),n.d(t,"geoMercatorRaw",function(){return yf}),n.d(t,"geoNaturalEarth1",function(){return Cf}),n.d(t,"geoNaturalEarth1Raw",function(){return Ef}),n.d(t,"geoOrthographic",function(){return Of}),n.d(t,"geoOrthographicRaw",function(){return Hf}),n.d(t,"geoStereographic",function(){return Nf}),n.d(t,"geoStereographicRaw",function(){return Pf}),n.d(t,"geoTransverseMercator",function(){return Ff}),n.d(t,"geoTransverseMercatorRaw",function(){return Af}),n.d(t,"geoRotation",function(){return Kl}),n.d(t,"geoStream",function(){return ju}),n.d(t,"geoTransform",function(){return Bc}),n.d(t,"cluster",function(){return Wf}),n.d(t,"hierarchy",function(){return Bf}),n.d(t,"pack",function(){return _m}),n.d(t,"packSiblings",function(){return lm}),n.d(t,"packEnclose",function(){return $f}),n.d(t,"partition",function(){return Mm}),n.d(t,"stratify",function(){return Tm}),n.d(t,"tree",function(){return Hm}),n.d(t,"treemap",function(){return Fm}),n.d(t,"treemapBinary",function(){return Im}),n.d(t,"treemapDice",function(){return vm}),n.d(t,"treemapSlice",function(){return Om}),n.d(t,"treemapSliceDice",function(){return zm}),n.d(t,"treemapSquarify",function(){return Am}),n.d(t,"treemapResquarify",function(){return Rm}),n.d(t,"interpolate",function(){return $n}),n.d(t,"interpolateArray",function(){return In}),n.d(t,"interpolateBasis",function(){return Dn}),n.d(t,"interpolateBasisClosed",function(){return jn}),n.d(t,"interpolateDate",function(){return zn}),n.d(t,"interpolateNumber",function(){return Rn}),n.d(t,"interpolateObject",function(){return Wn}),n.d(t,"interpolateRound",function(){return Qn}),n.d(t,"interpolateString",function(){return Kn}),n.d(t,"interpolateTransformCss",function(){return nr}),n.d(t,"interpolateTransformSvg",function(){return rr}),n.d(t,"interpolateZoom",function(){return ir}),n.d(t,"interpolateRgb",function(){return Pn}),n.d(t,"interpolateRgbBasis",function(){return An}),n.d(t,"interpolateRgbBasisClosed",function(){return Fn}),n.d(t,"interpolateHsl",function(){return ur}),n.d(t,"interpolateHslLong",function(){return lr}),n.d(t,"interpolateLab",function(){return dr}),n.d(t,"interpolateHcl",function(){return fr}),n.d(t,"interpolateHclLong",function(){return mr}),n.d(t,"interpolateCubehelix",function(){return yr}),n.d(t,"interpolateCubehelixLong",function(){return gr}),n.d(t,"quantize",function(){return vr}),n.d(t,"path",function(){return Ia}),n.d(t,"polygonArea",function(){return Wm}),n.d(t,"polygonCentroid",function(){return Um}),n.d(t,"polygonHull",function(){return Gm}),n.d(t,"polygonContains",function(){return Jm}),n.d(t,"polygonLength",function(){return Km}),n.d(t,"quadtree",function(){return ls}),n.d(t,"randomUniform",function(){return Qm}),n.d(t,"randomNormal",function(){return Xm}),n.d(t,"randomLogNormal",function(){return Zm}),n.d(t,"randomBates",function(){return t_}),n.d(t,"randomIrwinHall",function(){return e_}),n.d(t,"randomExponential",function(){return n_}),n.d(t,"scaleBand",function(){return u_}),n.d(t,"scalePoint",function(){return l_}),n.d(t,"scaleIdentity",function(){return b_}),n.d(t,"scaleLinear",function(){return M_}),n.d(t,"scaleLog",function(){return j_}),n.d(t,"scaleOrdinal",function(){return s_}),n.d(t,"scaleImplicit",function(){return i_}),n.d(t,"scalePow",function(){return E_}),n.d(t,"scaleSqrt",function(){return C_}),n.d(t,"scaleQuantile",function(){return H_}),n.d(t,"scaleQuantize",function(){return O_}),n.d(t,"scaleThreshold",function(){return P_}),n.d(t,"scaleTime",function(){return Ey}),n.d(t,"scaleUtc",function(){return Cy}),n.d(t,"scaleSequential",function(){return Hy}),n.d(t,"schemeCategory10",function(){return Py}),n.d(t,"schemeAccent",function(){return Ny}),n.d(t,"schemeDark2",function(){return Ay}),n.d(t,"schemePaired",function(){return Fy}),n.d(t,"schemePastel1",function(){return Iy}),n.d(t,"schemePastel2",function(){return zy}),n.d(t,"schemeSet1",function(){return Ry}),n.d(t,"schemeSet2",function(){return Wy}),n.d(t,"schemeSet3",function(){return Uy}),n.d(t,"interpolateBrBG",function(){return qy}),n.d(t,"schemeBrBG",function(){return Vy}),n.d(t,"interpolatePRGn",function(){return Jy}),n.d(t,"schemePRGn",function(){return Gy}),n.d(t,"interpolatePiYG",function(){return $y}),n.d(t,"schemePiYG",function(){return Ky}),n.d(t,"interpolatePuOr",function(){return Xy}),n.d(t,"schemePuOr",function(){return Qy}),n.d(t,"interpolateRdBu",function(){return eg}),n.d(t,"schemeRdBu",function(){return Zy}),n.d(t,"interpolateRdGy",function(){return ng}),n.d(t,"schemeRdGy",function(){return tg}),n.d(t,"interpolateRdYlBu",function(){return og}),n.d(t,"schemeRdYlBu",function(){return rg}),n.d(t,"interpolateRdYlGn",function(){return ig}),n.d(t,"schemeRdYlGn",function(){return ag}),n.d(t,"interpolateSpectral",function(){return ug}),n.d(t,"schemeSpectral",function(){return sg}),n.d(t,"interpolateBuGn",function(){return dg}),n.d(t,"schemeBuGn",function(){return lg}),n.d(t,"interpolateBuPu",function(){return fg}),n.d(t,"schemeBuPu",function(){return cg}),n.d(t,"interpolateGnBu",function(){return _g}),n.d(t,"schemeGnBu",function(){return mg}),n.d(t,"interpolateOrRd",function(){return pg}),n.d(t,"schemeOrRd",function(){return hg}),n.d(t,"interpolatePuBuGn",function(){return gg}),n.d(t,"schemePuBuGn",function(){return yg}),n.d(t,"interpolatePuBu",function(){return Mg}),n.d(t,"schemePuBu",function(){return vg}),n.d(t,"interpolatePuRd",function(){return Lg}),n.d(t,"schemePuRd",function(){return bg}),n.d(t,"interpolateRdPu",function(){return kg}),n.d(t,"schemeRdPu",function(){return wg}),n.d(t,"interpolateYlGnBu",function(){return Tg}),n.d(t,"schemeYlGnBu",function(){return Yg}),n.d(t,"interpolateYlGn",function(){return Dg}),n.d(t,"schemeYlGn",function(){return xg}),n.d(t,"interpolateYlOrBr",function(){return Sg}),n.d(t,"schemeYlOrBr",function(){return jg}),n.d(t,"interpolateYlOrRd",function(){return Cg}),n.d(t,"schemeYlOrRd",function(){return Eg}),n.d(t,"interpolateBlues",function(){return Og}),n.d(t,"schemeBlues",function(){return Hg}),n.d(t,"interpolateGreens",function(){return Ng}),n.d(t,"schemeGreens",function(){return Pg}),n.d(t,"interpolateGreys",function(){return Fg}),n.d(t,"schemeGreys",function(){return Ag}),n.d(t,"interpolatePurples",function(){return zg}),n.d(t,"schemePurples",function(){return Ig}),n.d(t,"interpolateReds",function(){return Wg}),n.d(t,"schemeReds",function(){return Rg}),n.d(t,"interpolateOranges",function(){return Bg}),n.d(t,"schemeOranges",function(){return Ug}),n.d(t,"interpolateCubehelixDefault",function(){return Vg}),n.d(t,"interpolateRainbow",function(){return Kg}),n.d(t,"interpolateWarm",function(){return qg}),n.d(t,"interpolateCool",function(){return Gg}),n.d(t,"interpolateViridis",function(){return Qg}),n.d(t,"interpolateMagma",function(){return Xg}),n.d(t,"interpolateInferno",function(){return Zg}),n.d(t,"interpolatePlasma",function(){return ev}),n.d(t,"create",function(){return at}),n.d(t,"creator",function(){return pe}),n.d(t,"local",function(){return st}),n.d(t,"matcher",function(){return ke}),n.d(t,"mouse",function(){return ct}),n.d(t,"namespace",function(){return he}),n.d(t,"namespaces",function(){return _e}),n.d(t,"clientPoint",function(){return dt}),n.d(t,"select",function(){return ot}),n.d(t,"selectAll",function(){return ft}),n.d(t,"selection",function(){return rt}),n.d(t,"selector",function(){return ge}),n.d(t,"selectorAll",function(){return Me}),n.d(t,"style",function(){return Ce}),n.d(t,"touch",function(){return mt}),n.d(t,"touches",function(){return _t}),n.d(t,"window",function(){return Ee}),n.d(t,"event",function(){return Ge}),n.d(t,"customEvent",function(){return Xe}),n.d(t,"arc",function(){return Mv}),n.d(t,"area",function(){return Tv}),n.d(t,"line",function(){return Yv}),n.d(t,"pie",function(){return jv}),n.d(t,"areaRadial",function(){return Pv}),n.d(t,"radialArea",function(){return Pv}),n.d(t,"lineRadial",function(){return Ov}),n.d(t,"radialLine",function(){return Ov}),n.d(t,"pointRadial",function(){return Nv}),n.d(t,"linkHorizontal",function(){return Bv}),n.d(t,"linkVertical",function(){return Vv}),n.d(t,"linkRadial",function(){return qv}),n.d(t,"symbol",function(){return dM}),n.d(t,"symbols",function(){return lM}),n.d(t,"symbolCircle",function(){return Gv}),n.d(t,"symbolCross",function(){return Jv}),n.d(t,"symbolDiamond",function(){return Qv}),n.d(t,"symbolSquare",function(){return nM}),n.d(t,"symbolStar",function(){return tM}),n.d(t,"symbolTriangle",function(){return oM}),n.d(t,"symbolWye",function(){return uM}),n.d(t,"curveBasisClosed",function(){return pM}),n.d(t,"curveBasisOpen",function(){return gM}),n.d(t,"curveBasis",function(){return _M}),n.d(t,"curveBundle",function(){return MM}),n.d(t,"curveCardinalClosed",function(){return YM}),n.d(t,"curveCardinalOpen",function(){return xM}),n.d(t,"curveCardinal",function(){return wM}),n.d(t,"curveCatmullRomClosed",function(){return CM}),n.d(t,"curveCatmullRomOpen",function(){return OM}),n.d(t,"curveCatmullRom",function(){return SM}),n.d(t,"curveLinearClosed",function(){return NM}),n.d(t,"curveLinear",function(){return Lv}),n.d(t,"curveMonotoneX",function(){return BM}),n.d(t,"curveMonotoneY",function(){return VM}),n.d(t,"curveNatural",function(){return JM}),n.d(t,"curveStep",function(){return $M}),n.d(t,"curveStepAfter",function(){return XM}),n.d(t,"curveStepBefore",function(){return QM}),n.d(t,"stack",function(){return nb}),n.d(t,"stackOffsetExpand",function(){return rb}),n.d(t,"stackOffsetDiverging",function(){return ob}),n.d(t,"stackOffsetNone",function(){return ZM}),n.d(t,"stackOffsetSilhouette",function(){return ab}),n.d(t,"stackOffsetWiggle",function(){return ib}),n.d(t,"stackOrderAscending",function(){return sb}),n.d(t,"stackOrderDescending",function(){return lb}),n.d(t,"stackOrderInsideOut",function(){return db}),n.d(t,"stackOrderNone",function(){return eb}),n.d(t,"stackOrderReverse",function(){return cb}),n.d(t,"timeInterval",function(){return F_}),n.d(t,"timeMillisecond",function(){return z_}),n.d(t,"timeMilliseconds",function(){return R_}),n.d(t,"utcMillisecond",function(){return z_}),n.d(t,"utcMilliseconds",function(){return R_}),n.d(t,"timeSecond",function(){return V_}),n.d(t,"timeSeconds",function(){return q_}),n.d(t,"utcSecond",function(){return V_}),n.d(t,"utcSeconds",function(){return q_}),n.d(t,"timeMinute",function(){return J_}),n.d(t,"timeMinutes",function(){return K_}),n.d(t,"timeHour",function(){return Q_}),n.d(t,"timeHours",function(){return X_}),n.d(t,"timeDay",function(){return eh}),n.d(t,"timeDays",function(){return th}),n.d(t,"timeWeek",function(){return rh}),n.d(t,"timeWeeks",function(){return dh}),n.d(t,"timeSunday",function(){return rh}),n.d(t,"timeSundays",function(){return dh}),n.d(t,"timeMonday",function(){return oh}),n.d(t,"timeMondays",function(){return ch}),n.d(t,"timeTuesday",function(){return ah}),n.d(t,"timeTuesdays",function(){return fh}),n.d(t,"timeWednesday",function(){return ih}),n.d(t,"timeWednesdays",function(){return mh}),n.d(t,"timeThursday",function(){return sh}),n.d(t,"timeThursdays",function(){return _h}),n.d(t,"timeFriday",function(){return uh}),n.d(t,"timeFridays",function(){return hh}),n.d(t,"timeSaturday",function(){return lh}),n.d(t,"timeSaturdays",function(){return ph}),n.d(t,"timeMonth",function(){return gh}),n.d(t,"timeMonths",function(){return vh}),n.d(t,"timeYear",function(){return bh}),n.d(t,"timeYears",function(){return Lh}),n.d(t,"utcMinute",function(){return kh}),n.d(t,"utcMinutes",function(){return Yh}),n.d(t,"utcHour",function(){return xh}),n.d(t,"utcHours",function(){return Dh}),n.d(t,"utcDay",function(){return Sh}),n.d(t,"utcDays",function(){return Eh}),n.d(t,"utcWeek",function(){return Hh}),n.d(t,"utcWeeks",function(){return zh}),n.d(t,"utcSunday",function(){return Hh}),n.d(t,"utcSundays",function(){return zh}),n.d(t,"utcMonday",function(){return Oh}),n.d(t,"utcMondays",function(){return Rh}),n.d(t,"utcTuesday",function(){return Ph}),n.d(t,"utcTuesdays",function(){return Wh}),n.d(t,"utcWednesday",function(){return Nh}),n.d(t,"utcWednesdays",function(){return Uh}),n.d(t,"utcThursday",function(){return Ah}),n.d(t,"utcThursdays",function(){return Bh}),n.d(t,"utcFriday",function(){return Fh}),n.d(t,"utcFridays",function(){return Vh}),n.d(t,"utcSaturday",function(){return Ih}),n.d(t,"utcSaturdays",function(){return qh}),n.d(t,"utcMonth",function(){return Jh}),n.d(t,"utcMonths",function(){return Kh}),n.d(t,"utcYear",function(){return Qh}),n.d(t,"utcYears",function(){return Xh}),n.d(t,"timeFormatDefaultLocale",function(){return gy}),n.d(t,"timeFormat",function(){return op}),n.d(t,"timeParse",function(){return ap}),n.d(t,"utcFormat",function(){return ip}),n.d(t,"utcParse",function(){return sp}),n.d(t,"timeFormatLocale",function(){return np}),n.d(t,"isoFormat",function(){return vy}),n.d(t,"isoParse",function(){return My}),n.d(t,"now",function(){return jr}),n.d(t,"timer",function(){return Cr}),n.d(t,"timerFlush",function(){return Hr}),n.d(t,"timeout",function(){return Ar}),n.d(t,"interval",function(){return Fr}),n.d(t,"transition",function(){return oo}),n.d(t,"active",function(){return Xo}),n.d(t,"interrupt",function(){return Xr}),n.d(t,"voronoi",function(){return Jb}),n.d(t,"zoom",function(){return sL}),n.d(t,"zoomTransform",function(){return Xb}),n.d(t,"zoomIdentity",function(){return Qb})},"./node_modules/dom-helpers/class/addClass.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){e.classList?e.classList.add(t):(0,a.default)(e,t)||("string"==typeof e.className?e.className=e.className+" "+t:e.setAttribute("class",(e.className&&e.className.baseVal||"")+" "+t))};var r,o=n("./node_modules/dom-helpers/class/hasClass.js"),a=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},"./node_modules/dom-helpers/class/hasClass.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")},e.exports=t.default},"./node_modules/dom-helpers/class/removeClass.js":function(e,t,n){"use strict";function r(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}e.exports=function(e,t){e.classList?e.classList.remove(t):"string"==typeof e.className?e.className=r(e.className,t):e.setAttribute("class",r(e.className&&e.className.baseVal||"",t))}},"./node_modules/fbjs/lib/ExecutionEnvironment.js":function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},"./node_modules/fbjs/lib/containsNode.js":function(e,t,n){"use strict";var r=n("./node_modules/fbjs/lib/isTextNode.js");e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},"./node_modules/fbjs/lib/emptyFunction.js":function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},"./node_modules/fbjs/lib/emptyObject.js":function(e,t,n){"use strict";e.exports={}},"./node_modules/fbjs/lib/getActiveElement.js":function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},"./node_modules/fbjs/lib/invariant.js":function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,a,i,s,u){if(r(t),!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var d=[n,o,a,i,s,u],c=0;(l=new Error(t.replace(/%s/g,function(){return d[c++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},"./node_modules/fbjs/lib/isNode.js":function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},"./node_modules/fbjs/lib/isTextNode.js":function(e,t,n){"use strict";var r=n("./node_modules/fbjs/lib/isNode.js");e.exports=function(e){return r(e)&&3==e.nodeType}},"./node_modules/fbjs/lib/shallowEqual.js":function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(var i=0;i<n.length;i++)if(!r.call(t,n[i])||!o(e[n[i]],t[n[i]]))return!1;return!0}},"./node_modules/hoist-non-react-statics/index.js":function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,a=Object.getOwnPropertyDescriptor,i=Object.getPrototypeOf,s=i&&i(Object);return function u(l,d,c){if("string"!=typeof d){if(s){var f=i(d);f&&f!==s&&u(l,f,c)}var m=r(d);o&&(m=m.concat(o(d)));for(var _=0;_<m.length;++_){var h=m[_];if(!(e[h]||t[h]||c&&c[h])){var p=a(d,h);try{n(l,h,p)}catch(e){}}}return l}return l}}()},"./node_modules/invariant/browser.js":function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,s){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,a,i,s],d=0;(u=new Error(t.replace(/%s/g,function(){return l[d++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},"./node_modules/lodash-es/_freeGlobal.js":function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n("./node_modules/webpack/buildin/global.js"))},"./node_modules/lodash-es/isPlainObject.js":function(e,t,n){"use strict";var r=n("./node_modules/lodash-es/_freeGlobal.js"),o="object"==typeof self&&self&&self.Object===Object&&self,a=(r.a||o||Function("return this")()).Symbol,i=Object.prototype,s=i.hasOwnProperty,u=i.toString,l=a?a.toStringTag:void 0;var d=function(e){var t=s.call(e,l),n=e[l];try{e[l]=void 0;var r=!0}catch(e){}var o=u.call(e);return r&&(t?e[l]=n:delete e[l]),o},c=Object.prototype.toString;var f=function(e){return c.call(e)},m="[object Null]",_="[object Undefined]",h=a?a.toStringTag:void 0;var p=function(e){return null==e?void 0===e?_:m:h&&h in Object(e)?d(e):f(e)};var y=function(e,t){return function(n){return e(t(n))}}(Object.getPrototypeOf,Object);var g=function(e){return null!=e&&"object"==typeof e},v="[object Object]",M=Function.prototype,b=Object.prototype,L=M.toString,w=b.hasOwnProperty,k=L.call(Object);t.a=function(e){if(!g(e)||p(e)!=v)return!1;var t=y(e);if(null===t)return!0;var n=w.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&L.call(n)==k}},"./node_modules/moment/locale sync recursive ^\\.\\/.*$":function(e,t,n){var r={"./af":"./node_modules/moment/locale/af.js","./af.js":"./node_modules/moment/locale/af.js","./ar":"./node_modules/moment/locale/ar.js","./ar-dz":"./node_modules/moment/locale/ar-dz.js","./ar-dz.js":"./node_modules/moment/locale/ar-dz.js","./ar-kw":"./node_modules/moment/locale/ar-kw.js","./ar-kw.js":"./node_modules/moment/locale/ar-kw.js","./ar-ly":"./node_modules/moment/locale/ar-ly.js","./ar-ly.js":"./node_modules/moment/locale/ar-ly.js","./ar-ma":"./node_modules/moment/locale/ar-ma.js","./ar-ma.js":"./node_modules/moment/locale/ar-ma.js","./ar-sa":"./node_modules/moment/locale/ar-sa.js","./ar-sa.js":"./node_modules/moment/locale/ar-sa.js","./ar-tn":"./node_modules/moment/locale/ar-tn.js","./ar-tn.js":"./node_modules/moment/locale/ar-tn.js","./ar.js":"./node_modules/moment/locale/ar.js","./az":"./node_modules/moment/locale/az.js","./az.js":"./node_modules/moment/locale/az.js","./be":"./node_modules/moment/locale/be.js","./be.js":"./node_modules/moment/locale/be.js","./bg":"./node_modules/moment/locale/bg.js","./bg.js":"./node_modules/moment/locale/bg.js","./bm":"./node_modules/moment/locale/bm.js","./bm.js":"./node_modules/moment/locale/bm.js","./bn":"./node_modules/moment/locale/bn.js","./bn.js":"./node_modules/moment/locale/bn.js","./bo":"./node_modules/moment/locale/bo.js","./bo.js":"./node_modules/moment/locale/bo.js","./br":"./node_modules/moment/locale/br.js","./br.js":"./node_modules/moment/locale/br.js","./bs":"./node_modules/moment/locale/bs.js","./bs.js":"./node_modules/moment/locale/bs.js","./ca":"./node_modules/moment/locale/ca.js","./ca.js":"./node_modules/moment/locale/ca.js","./cs":"./node_modules/moment/locale/cs.js","./cs.js":"./node_modules/moment/locale/cs.js","./cv":"./node_modules/moment/locale/cv.js","./cv.js":"./node_modules/moment/locale/cv.js","./cy":"./node_modules/moment/locale/cy.js","./cy.js":"./node_modules/moment/locale/cy.js","./da":"./node_modules/moment/locale/da.js","./da.js":"./node_modules/moment/locale/da.js","./de":"./node_modules/moment/locale/de.js","./de-at":"./node_modules/moment/locale/de-at.js","./de-at.js":"./node_modules/moment/locale/de-at.js","./de-ch":"./node_modules/moment/locale/de-ch.js","./de-ch.js":"./node_modules/moment/locale/de-ch.js","./de.js":"./node_modules/moment/locale/de.js","./dv":"./node_modules/moment/locale/dv.js","./dv.js":"./node_modules/moment/locale/dv.js","./el":"./node_modules/moment/locale/el.js","./el.js":"./node_modules/moment/locale/el.js","./en-au":"./node_modules/moment/locale/en-au.js","./en-au.js":"./node_modules/moment/locale/en-au.js","./en-ca":"./node_modules/moment/locale/en-ca.js","./en-ca.js":"./node_modules/moment/locale/en-ca.js","./en-gb":"./node_modules/moment/locale/en-gb.js","./en-gb.js":"./node_modules/moment/locale/en-gb.js","./en-ie":"./node_modules/moment/locale/en-ie.js","./en-ie.js":"./node_modules/moment/locale/en-ie.js","./en-il":"./node_modules/moment/locale/en-il.js","./en-il.js":"./node_modules/moment/locale/en-il.js","./en-nz":"./node_modules/moment/locale/en-nz.js","./en-nz.js":"./node_modules/moment/locale/en-nz.js","./eo":"./node_modules/moment/locale/eo.js","./eo.js":"./node_modules/moment/locale/eo.js","./es":"./node_modules/moment/locale/es.js","./es-do":"./node_modules/moment/locale/es-do.js","./es-do.js":"./node_modules/moment/locale/es-do.js","./es-us":"./node_modules/moment/locale/es-us.js","./es-us.js":"./node_modules/moment/locale/es-us.js","./es.js":"./node_modules/moment/locale/es.js","./et":"./node_modules/moment/locale/et.js","./et.js":"./node_modules/moment/locale/et.js","./eu":"./node_modules/moment/locale/eu.js","./eu.js":"./node_modules/moment/locale/eu.js","./fa":"./node_modules/moment/locale/fa.js","./fa.js":"./node_modules/moment/locale/fa.js","./fi":"./node_modules/moment/locale/fi.js","./fi.js":"./node_modules/moment/locale/fi.js","./fo":"./node_modules/moment/locale/fo.js","./fo.js":"./node_modules/moment/locale/fo.js","./fr":"./node_modules/moment/locale/fr.js","./fr-ca":"./node_modules/moment/locale/fr-ca.js","./fr-ca.js":"./node_modules/moment/locale/fr-ca.js","./fr-ch":"./node_modules/moment/locale/fr-ch.js","./fr-ch.js":"./node_modules/moment/locale/fr-ch.js","./fr.js":"./node_modules/moment/locale/fr.js","./fy":"./node_modules/moment/locale/fy.js","./fy.js":"./node_modules/moment/locale/fy.js","./gd":"./node_modules/moment/locale/gd.js","./gd.js":"./node_modules/moment/locale/gd.js","./gl":"./node_modules/moment/locale/gl.js","./gl.js":"./node_modules/moment/locale/gl.js","./gom-latn":"./node_modules/moment/locale/gom-latn.js","./gom-latn.js":"./node_modules/moment/locale/gom-latn.js","./gu":"./node_modules/moment/locale/gu.js","./gu.js":"./node_modules/moment/locale/gu.js","./he":"./node_modules/moment/locale/he.js","./he.js":"./node_modules/moment/locale/he.js","./hi":"./node_modules/moment/locale/hi.js","./hi.js":"./node_modules/moment/locale/hi.js","./hr":"./node_modules/moment/locale/hr.js","./hr.js":"./node_modules/moment/locale/hr.js","./hu":"./node_modules/moment/locale/hu.js","./hu.js":"./node_modules/moment/locale/hu.js","./hy-am":"./node_modules/moment/locale/hy-am.js","./hy-am.js":"./node_modules/moment/locale/hy-am.js","./id":"./node_modules/moment/locale/id.js","./id.js":"./node_modules/moment/locale/id.js","./is":"./node_modules/moment/locale/is.js","./is.js":"./node_modules/moment/locale/is.js","./it":"./node_modules/moment/locale/it.js","./it.js":"./node_modules/moment/locale/it.js","./ja":"./node_modules/moment/locale/ja.js","./ja.js":"./node_modules/moment/locale/ja.js","./jv":"./node_modules/moment/locale/jv.js","./jv.js":"./node_modules/moment/locale/jv.js","./ka":"./node_modules/moment/locale/ka.js","./ka.js":"./node_modules/moment/locale/ka.js","./kk":"./node_modules/moment/locale/kk.js","./kk.js":"./node_modules/moment/locale/kk.js","./km":"./node_modules/moment/locale/km.js","./km.js":"./node_modules/moment/locale/km.js","./kn":"./node_modules/moment/locale/kn.js","./kn.js":"./node_modules/moment/locale/kn.js","./ko":"./node_modules/moment/locale/ko.js","./ko.js":"./node_modules/moment/locale/ko.js","./ky":"./node_modules/moment/locale/ky.js","./ky.js":"./node_modules/moment/locale/ky.js","./lb":"./node_modules/moment/locale/lb.js","./lb.js":"./node_modules/moment/locale/lb.js","./lo":"./node_modules/moment/locale/lo.js","./lo.js":"./node_modules/moment/locale/lo.js","./lt":"./node_modules/moment/locale/lt.js","./lt.js":"./node_modules/moment/locale/lt.js","./lv":"./node_modules/moment/locale/lv.js","./lv.js":"./node_modules/moment/locale/lv.js","./me":"./node_modules/moment/locale/me.js","./me.js":"./node_modules/moment/locale/me.js","./mi":"./node_modules/moment/locale/mi.js","./mi.js":"./node_modules/moment/locale/mi.js","./mk":"./node_modules/moment/locale/mk.js","./mk.js":"./node_modules/moment/locale/mk.js","./ml":"./node_modules/moment/locale/ml.js","./ml.js":"./node_modules/moment/locale/ml.js","./mn":"./node_modules/moment/locale/mn.js","./mn.js":"./node_modules/moment/locale/mn.js","./mr":"./node_modules/moment/locale/mr.js","./mr.js":"./node_modules/moment/locale/mr.js","./ms":"./node_modules/moment/locale/ms.js","./ms-my":"./node_modules/moment/locale/ms-my.js","./ms-my.js":"./node_modules/moment/locale/ms-my.js","./ms.js":"./node_modules/moment/locale/ms.js","./mt":"./node_modules/moment/locale/mt.js","./mt.js":"./node_modules/moment/locale/mt.js","./my":"./node_modules/moment/locale/my.js","./my.js":"./node_modules/moment/locale/my.js","./nb":"./node_modules/moment/locale/nb.js","./nb.js":"./node_modules/moment/locale/nb.js","./ne":"./node_modules/moment/locale/ne.js","./ne.js":"./node_modules/moment/locale/ne.js","./nl":"./node_modules/moment/locale/nl.js","./nl-be":"./node_modules/moment/locale/nl-be.js","./nl-be.js":"./node_modules/moment/locale/nl-be.js","./nl.js":"./node_modules/moment/locale/nl.js","./nn":"./node_modules/moment/locale/nn.js","./nn.js":"./node_modules/moment/locale/nn.js","./pa-in":"./node_modules/moment/locale/pa-in.js","./pa-in.js":"./node_modules/moment/locale/pa-in.js","./pl":"./node_modules/moment/locale/pl.js","./pl.js":"./node_modules/moment/locale/pl.js","./pt":"./node_modules/moment/locale/pt.js","./pt-br":"./node_modules/moment/locale/pt-br.js","./pt-br.js":"./node_modules/moment/locale/pt-br.js","./pt.js":"./node_modules/moment/locale/pt.js","./ro":"./node_modules/moment/locale/ro.js","./ro.js":"./node_modules/moment/locale/ro.js","./ru":"./node_modules/moment/locale/ru.js","./ru.js":"./node_modules/moment/locale/ru.js","./sd":"./node_modules/moment/locale/sd.js","./sd.js":"./node_modules/moment/locale/sd.js","./se":"./node_modules/moment/locale/se.js","./se.js":"./node_modules/moment/locale/se.js","./si":"./node_modules/moment/locale/si.js","./si.js":"./node_modules/moment/locale/si.js","./sk":"./node_modules/moment/locale/sk.js","./sk.js":"./node_modules/moment/locale/sk.js","./sl":"./node_modules/moment/locale/sl.js","./sl.js":"./node_modules/moment/locale/sl.js","./sq":"./node_modules/moment/locale/sq.js","./sq.js":"./node_modules/moment/locale/sq.js","./sr":"./node_modules/moment/locale/sr.js","./sr-cyrl":"./node_modules/moment/locale/sr-cyrl.js","./sr-cyrl.js":"./node_modules/moment/locale/sr-cyrl.js","./sr.js":"./node_modules/moment/locale/sr.js","./ss":"./node_modules/moment/locale/ss.js","./ss.js":"./node_modules/moment/locale/ss.js","./sv":"./node_modules/moment/locale/sv.js","./sv.js":"./node_modules/moment/locale/sv.js","./sw":"./node_modules/moment/locale/sw.js","./sw.js":"./node_modules/moment/locale/sw.js","./ta":"./node_modules/moment/locale/ta.js","./ta.js":"./node_modules/moment/locale/ta.js","./te":"./node_modules/moment/locale/te.js","./te.js":"./node_modules/moment/locale/te.js","./tet":"./node_modules/moment/locale/tet.js","./tet.js":"./node_modules/moment/locale/tet.js","./tg":"./node_modules/moment/locale/tg.js","./tg.js":"./node_modules/moment/locale/tg.js","./th":"./node_modules/moment/locale/th.js","./th.js":"./node_modules/moment/locale/th.js","./tl-ph":"./node_modules/moment/locale/tl-ph.js","./tl-ph.js":"./node_modules/moment/locale/tl-ph.js","./tlh":"./node_modules/moment/locale/tlh.js","./tlh.js":"./node_modules/moment/locale/tlh.js","./tr":"./node_modules/moment/locale/tr.js","./tr.js":"./node_modules/moment/locale/tr.js","./tzl":"./node_modules/moment/locale/tzl.js","./tzl.js":"./node_modules/moment/locale/tzl.js","./tzm":"./node_modules/moment/locale/tzm.js","./tzm-latn":"./node_modules/moment/locale/tzm-latn.js","./tzm-latn.js":"./node_modules/moment/locale/tzm-latn.js","./tzm.js":"./node_modules/moment/locale/tzm.js","./ug-cn":"./node_modules/moment/locale/ug-cn.js","./ug-cn.js":"./node_modules/moment/locale/ug-cn.js","./uk":"./node_modules/moment/locale/uk.js","./uk.js":"./node_modules/moment/locale/uk.js","./ur":"./node_modules/moment/locale/ur.js","./ur.js":"./node_modules/moment/locale/ur.js","./uz":"./node_modules/moment/locale/uz.js","./uz-latn":"./node_modules/moment/locale/uz-latn.js","./uz-latn.js":"./node_modules/moment/locale/uz-latn.js","./uz.js":"./node_modules/moment/locale/uz.js","./vi":"./node_modules/moment/locale/vi.js","./vi.js":"./node_modules/moment/locale/vi.js","./x-pseudo":"./node_modules/moment/locale/x-pseudo.js","./x-pseudo.js":"./node_modules/moment/locale/x-pseudo.js","./yo":"./node_modules/moment/locale/yo.js","./yo.js":"./node_modules/moment/locale/yo.js","./zh-cn":"./node_modules/moment/locale/zh-cn.js","./zh-cn.js":"./node_modules/moment/locale/zh-cn.js","./zh-hk":"./node_modules/moment/locale/zh-hk.js","./zh-hk.js":"./node_modules/moment/locale/zh-hk.js","./zh-tw":"./node_modules/moment/locale/zh-tw.js","./zh-tw.js":"./node_modules/moment/locale/zh-tw.js"};function o(e){var t=a(e);return n(t)}function a(e){var t=r[e];if(!(t+1)){var n=new Error('Cannot find module "'+e+'".');throw n.code="MODULE_NOT_FOUND",n}return t}o.keys=function(){return Object.keys(r)},o.resolve=a,e.exports=o,o.id="./node_modules/moment/locale sync recursive ^\\.\\/.*$"},"./node_modules/moment/locale/af.js":function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ar-dz.js":function(e,t,n){!function(e){"use strict";e.defineLocale("ar-dz",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"أح_إث_ثلا_أر_خم_جم_سب".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ar-kw.js":function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ar-ly.js":function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},o=function(e){return function(t,o,a,i){var s=n(t),u=r[e][n(t)];return 2===s&&(u=u[o?0:1]),u.replace(/%d/i,t)}},a=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:a,monthsShort:a,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:o("s"),ss:o("s"),m:o("m"),mm:o("m"),h:o("h"),hh:o("h"),d:o("d"),dd:o("d"),M:o("M"),MM:o("M"),y:o("y"),yy:o("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ar-ma.js":function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ar-sa.js":function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ar-tn.js":function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ar.js":function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},o={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(t,n,a,i){var s=r(t),u=o[e][r(t)];return 2===s&&(u=u[n?0:1]),u.replace(/%d/i,t)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/az.js":function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10,r=e%100-n,o=e>=100?100:null;return e+(t[n]||t[r]||t[o])},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/be.js":function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,o,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"};return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(r=+e,o=a[n].split("_"),r%10==1&&r%100!=11?o[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?o[1]:o[2])}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/bg.js":function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/bm.js":function(e,t,n){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/bn.js":function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/bo.js":function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/br.js":function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}e.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(function e(t){return t>9?e(t%10):t}(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){var t=1===e?"añ":"vet";return e+t},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/bs.js":function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ca.js":function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/cs.js":function(e,t,n){!function(e){"use strict";var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_");function r(e){return e>1&&e<5&&1!=~~(e/10)}function o(e,t,n,o){var a=e+" ";switch(n){case"s":return t||o?"pár sekund":"pár sekundami";case"ss":return t||o?a+(r(e)?"sekundy":"sekund"):a+"sekundami";case"m":return t?"minuta":o?"minutu":"minutou";case"mm":return t||o?a+(r(e)?"minuty":"minut"):a+"minutami";case"h":return t?"hodina":o?"hodinu":"hodinou";case"hh":return t||o?a+(r(e)?"hodiny":"hodin"):a+"hodinami";case"d":return t||o?"den":"dnem";case"dd":return t||o?a+(r(e)?"dny":"dní"):a+"dny";case"M":return t||o?"měsíc":"měsícem";case"MM":return t||o?a+(r(e)?"měsíce":"měsíců"):a+"měsíci";case"y":return t||o?"rok":"rokem";case"yy":return t||o?a+(r(e)?"roky":"let"):a+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsParse:function(e,t){var n,r=[];for(n=0;n<12;n++)r[n]=new RegExp("^"+e[n]+"$|^"+t[n]+"$","i");return r}(t,n),shortMonthsParse:function(e){var t,n=[];for(t=0;t<12;t++)n[t]=new RegExp("^"+e[t]+"$","i");return n}(n),longMonthsParse:function(e){var t,n=[];for(t=0;t<12;t++)n[t]=new RegExp("^"+e[t]+"$","i");return n}(t),weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:o,ss:o,m:o,mm:o,h:o,hh:o,d:o,dd:o,M:o,MM:o,y:o,yy:o},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/cv.js":function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){var t=/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран";return e+t},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/cy.js":function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t=e,n="";return t>20?n=40===t||50===t||60===t||80===t||100===t?"fed":"ain":t>0&&(n=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][t]),e+n},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/da.js":function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/de-at.js":function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var o={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?o[n][0]:o[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/de-ch.js":function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var o={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?o[n][0]:o[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/de.js":function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var o={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?o[n][0]:o[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/dv.js":function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/el.js":function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n,r=this._calendarEl[e],o=t&&t.hours();return((n=r)instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(r=r.apply(t)),r.replace("{}",o%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/en-au.js":function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/en-ca.js":function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/en-gb.js":function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/en-ie.js":function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/en-il.js":function(e,t,n){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/en-nz.js":function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/eo.js":function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-a de] MMMM, YYYY",LLL:"D[-a de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-a de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"sekundoj",ss:"%d sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/es-do.js":function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],o=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:o,monthsShortRegex:o,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/es-us.js":function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"MMMM [de] D [de] YYYY",LLL:"MMMM [de] D [de] YYYY h:mm A",LLLL:"dddd, MMMM [de] D [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/es.js":function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],o=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:o,monthsShortRegex:o,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/et.js":function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var o={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?o[n][2]?o[n][2]:o[n][1]:r?o[n][0]:o[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/eu.js":function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/fa.js":function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"ثانیه d%",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,function(e){return n[e]}).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]}).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/fi.js":function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function r(e,r,o,a){var i="";switch(o){case"s":return a?"muutaman sekunnin":"muutama sekunti";case"ss":return a?"sekunnin":"sekuntia";case"m":return a?"minuutin":"minuutti";case"mm":i=a?"minuutin":"minuuttia";break;case"h":return a?"tunnin":"tunti";case"hh":i=a?"tunnin":"tuntia";break;case"d":return a?"päivän":"päivä";case"dd":i=a?"päivän":"päivää";break;case"M":return a?"kuukauden":"kuukausi";case"MM":i=a?"kuukauden":"kuukautta";break;case"y":return a?"vuoden":"vuosi";case"yy":i=a?"vuoden":"vuotta"}return i=function(e,r){return e<10?r?n[e]:t[e]:e}(e,a)+" "+i}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/fo.js":function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minutt",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaði",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/fr-ca.js":function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/fr-ch.js":function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/fr.js":function(e,t,n){!function(e){"use strict";e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/fy.js":function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/gd.js":function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){var t=1===e?"d":e%10==2?"na":"mh";return e+t},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/gl.js":function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/gom-latn.js":function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var o={s:["thodde secondanim","thodde second"],ss:[e+" secondanim",e+" second"],m:["eka mintan","ek minute"],mm:[e+" mintanim",e+" mintam"],h:["eka horan","ek hor"],hh:[e+" horanim",e+" horam"],d:["eka disan","ek dis"],dd:[e+" disanim",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineanim",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsanim",e+" vorsam"]};return t?o[n][0]:o[n][1]}e.defineLocale("gom-latn",{months:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Ieta to] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fatlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:1,doy:4},meridiemParse:/rati|sokalli|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokalli"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokalli":e<16?"donparam":e<20?"sanje":"rati"}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/gu.js":function(e,t,n){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પેહલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/he.js":function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/hi.js":function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/hr.js":function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/hu.js":function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,r){var o=e;switch(n){case"s":return r||t?"néhány másodperc":"néhány másodperce";case"ss":return o+(r||t)?" másodperc":" másodperce";case"m":return"egy"+(r||t?" perc":" perce");case"mm":return o+(r||t?" perc":" perce");case"h":return"egy"+(r||t?" óra":" órája");case"hh":return o+(r||t?" óra":" órája");case"d":return"egy"+(r||t?" nap":" napja");case"dd":return o+(r||t?" nap":" napja");case"M":return"egy"+(r||t?" hónap":" hónapja");case"MM":return o+(r||t?" hónap":" hónapja");case"y":return"egy"+(r||t?" év":" éve");case"yy":return o+(r||t?" év":" éve")}return""}function r(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/hy-am.js":function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/id.js":function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/is.js":function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,r,o){var a=e+" ";switch(r){case"s":return n||o?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?a+(n||o?"sekúndur":"sekúndum"):a+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?a+(n||o?"mínútur":"mínútum"):n?a+"mínúta":a+"mínútu";case"hh":return t(e)?a+(n||o?"klukkustundir":"klukkustundum"):a+"klukkustund";case"d":return n?"dagur":o?"dag":"degi";case"dd":return t(e)?n?a+"dagar":a+(o?"daga":"dögum"):n?a+"dagur":a+(o?"dag":"degi");case"M":return n?"mánuður":o?"mánuð":"mánuði";case"MM":return t(e)?n?a+"mánuðir":a+(o?"mánuði":"mánuðum"):n?a+"mánuður":a+(o?"mánuð":"mánuði");case"y":return n||o?"ár":"ári";case"yy":return t(e)?a+(n||o?"ár":"árum"):a+(n||o?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/it.js":function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ja.js":function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()<this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()<e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/jv.js":function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ka.js":function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:{standalone:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),format:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return/(წამი|წუთი|საათი|წელი)/.test(e)?e.replace(/ი$/,"ში"):e+"ში"},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/kk.js":function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){var n=e%10,r=e>=100?100:null;return e+(t[e]||t[n]||t[r])},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/km.js":function(e,t,n){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/kn.js":function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ko.js":function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ky.js":function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кече саат] LT",lastWeek:"[Өткен аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){var n=e%10,r=e>=100?100:null;return e+(t[e]||t[n]||t[r])},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/lb.js":function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var o={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?o[n][0]:o[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10,r=e/10;return n(0===t?r:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/lo.js":function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/lt.js":function(e,t,n){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,r){return t?o(n)[0]:r?o(n)[1]:o(n)[2]}function r(e){return e%10==0||e>10&&e<20}function o(e){return t[e].split("_")}function a(e,t,a,i){var s=e+" ";return 1===e?s+n(0,t,a[0],i):t?s+(r(e)?o(a)[1]:o(a)[0]):i?s+o(a)[1]:s+(r(e)?o(a)[1]:o(a)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,r){return t?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},ss:a,m:n,mm:a,h:n,hh:a,d:n,dd:a,M:n,MM:a,y:n,yy:a},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/lv.js":function(e,t,n){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function r(e,r,o){return e+" "+n(t[o],e,r)}function o(e,r,o){return n(t[o],e,r)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:r,m:o,mm:r,h:o,hh:r,d:o,dd:r,M:o,MM:r,y:o,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/me.js":function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var o=t.words[r];return 1===r.length?n?o[0]:o[1]:e+" "+t.correctGrammaticalCase(e,o)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/mi.js":function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/mk.js":function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ml.js":function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/mn.js":function(e,t,n){!function(e){"use strict";function t(e,t,n,r){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/mr.js":function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(e,t,n,r){var o="";if(t)switch(n){case"s":o="काही सेकंद";break;case"ss":o="%d सेकंद";break;case"m":o="एक मिनिट";break;case"mm":o="%d मिनिटे";break;case"h":o="एक तास";break;case"hh":o="%d तास";break;case"d":o="एक दिवस";break;case"dd":o="%d दिवस";break;case"M":o="एक महिना";break;case"MM":o="%d महिने";break;case"y":o="एक वर्ष";break;case"yy":o="%d वर्षे"}else switch(n){case"s":o="काही सेकंदां";break;case"ss":o="%d सेकंदां";break;case"m":o="एका मिनिटा";break;case"mm":o="%d मिनिटां";break;case"h":o="एका तासा";break;case"hh":o="%d तासां";break;case"d":o="एका दिवसा";break;case"dd":o="%d दिवसां";break;case"M":o="एका महिन्या";break;case"MM":o="%d महिन्यां";break;case"y":o="एका वर्षा";break;case"yy":o="%d वर्षां"}return o.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात्री"===t?e<4?e:e+12:"सकाळी"===t?e:"दुपारी"===t?e>=10?e:e+12:"सायंकाळी"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात्री":e<10?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ms-my.js":function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ms.js":function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/mt.js":function(e,t,n){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/my.js":function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/nb.js":function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ne.js":function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/nl-be.js":function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],o=/^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:o,monthsShortRegex:o,monthsStrictRegex:/^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/nl.js":function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],o=/^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:o,monthsShortRegex:o,monthsStrictRegex:/^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/nn.js":function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/pa-in.js":function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/pl.js":function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");function r(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function o(e,t,n){var o=e+" ";switch(n){case"ss":return o+(r(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return o+(r(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return o+(r(e)?"godziny":"godzin");case"MM":return o+(r(e)?"miesiące":"miesięcy");case"yy":return o+(r(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,r){return e?""===r?"("+n[e.month()]+"|"+t[e.month()]+")":/D MMMM/.test(r)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:o,m:o,mm:o,h:o,hh:o,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:o,y:"rok",yy:o},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/pt-br.js":function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº"})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/pt.js":function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ro.js":function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=" ";return(e%100>=20||e>=100&&e%100==0)&&(r=" de "),e+r+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ru.js":function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,o,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"};return"m"===n?t?"минута":"минуту":e+" "+(r=+e,o=a[n].split("_"),r%10==1&&r%100!=11?o[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?o[1]:o[2])}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/sd.js":function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/se.js":function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/si.js":function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/sk.js":function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(e){return e>1&&e<5}function o(e,t,n,o){var a=e+" ";switch(n){case"s":return t||o?"pár sekúnd":"pár sekundami";case"ss":return t||o?a+(r(e)?"sekundy":"sekúnd"):a+"sekundami";case"m":return t?"minúta":o?"minútu":"minútou";case"mm":return t||o?a+(r(e)?"minúty":"minút"):a+"minútami";case"h":return t?"hodina":o?"hodinu":"hodinou";case"hh":return t||o?a+(r(e)?"hodiny":"hodín"):a+"hodinami";case"d":return t||o?"deň":"dňom";case"dd":return t||o?a+(r(e)?"dni":"dní"):a+"dňami";case"M":return t||o?"mesiac":"mesiacom";case"MM":return t||o?a+(r(e)?"mesiace":"mesiacov"):a+"mesiacmi";case"y":return t||o?"rok":"rokom";case"yy":return t||o?a+(r(e)?"roky":"rokov"):a+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:o,ss:o,m:o,mm:o,h:o,hh:o,d:o,dd:o,M:o,MM:o,y:o,yy:o},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/sl.js":function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var o=e+" ";switch(n){case"s":return t||r?"nekaj sekund":"nekaj sekundami";case"ss":return o+=1===e?t?"sekundo":"sekundi":2===e?t||r?"sekundi":"sekundah":e<5?t||r?"sekunde":"sekundah":"sekund";case"m":return t?"ena minuta":"eno minuto";case"mm":return o+=1===e?t?"minuta":"minuto":2===e?t||r?"minuti":"minutama":e<5?t||r?"minute":"minutami":t||r?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return o+=1===e?t?"ura":"uro":2===e?t||r?"uri":"urama":e<5?t||r?"ure":"urami":t||r?"ur":"urami";case"d":return t||r?"en dan":"enim dnem";case"dd":return o+=1===e?t||r?"dan":"dnem":2===e?t||r?"dni":"dnevoma":t||r?"dni":"dnevi";case"M":return t||r?"en mesec":"enim mesecem";case"MM":return o+=1===e?t||r?"mesec":"mesecem":2===e?t||r?"meseca":"mesecema":e<5?t||r?"mesece":"meseci":t||r?"mesecev":"meseci";case"y":return t||r?"eno leto":"enim letom";case"yy":return o+=1===e?t||r?"leto":"letom":2===e?t||r?"leti":"letoma":e<5?t||r?"leta":"leti":t||r?"let":"leti"}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/sq.js":function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/sr-cyrl.js":function(e,t,n){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var o=t.words[r];return 1===r.length?n?o[0]:o[1]:e+" "+t.correctGrammaticalCase(e,o)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/sr.js":function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var o=t.words[r];return 1===r.length?n?o[0]:o[1]:e+" "+t.correctGrammaticalCase(e,o)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ss.js":function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/sv.js":function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e";return e+n},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/sw.js":function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ta.js":function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,function(e){return n[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return t[e]})},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t?e:"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/te.js":function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/tet.js":function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"minutu balun",ss:"minutu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/tg.js":function(e,t,n){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Пагоҳ соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){var n=e%10,r=e>=100?100:null;return e+(t[e]||t[n]||t[r])},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/th.js":function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/tl-ph.js":function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/tlh.js":function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,r,o){var a=function(e){var n=Math.floor(e%1e3/100),r=Math.floor(e%100/10),o=e%10,a="";return n>0&&(a+=t[n]+"vatlh"),r>0&&(a+=(""!==a?" ":"")+t[r]+"maH"),o>0&&(a+=(""!==a?" ":"")+t[o]),""===a?"pagh":a}(e);switch(r){case"ss":return a+" lup";case"mm":return a+" tup";case"hh":return a+" rep";case"dd":return a+" jaj";case"MM":return a+" jar";case"yy":return a+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/tr.js":function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var r=e%10,o=e%100-r,a=e>=100?100:null;return e+(t[r]||t[o]||t[a])}},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/tzl.js":function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var o={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return r?o[n][0]:t?o[n][0]:o[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/tzm-latn.js":function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/tzm.js":function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ug-cn.js":function(e,t,n){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"يېرىم كېچە":r<900?"سەھەر":r<1130?"چۈشتىن بۇرۇن":r<1230?"چۈش":r<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/uk.js":function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,o,a={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"};return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(r=+e,o=a[n].split("_"),r%10==1&&r%100!=11?o[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?o[1]:o[2])}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};if(!e)return n.nominative;var r=/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative";return n[r][e.day()]},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/ur.js":function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/uz-latn.js":function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/uz.js":function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/vi.js":function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/x-pseudo.js":function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/yo.js":function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/zh-cn.js":function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/zh-hk.js":function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/locale/zh-tw.js":function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n("./node_modules/moment/moment.js"))},"./node_modules/moment/moment.js":function(e,t,n){(function(e){e.exports=function(){"use strict";var t,r;function o(){return t.apply(null,arguments)}function a(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function i(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function s(e){return void 0===e}function u(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function l(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function d(e,t){var n,r=[];for(n=0;n<e.length;++n)r.push(t(e[n],n));return r}function c(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function f(e,t){for(var n in t)c(t,n)&&(e[n]=t[n]);return c(t,"toString")&&(e.toString=t.toString),c(t,"valueOf")&&(e.valueOf=t.valueOf),e}function m(e,t,n,r){return jt(e,t,n,r,!0).utc()}function _(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function h(e){if(null==e._isValid){var t=_(e),n=r.call(t.parsedDateParts,function(e){return null!=e}),o=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(o=o&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return o;e._isValid=o}return e._isValid}function p(e){var t=m(NaN);return null!=e?f(_(t),e):_(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,r=0;r<n;r++)if(r in t&&e.call(this,t[r],r,t))return!0;return!1};var y=o.momentProperties=[];function g(e,t){var n,r,o;if(s(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),s(t._i)||(e._i=t._i),s(t._f)||(e._f=t._f),s(t._l)||(e._l=t._l),s(t._strict)||(e._strict=t._strict),s(t._tzm)||(e._tzm=t._tzm),s(t._isUTC)||(e._isUTC=t._isUTC),s(t._offset)||(e._offset=t._offset),s(t._pf)||(e._pf=_(t)),s(t._locale)||(e._locale=t._locale),y.length>0)for(n=0;n<y.length;n++)r=y[n],s(o=t[r])||(e[r]=o);return e}var v=!1;function M(e){g(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===v&&(v=!0,o.updateOffset(this),v=!1)}function b(e){return e instanceof M||null!=e&&null!=e._isAMomentObject}function L(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function w(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=L(t)),n}function k(e,t,n){var r,o=Math.min(e.length,t.length),a=Math.abs(e.length-t.length),i=0;for(r=0;r<o;r++)(n&&e[r]!==t[r]||!n&&w(e[r])!==w(t[r]))&&i++;return i+a}function Y(e){!1===o.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function T(e,t){var n=!0;return f(function(){if(null!=o.deprecationHandler&&o.deprecationHandler(null,e),n){for(var r,a=[],i=0;i<arguments.length;i++){if(r="","object"==typeof arguments[i]){for(var s in r+="\n["+i+"] ",arguments[0])r+=s+": "+arguments[0][s]+", ";r=r.slice(0,-2)}else r=arguments[i];a.push(r)}Y(e+"\nArguments: "+Array.prototype.slice.call(a).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)},t)}var x,D={};function j(e,t){null!=o.deprecationHandler&&o.deprecationHandler(e,t),D[e]||(Y(t),D[e]=!0)}function S(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function E(e,t){var n,r=f({},e);for(n in t)c(t,n)&&(i(e[n])&&i(t[n])?(r[n]={},f(r[n],e[n]),f(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)c(e,n)&&!c(t,n)&&i(e[n])&&(r[n]=f({},r[n]));return r}function C(e){null!=e&&this.set(e)}o.suppressDeprecationWarnings=!1,o.deprecationHandler=null,x=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)c(e,t)&&n.push(t);return n};var H={};function O(e,t){var n=e.toLowerCase();H[n]=H[n+"s"]=H[t]=e}function P(e){return"string"==typeof e?H[e]||H[e.toLowerCase()]:void 0}function N(e){var t,n,r={};for(n in e)c(e,n)&&(t=P(n))&&(r[t]=e[n]);return r}var A={};function F(e,t){A[e]=t}function I(e,t,n){var r=""+Math.abs(e),o=t-r.length,a=e>=0;return(a?n?"+":"":"-")+Math.pow(10,Math.max(0,o)).toString().substr(1)+r}var z=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,R=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,W={},U={};function B(e,t,n,r){var o=r;"string"==typeof r&&(o=function(){return this[r]()}),e&&(U[e]=o),t&&(U[t[0]]=function(){return I(o.apply(this,arguments),t[1],t[2])}),n&&(U[n]=function(){return this.localeData().ordinal(o.apply(this,arguments),e)})}function V(e,t){return e.isValid()?(t=q(t,e.localeData()),W[t]=W[t]||function(e){var t,n,r,o=e.match(z);for(t=0,n=o.length;t<n;t++)U[o[t]]?o[t]=U[o[t]]:o[t]=(r=o[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,a="";for(r=0;r<n;r++)a+=S(o[r])?o[r].call(t,e):o[r];return a}}(t),W[t](e)):e.localeData().invalidDate()}function q(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(R.lastIndex=0;n>=0&&R.test(e);)e=e.replace(R,r),R.lastIndex=0,n-=1;return e}var G=/\d/,J=/\d\d/,K=/\d{3}/,$=/\d{4}/,Q=/[+-]?\d{6}/,X=/\d\d?/,Z=/\d\d\d\d?/,ee=/\d\d\d\d\d\d?/,te=/\d{1,3}/,ne=/\d{1,4}/,re=/[+-]?\d{1,6}/,oe=/\d+/,ae=/[+-]?\d+/,ie=/Z|[+-]\d\d:?\d\d/gi,se=/Z|[+-]\d\d(?::?\d\d)?/gi,ue=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,le={};function de(e,t,n){le[e]=S(t)?t:function(e,r){return e&&n?n:t}}function ce(e,t){return c(le,e)?le[e](t._strict,t._locale):new RegExp(fe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,r,o){return t||n||r||o})))}function fe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var me={};function _e(e,t){var n,r=t;for("string"==typeof e&&(e=[e]),u(t)&&(r=function(e,n){n[t]=w(e)}),n=0;n<e.length;n++)me[e[n]]=r}function he(e,t){_e(e,function(e,n,r,o){r._w=r._w||{},t(e,r._w,r,o)})}function pe(e,t,n){null!=t&&c(me,e)&&me[e](t,n._a,n,e)}var ye=0,ge=1,ve=2,Me=3,be=4,Le=5,we=6,ke=7,Ye=8;function Te(e){return xe(e)?366:365}function xe(e){return e%4==0&&e%100!=0||e%400==0}B("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),B(0,["YY",2],0,function(){return this.year()%100}),B(0,["YYYY",4],0,"year"),B(0,["YYYYY",5],0,"year"),B(0,["YYYYYY",6,!0],0,"year"),O("year","y"),F("year",1),de("Y",ae),de("YY",X,J),de("YYYY",ne,$),de("YYYYY",re,Q),de("YYYYYY",re,Q),_e(["YYYYY","YYYYYY"],ye),_e("YYYY",function(e,t){t[ye]=2===e.length?o.parseTwoDigitYear(e):w(e)}),_e("YY",function(e,t){t[ye]=o.parseTwoDigitYear(e)}),_e("Y",function(e,t){t[ye]=parseInt(e,10)}),o.parseTwoDigitYear=function(e){return w(e)+(w(e)>68?1900:2e3)};var De,je=Se("FullYear",!0);function Se(e,t){return function(n){return null!=n?(Ce(this,e,n),o.updateOffset(this,t),this):Ee(this,e)}}function Ee(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function Ce(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&xe(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),He(n,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](n))}function He(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?xe(e)?29:28:31-r%7%2}De=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},B("M",["MM",2],"Mo",function(){return this.month()+1}),B("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),B("MMMM",0,0,function(e){return this.localeData().months(this,e)}),O("month","M"),F("month",8),de("M",X),de("MM",X,J),de("MMM",function(e,t){return t.monthsShortRegex(e)}),de("MMMM",function(e,t){return t.monthsRegex(e)}),_e(["M","MM"],function(e,t){t[ge]=w(e)-1}),_e(["MMM","MMMM"],function(e,t,n,r){var o=n._locale.monthsParse(e,r,n._strict);null!=o?t[ge]=o:_(n).invalidMonth=e});var Oe=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Pe="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Ne="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Ae(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=w(t);else if(!u(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),He(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Fe(e){return null!=e?(Ae(this,e),o.updateOffset(this,!0),this):Ee(this,"Month")}var Ie=ue,ze=ue;function Re(){function e(e,t){return t.length-e.length}var t,n,r=[],o=[],a=[];for(t=0;t<12;t++)n=m([2e3,t]),r.push(this.monthsShort(n,"")),o.push(this.months(n,"")),a.push(this.months(n,"")),a.push(this.monthsShort(n,""));for(r.sort(e),o.sort(e),a.sort(e),t=0;t<12;t++)r[t]=fe(r[t]),o[t]=fe(o[t]);for(t=0;t<24;t++)a[t]=fe(a[t]);this._monthsRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function We(e){var t=new Date(Date.UTC.apply(null,arguments));return e<100&&e>=0&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function Ue(e,t,n){var r=7+t-n,o=(7+We(e,0,r).getUTCDay()-t)%7;return-o+r-1}function Be(e,t,n,r,o){var a,i,s=(7+n-r)%7,u=Ue(e,r,o),l=1+7*(t-1)+s+u;return l<=0?i=Te(a=e-1)+l:l>Te(e)?(a=e+1,i=l-Te(e)):(a=e,i=l),{year:a,dayOfYear:i}}function Ve(e,t,n){var r,o,a=Ue(e.year(),t,n),i=Math.floor((e.dayOfYear()-a-1)/7)+1;return i<1?(o=e.year()-1,r=i+qe(o,t,n)):i>qe(e.year(),t,n)?(r=i-qe(e.year(),t,n),o=e.year()+1):(o=e.year(),r=i),{week:r,year:o}}function qe(e,t,n){var r=Ue(e,t,n),o=Ue(e+1,t,n);return(Te(e)-r+o)/7}B("w",["ww",2],"wo","week"),B("W",["WW",2],"Wo","isoWeek"),O("week","w"),O("isoWeek","W"),F("week",5),F("isoWeek",5),de("w",X),de("ww",X,J),de("W",X),de("WW",X,J),he(["w","ww","W","WW"],function(e,t,n,r){t[r.substr(0,1)]=w(e)}),B("d",0,"do","day"),B("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),B("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),B("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),B("e",0,0,"weekday"),B("E",0,0,"isoWeekday"),O("day","d"),O("weekday","e"),O("isoWeekday","E"),F("day",11),F("weekday",11),F("isoWeekday",11),de("d",X),de("e",X),de("E",X),de("dd",function(e,t){return t.weekdaysMinRegex(e)}),de("ddd",function(e,t){return t.weekdaysShortRegex(e)}),de("dddd",function(e,t){return t.weekdaysRegex(e)}),he(["dd","ddd","dddd"],function(e,t,n,r){var o=n._locale.weekdaysParse(e,r,n._strict);null!=o?t.d=o:_(n).invalidWeekday=e}),he(["d","e","E"],function(e,t,n,r){t[r]=w(e)});var Ge="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Je="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Ke="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),$e=ue,Qe=ue,Xe=ue;function Ze(){function e(e,t){return t.length-e.length}var t,n,r,o,a,i=[],s=[],u=[],l=[];for(t=0;t<7;t++)n=m([2e3,1]).day(t),r=this.weekdaysMin(n,""),o=this.weekdaysShort(n,""),a=this.weekdays(n,""),i.push(r),s.push(o),u.push(a),l.push(r),l.push(o),l.push(a);for(i.sort(e),s.sort(e),u.sort(e),l.sort(e),t=0;t<7;t++)s[t]=fe(s[t]),u[t]=fe(u[t]),l[t]=fe(l[t]);this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+i.join("|")+")","i")}function et(){return this.hours()%12||12}function tt(e,t){B(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function nt(e,t){return t._meridiemParse}B("H",["HH",2],0,"hour"),B("h",["hh",2],0,et),B("k",["kk",2],0,function(){return this.hours()||24}),B("hmm",0,0,function(){return""+et.apply(this)+I(this.minutes(),2)}),B("hmmss",0,0,function(){return""+et.apply(this)+I(this.minutes(),2)+I(this.seconds(),2)}),B("Hmm",0,0,function(){return""+this.hours()+I(this.minutes(),2)}),B("Hmmss",0,0,function(){return""+this.hours()+I(this.minutes(),2)+I(this.seconds(),2)}),tt("a",!0),tt("A",!1),O("hour","h"),F("hour",13),de("a",nt),de("A",nt),de("H",X),de("h",X),de("k",X),de("HH",X,J),de("hh",X,J),de("kk",X,J),de("hmm",Z),de("hmmss",ee),de("Hmm",Z),de("Hmmss",ee),_e(["H","HH"],Me),_e(["k","kk"],function(e,t,n){var r=w(e);t[Me]=24===r?0:r}),_e(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),_e(["h","hh"],function(e,t,n){t[Me]=w(e),_(n).bigHour=!0}),_e("hmm",function(e,t,n){var r=e.length-2;t[Me]=w(e.substr(0,r)),t[be]=w(e.substr(r)),_(n).bigHour=!0}),_e("hmmss",function(e,t,n){var r=e.length-4,o=e.length-2;t[Me]=w(e.substr(0,r)),t[be]=w(e.substr(r,2)),t[Le]=w(e.substr(o)),_(n).bigHour=!0}),_e("Hmm",function(e,t,n){var r=e.length-2;t[Me]=w(e.substr(0,r)),t[be]=w(e.substr(r))}),_e("Hmmss",function(e,t,n){var r=e.length-4,o=e.length-2;t[Me]=w(e.substr(0,r)),t[be]=w(e.substr(r,2)),t[Le]=w(e.substr(o))});var rt,ot=Se("Hours",!0),at={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Pe,monthsShort:Ne,week:{dow:0,doy:6},weekdays:Ge,weekdaysMin:Ke,weekdaysShort:Je,meridiemParse:/[ap]\.?m?\.?/i},it={},st={};function ut(e){return e?e.toLowerCase().replace("_","-"):e}function lt(t){var r=null;if(!it[t]&&void 0!==e&&e&&e.exports)try{r=rt._abbr,n("./node_modules/moment/locale sync recursive ^\\.\\/.*$")("./"+t),dt(r)}catch(e){}return it[t]}function dt(e,t){var n;return e&&((n=s(t)?ft(e):ct(e,t))?rt=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),rt._abbr}function ct(e,t){if(null!==t){var n,r=at;if(t.abbr=e,null!=it[e])j("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=it[e]._config;else if(null!=t.parentLocale)if(null!=it[t.parentLocale])r=it[t.parentLocale]._config;else{if(null==(n=lt(t.parentLocale)))return st[t.parentLocale]||(st[t.parentLocale]=[]),st[t.parentLocale].push({name:e,config:t}),null;r=n._config}return it[e]=new C(E(r,t)),st[e]&&st[e].forEach(function(e){ct(e.name,e.config)}),dt(e),it[e]}return delete it[e],null}function ft(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return rt;if(!a(e)){if(t=lt(e))return t;e=[e]}return function(e){for(var t,n,r,o,a=0;a<e.length;){for(o=ut(e[a]).split("-"),t=o.length,n=(n=ut(e[a+1]))?n.split("-"):null;t>0;){if(r=lt(o.slice(0,t).join("-")))return r;if(n&&n.length>=t&&k(o,n,!0)>=t-1)break;t--}a++}return rt}(e)}function mt(e){var t,n=e._a;return n&&-2===_(e).overflow&&(t=n[ge]<0||n[ge]>11?ge:n[ve]<1||n[ve]>He(n[ye],n[ge])?ve:n[Me]<0||n[Me]>24||24===n[Me]&&(0!==n[be]||0!==n[Le]||0!==n[we])?Me:n[be]<0||n[be]>59?be:n[Le]<0||n[Le]>59?Le:n[we]<0||n[we]>999?we:-1,_(e)._overflowDayOfYear&&(t<ye||t>ve)&&(t=ve),_(e)._overflowWeeks&&-1===t&&(t=ke),_(e)._overflowWeekday&&-1===t&&(t=Ye),_(e).overflow=t),e}function _t(e,t,n){return null!=e?e:null!=t?t:n}function ht(e){var t,n,r,a,i,s=[];if(!e._d){for(r=function(e){var t=new Date(o.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[ve]&&null==e._a[ge]&&function(e){var t,n,r,o,a,i,s,u;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)a=1,i=4,n=_t(t.GG,e._a[ye],Ve(St(),1,4).year),r=_t(t.W,1),((o=_t(t.E,1))<1||o>7)&&(u=!0);else{a=e._locale._week.dow,i=e._locale._week.doy;var l=Ve(St(),a,i);n=_t(t.gg,e._a[ye],l.year),r=_t(t.w,l.week),null!=t.d?((o=t.d)<0||o>6)&&(u=!0):null!=t.e?(o=t.e+a,(t.e<0||t.e>6)&&(u=!0)):o=a}r<1||r>qe(n,a,i)?_(e)._overflowWeeks=!0:null!=u?_(e)._overflowWeekday=!0:(s=Be(n,r,o,a,i),e._a[ye]=s.year,e._dayOfYear=s.dayOfYear)}(e),null!=e._dayOfYear&&(i=_t(e._a[ye],r[ye]),(e._dayOfYear>Te(i)||0===e._dayOfYear)&&(_(e)._overflowDayOfYear=!0),n=We(i,0,e._dayOfYear),e._a[ge]=n.getUTCMonth(),e._a[ve]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=s[t]=r[t];for(;t<7;t++)e._a[t]=s[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[Me]&&0===e._a[be]&&0===e._a[Le]&&0===e._a[we]&&(e._nextDay=!0,e._a[Me]=0),e._d=(e._useUTC?We:function(e,t,n,r,o,a,i){var s=new Date(e,t,n,r,o,a,i);return e<100&&e>=0&&isFinite(s.getFullYear())&&s.setFullYear(e),s}).apply(null,s),a=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[Me]=24),e._w&&void 0!==e._w.d&&e._w.d!==a&&(_(e).weekdayMismatch=!0)}}var pt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,yt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,gt=/Z|[+-]\d\d(?::?\d\d)?/,vt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Mt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],bt=/^\/?Date\((\-?\d+)/i;function Lt(e){var t,n,r,o,a,i,s=e._i,u=pt.exec(s)||yt.exec(s);if(u){for(_(e).iso=!0,t=0,n=vt.length;t<n;t++)if(vt[t][1].exec(u[1])){o=vt[t][0],r=!1!==vt[t][2];break}if(null==o)return void(e._isValid=!1);if(u[3]){for(t=0,n=Mt.length;t<n;t++)if(Mt[t][1].exec(u[3])){a=(u[2]||" ")+Mt[t][0];break}if(null==a)return void(e._isValid=!1)}if(!r&&null!=a)return void(e._isValid=!1);if(u[4]){if(!gt.exec(u[4]))return void(e._isValid=!1);i="Z"}e._f=o+(a||"")+(i||""),xt(e)}else e._isValid=!1}var wt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function kt(e,t,n,r,o,a){var i=[function(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}(e),Ne.indexOf(t),parseInt(n,10),parseInt(r,10),parseInt(o,10)];return a&&i.push(parseInt(a,10)),i}var Yt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Tt(e){var t=wt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim());if(t){var n=kt(t[4],t[3],t[2],t[5],t[6],t[7]);if(!function(e,t,n){if(e){var r=Je.indexOf(e),o=new Date(t[0],t[1],t[2]).getDay();if(r!==o)return _(n).weekdayMismatch=!0,n._isValid=!1,!1}return!0}(t[1],n,e))return;e._a=n,e._tzm=function(e,t,n){if(e)return Yt[e];if(t)return 0;var r=parseInt(n,10),o=r%100,a=(r-o)/100;return 60*a+o}(t[8],t[9],t[10]),e._d=We.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),_(e).rfc2822=!0}else e._isValid=!1}function xt(e){if(e._f!==o.ISO_8601)if(e._f!==o.RFC_2822){e._a=[],_(e).empty=!0;var t,n,r,a,i,s=""+e._i,u=s.length,l=0;for(r=q(e._f,e._locale).match(z)||[],t=0;t<r.length;t++)a=r[t],(n=(s.match(ce(a,e))||[])[0])&&((i=s.substr(0,s.indexOf(n))).length>0&&_(e).unusedInput.push(i),s=s.slice(s.indexOf(n)+n.length),l+=n.length),U[a]?(n?_(e).empty=!1:_(e).unusedTokens.push(a),pe(a,n,e)):e._strict&&!n&&_(e).unusedTokens.push(a);_(e).charsLeftOver=u-l,s.length>0&&_(e).unusedInput.push(s),e._a[Me]<=12&&!0===_(e).bigHour&&e._a[Me]>0&&(_(e).bigHour=void 0),_(e).parsedDateParts=e._a.slice(0),_(e).meridiem=e._meridiem,e._a[Me]=(d=e._locale,c=e._a[Me],null==(f=e._meridiem)?c:null!=d.meridiemHour?d.meridiemHour(c,f):null!=d.isPM?((m=d.isPM(f))&&c<12&&(c+=12),m||12!==c||(c=0),c):c),ht(e),mt(e)}else Tt(e);else Lt(e);var d,c,f,m}function Dt(e){var t=e._i,n=e._f;return e._locale=e._locale||ft(e._l),null===t||void 0===n&&""===t?p({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),b(t)?new M(mt(t)):(l(t)?e._d=t:a(n)?function(e){var t,n,r,o,a;if(0===e._f.length)return _(e).invalidFormat=!0,void(e._d=new Date(NaN));for(o=0;o<e._f.length;o++)a=0,t=g({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[o],xt(t),h(t)&&(a+=_(t).charsLeftOver,a+=10*_(t).unusedTokens.length,_(t).score=a,(null==r||a<r)&&(r=a,n=t));f(e,n||t)}(e):n?xt(e):function(e){var t=e._i;s(t)?e._d=new Date(o.now()):l(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=bt.exec(e._i);null===t?(Lt(e),!1===e._isValid&&(delete e._isValid,Tt(e),!1===e._isValid&&(delete e._isValid,o.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):a(t)?(e._a=d(t.slice(0),function(e){return parseInt(e,10)}),ht(e)):i(t)?function(e){if(!e._d){var t=N(e._i);e._a=d([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),ht(e)}}(e):u(t)?e._d=new Date(t):o.createFromInputFallback(e)}(e),h(e)||(e._d=null),e))}function jt(e,t,n,r,o){var s,u={};return!0!==n&&!1!==n||(r=n,n=void 0),(i(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||a(e)&&0===e.length)&&(e=void 0),u._isAMomentObject=!0,u._useUTC=u._isUTC=o,u._l=n,u._i=e,u._f=t,u._strict=r,(s=new M(mt(Dt(u))))._nextDay&&(s.add(1,"d"),s._nextDay=void 0),s}function St(e,t,n,r){return jt(e,t,n,r,!1)}o.createFromInputFallback=T("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),o.ISO_8601=function(){},o.RFC_2822=function(){};var Et=T("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=St.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:p()}),Ct=T("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=St.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:p()});function Ht(e,t){var n,r;if(1===t.length&&a(t[0])&&(t=t[0]),!t.length)return St();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Ot=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Pt(e){var t=N(e),n=t.year||0,r=t.quarter||0,o=t.month||0,a=t.week||0,i=t.day||0,s=t.hour||0,u=t.minute||0,l=t.second||0,d=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===De.call(Ot,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,r=0;r<Ot.length;++r)if(e[Ot[r]]){if(n)return!1;parseFloat(e[Ot[r]])!==w(e[Ot[r]])&&(n=!0)}return!0}(t),this._milliseconds=+d+1e3*l+6e4*u+1e3*s*60*60,this._days=+i+7*a,this._months=+o+3*r+12*n,this._data={},this._locale=ft(),this._bubble()}function Nt(e){return e instanceof Pt}function At(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Ft(e,t){B(e,0,0,function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+I(~~(e/60),2)+t+I(~~e%60,2)})}Ft("Z",":"),Ft("ZZ",""),de("Z",se),de("ZZ",se),_e(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=zt(se,e)});var It=/([\+\-]|\d\d)/gi;function zt(e,t){var n=(t||"").match(e);if(null===n)return null;var r=n[n.length-1]||[],o=(r+"").match(It)||["-",0,0],a=60*o[1]+w(o[2]);return 0===a?0:"+"===o[0]?a:-a}function Rt(e,t){var n,r;return t._isUTC?(n=t.clone(),r=(b(e)||l(e)?e.valueOf():St(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),o.updateOffset(n,!1),n):St(e).local()}function Wt(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Ut(){return!!this.isValid()&&this._isUTC&&0===this._offset}o.updateOffset=function(){};var Bt=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Vt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function qt(e,t){var n,r,o,a,i,s,l=e,d=null;return Nt(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:u(e)?(l={},t?l[t]=e:l.milliseconds=e):(d=Bt.exec(e))?(n="-"===d[1]?-1:1,l={y:0,d:w(d[ve])*n,h:w(d[Me])*n,m:w(d[be])*n,s:w(d[Le])*n,ms:w(At(1e3*d[we]))*n}):(d=Vt.exec(e))?(n="-"===d[1]?-1:(d[1],1),l={y:Gt(d[2],n),M:Gt(d[3],n),w:Gt(d[4],n),d:Gt(d[5],n),h:Gt(d[6],n),m:Gt(d[7],n),s:Gt(d[8],n)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(a=St(l.from),i=St(l.to),o=a.isValid()&&i.isValid()?(i=Rt(i,a),a.isBefore(i)?s=Jt(a,i):((s=Jt(i,a)).milliseconds=-s.milliseconds,s.months=-s.months),s):{milliseconds:0,months:0},(l={}).ms=o.milliseconds,l.M=o.months),r=new Pt(l),Nt(e)&&c(e,"_locale")&&(r._locale=e._locale),r}function Gt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Jt(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Kt(e,t){return function(n,r){var o;return null===r||isNaN(+r)||(j(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),o=n,n=r,r=o),$t(this,qt(n="string"==typeof n?+n:n,r),e),this}}function $t(e,t,n,r){var a=t._milliseconds,i=At(t._days),s=At(t._months);e.isValid()&&(r=null==r||r,s&&Ae(e,Ee(e,"Month")+s*n),i&&Ce(e,"Date",Ee(e,"Date")+i*n),a&&e._d.setTime(e._d.valueOf()+a*n),r&&o.updateOffset(e,i||s))}qt.fn=Pt.prototype,qt.invalid=function(){return qt(NaN)};var Qt=Kt(1,"add"),Xt=Kt(-1,"subtract");function Zt(e,t){var n,r,o=12*(t.year()-e.year())+(t.month()-e.month()),a=e.clone().add(o,"months");return t-a<0?(n=e.clone().add(o-1,"months"),r=(t-a)/(a-n)):(n=e.clone().add(o+1,"months"),r=(t-a)/(n-a)),-(o+r)||0}function en(e){var t;return void 0===e?this._locale._abbr:(null!=(t=ft(e))&&(this._locale=t),this)}o.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",o.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var tn=T("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});function nn(){return this._locale}function rn(e,t){B(0,[e,e.length],0,t)}function on(e,t,n,r,o){var a;return null==e?Ve(this,r,o).year:(a=qe(e,r,o),t>a&&(t=a),function(e,t,n,r,o){var a=Be(e,t,n,r,o),i=We(a.year,0,a.dayOfYear);return this.year(i.getUTCFullYear()),this.month(i.getUTCMonth()),this.date(i.getUTCDate()),this}.call(this,e,t,n,r,o))}B(0,["gg",2],0,function(){return this.weekYear()%100}),B(0,["GG",2],0,function(){return this.isoWeekYear()%100}),rn("gggg","weekYear"),rn("ggggg","weekYear"),rn("GGGG","isoWeekYear"),rn("GGGGG","isoWeekYear"),O("weekYear","gg"),O("isoWeekYear","GG"),F("weekYear",1),F("isoWeekYear",1),de("G",ae),de("g",ae),de("GG",X,J),de("gg",X,J),de("GGGG",ne,$),de("gggg",ne,$),de("GGGGG",re,Q),de("ggggg",re,Q),he(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,r){t[r.substr(0,2)]=w(e)}),he(["gg","GG"],function(e,t,n,r){t[r]=o.parseTwoDigitYear(e)}),B("Q",0,"Qo","quarter"),O("quarter","Q"),F("quarter",7),de("Q",G),_e("Q",function(e,t){t[ge]=3*(w(e)-1)}),B("D",["DD",2],"Do","date"),O("date","D"),F("date",9),de("D",X),de("DD",X,J),de("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),_e(["D","DD"],ve),_e("Do",function(e,t){t[ve]=w(e.match(X)[0])});var an=Se("Date",!0);B("DDD",["DDDD",3],"DDDo","dayOfYear"),O("dayOfYear","DDD"),F("dayOfYear",4),de("DDD",te),de("DDDD",K),_e(["DDD","DDDD"],function(e,t,n){n._dayOfYear=w(e)}),B("m",["mm",2],0,"minute"),O("minute","m"),F("minute",14),de("m",X),de("mm",X,J),_e(["m","mm"],be);var sn=Se("Minutes",!1);B("s",["ss",2],0,"second"),O("second","s"),F("second",15),de("s",X),de("ss",X,J),_e(["s","ss"],Le);var un,ln=Se("Seconds",!1);for(B("S",0,0,function(){return~~(this.millisecond()/100)}),B(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),B(0,["SSS",3],0,"millisecond"),B(0,["SSSS",4],0,function(){return 10*this.millisecond()}),B(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),B(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),B(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),B(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),B(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),O("millisecond","ms"),F("millisecond",16),de("S",te,G),de("SS",te,J),de("SSS",te,K),un="SSSS";un.length<=9;un+="S")de(un,oe);function dn(e,t){t[we]=w(1e3*("0."+e))}for(un="S";un.length<=9;un+="S")_e(un,dn);var cn=Se("Milliseconds",!1);B("z",0,0,"zoneAbbr"),B("zz",0,0,"zoneName");var fn=M.prototype;function mn(e){return e}fn.add=Qt,fn.calendar=function(e,t){var n=e||St(),r=Rt(n,this).startOf("day"),a=o.calendarFormat(this,r)||"sameElse",i=t&&(S(t[a])?t[a].call(this,n):t[a]);return this.format(i||this.localeData().calendar(a,this,St(n)))},fn.clone=function(){return new M(this)},fn.diff=function(e,t,n){var r,o,a;if(!this.isValid())return NaN;if(!(r=Rt(e,this)).isValid())return NaN;switch(o=6e4*(r.utcOffset()-this.utcOffset()),t=P(t)){case"year":a=Zt(this,r)/12;break;case"month":a=Zt(this,r);break;case"quarter":a=Zt(this,r)/3;break;case"second":a=(this-r)/1e3;break;case"minute":a=(this-r)/6e4;break;case"hour":a=(this-r)/36e5;break;case"day":a=(this-r-o)/864e5;break;case"week":a=(this-r-o)/6048e5;break;default:a=this-r}return n?a:L(a)},fn.endOf=function(e){return void 0===(e=P(e))||"millisecond"===e?this:("date"===e&&(e="day"),this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms"))},fn.format=function(e){e||(e=this.isUtc()?o.defaultFormatUtc:o.defaultFormat);var t=V(this,e);return this.localeData().postformat(t)},fn.from=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||St(e).isValid())?qt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},fn.fromNow=function(e){return this.from(St(),e)},fn.to=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||St(e).isValid())?qt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},fn.toNow=function(e){return this.to(St(),e)},fn.get=function(e){return S(this[e=P(e)])?this[e]():this},fn.invalidAt=function(){return _(this).overflow},fn.isAfter=function(e,t){var n=b(e)?e:St(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=P(s(t)?"millisecond":t))?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},fn.isBefore=function(e,t){var n=b(e)?e:St(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=P(s(t)?"millisecond":t))?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},fn.isBetween=function(e,t,n,r){return("("===(r=r||"()")[0]?this.isAfter(e,n):!this.isBefore(e,n))&&(")"===r[1]?this.isBefore(t,n):!this.isAfter(t,n))},fn.isSame=function(e,t){var n,r=b(e)?e:St(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=P(t||"millisecond"))?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},fn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},fn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},fn.isValid=function(){return h(this)},fn.lang=tn,fn.locale=en,fn.localeData=nn,fn.max=Ct,fn.min=Et,fn.parsingFlags=function(){return f({},_(this))},fn.set=function(e,t){if("object"==typeof e)for(var n=function(e){var t=[];for(var n in e)t.push({unit:n,priority:A[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}(e=N(e)),r=0;r<n.length;r++)this[n[r].unit](e[n[r].unit]);else if(S(this[e=P(e)]))return this[e](t);return this},fn.startOf=function(e){switch(e=P(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this},fn.subtract=Xt,fn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},fn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},fn.toDate=function(){return new Date(this.valueOf())},fn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?V(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):S(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",V(n,"Z")):V(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},fn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",o=t+'[")]';return this.format(n+r+"-MM-DD[T]HH:mm:ss.SSS"+o)},fn.toJSON=function(){return this.isValid()?this.toISOString():null},fn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},fn.unix=function(){return Math.floor(this.valueOf()/1e3)},fn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},fn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},fn.year=je,fn.isLeapYear=function(){return xe(this.year())},fn.weekYear=function(e){return on.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},fn.isoWeekYear=function(e){return on.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},fn.quarter=fn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},fn.month=Fe,fn.daysInMonth=function(){return He(this.year(),this.month())},fn.week=fn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},fn.isoWeek=fn.isoWeeks=function(e){var t=Ve(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},fn.weeksInYear=function(){var e=this.localeData()._week;return qe(this.year(),e.dow,e.doy)},fn.isoWeeksInYear=function(){return qe(this.year(),1,4)},fn.date=an,fn.day=fn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},fn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},fn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},fn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},fn.hour=fn.hours=ot,fn.minute=fn.minutes=sn,fn.second=fn.seconds=ln,fn.millisecond=fn.milliseconds=cn,fn.utcOffset=function(e,t,n){var r,a=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=zt(se,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(r=Wt(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),a!==e&&(!t||this._changeInProgress?$t(this,qt(e-a,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,o.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?a:Wt(this)},fn.utc=function(e){return this.utcOffset(0,e)},fn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Wt(this),"m")),this},fn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=zt(ie,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},fn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?St(e).utcOffset():0,(this.utcOffset()-e)%60==0)},fn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},fn.isLocal=function(){return!!this.isValid()&&!this._isUTC},fn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},fn.isUtc=Ut,fn.isUTC=Ut,fn.zoneAbbr=function(){return this._isUTC?"UTC":""},fn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},fn.dates=T("dates accessor is deprecated. Use date instead.",an),fn.months=T("months accessor is deprecated. Use month instead",Fe),fn.years=T("years accessor is deprecated. Use year instead",je),fn.zone=T("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}),fn.isDSTShifted=T("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!s(this._isDSTShifted))return this._isDSTShifted;var e={};if(g(e,this),(e=Dt(e))._a){var t=e._isUTC?m(e._a):St(e._a);this._isDSTShifted=this.isValid()&&k(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted});var _n=C.prototype;function hn(e,t,n,r){var o=ft(),a=m().set(r,t);return o[n](a,e)}function pn(e,t,n){if(u(e)&&(t=e,e=void 0),e=e||"",null!=t)return hn(e,t,n,"month");var r,o=[];for(r=0;r<12;r++)o[r]=hn(e,r,n,"month");return o}function yn(e,t,n,r){"boolean"==typeof e?(u(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,u(t)&&(n=t,t=void 0),t=t||"");var o,a=ft(),i=e?a._week.dow:0;if(null!=n)return hn(t,(n+i)%7,r,"day");var s=[];for(o=0;o<7;o++)s[o]=hn(t,(o+i)%7,r,"day");return s}_n.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return S(r)?r.call(t,n):r},_n.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])},_n.invalidDate=function(){return this._invalidDate},_n.ordinal=function(e){return this._ordinal.replace("%d",e)},_n.preparse=mn,_n.postformat=mn,_n.relativeTime=function(e,t,n,r){var o=this._relativeTime[n];return S(o)?o(e,t,n,r):o.replace(/%d/i,e)},_n.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return S(n)?n(t):n.replace(/%s/i,t)},_n.set=function(e){var t,n;for(n in e)S(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},_n.months=function(e,t){return e?a(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Oe).test(t)?"format":"standalone"][e.month()]:a(this._months)?this._months:this._months.standalone},_n.monthsShort=function(e,t){return e?a(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Oe.test(t)?"format":"standalone"][e.month()]:a(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},_n.monthsParse=function(e,t,n){var r,o,a;if(this._monthsParseExact)return function(e,t,n){var r,o,a,i=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)a=m([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(a,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(a,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(o=De.call(this._shortMonthsParse,i))?o:null:-1!==(o=De.call(this._longMonthsParse,i))?o:null:"MMM"===t?-1!==(o=De.call(this._shortMonthsParse,i))?o:-1!==(o=De.call(this._longMonthsParse,i))?o:null:-1!==(o=De.call(this._longMonthsParse,i))?o:-1!==(o=De.call(this._shortMonthsParse,i))?o:null}.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(o=m([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(o,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(o,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(a="^"+this.months(o,"")+"|^"+this.monthsShort(o,""),this._monthsParse[r]=new RegExp(a.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},_n.monthsRegex=function(e){return this._monthsParseExact?(c(this,"_monthsRegex")||Re.call(this),e?this._monthsStrictRegex:this._monthsRegex):(c(this,"_monthsRegex")||(this._monthsRegex=ze),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},_n.monthsShortRegex=function(e){return this._monthsParseExact?(c(this,"_monthsRegex")||Re.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(c(this,"_monthsShortRegex")||(this._monthsShortRegex=Ie),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},_n.week=function(e){return Ve(e,this._week.dow,this._week.doy).week},_n.firstDayOfYear=function(){return this._week.doy},_n.firstDayOfWeek=function(){return this._week.dow},_n.weekdays=function(e,t){return e?a(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]:a(this._weekdays)?this._weekdays:this._weekdays.standalone},_n.weekdaysMin=function(e){return e?this._weekdaysMin[e.day()]:this._weekdaysMin},_n.weekdaysShort=function(e){return e?this._weekdaysShort[e.day()]:this._weekdaysShort},_n.weekdaysParse=function(e,t,n){var r,o,a;if(this._weekdaysParseExact)return function(e,t,n){var r,o,a,i=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)a=m([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(a,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(a,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(a,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(o=De.call(this._weekdaysParse,i))?o:null:"ddd"===t?-1!==(o=De.call(this._shortWeekdaysParse,i))?o:null:-1!==(o=De.call(this._minWeekdaysParse,i))?o:null:"dddd"===t?-1!==(o=De.call(this._weekdaysParse,i))?o:-1!==(o=De.call(this._shortWeekdaysParse,i))?o:-1!==(o=De.call(this._minWeekdaysParse,i))?o:null:"ddd"===t?-1!==(o=De.call(this._shortWeekdaysParse,i))?o:-1!==(o=De.call(this._weekdaysParse,i))?o:-1!==(o=De.call(this._minWeekdaysParse,i))?o:null:-1!==(o=De.call(this._minWeekdaysParse,i))?o:-1!==(o=De.call(this._weekdaysParse,i))?o:-1!==(o=De.call(this._shortWeekdaysParse,i))?o:null}.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(o=m([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(o,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(o,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(o,"").replace(".",".?")+"$","i")),this._weekdaysParse[r]||(a="^"+this.weekdays(o,"")+"|^"+this.weekdaysShort(o,"")+"|^"+this.weekdaysMin(o,""),this._weekdaysParse[r]=new RegExp(a.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},_n.weekdaysRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||Ze.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(c(this,"_weekdaysRegex")||(this._weekdaysRegex=$e),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},_n.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||Ze.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(c(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Qe),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},_n.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||Ze.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(c(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Xe),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},_n.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},_n.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},dt("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1===w(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}}),o.lang=T("moment.lang is deprecated. Use moment.locale instead.",dt),o.langData=T("moment.langData is deprecated. Use moment.localeData instead.",ft);var gn=Math.abs;function vn(e,t,n,r){var o=qt(t,n);return e._milliseconds+=r*o._milliseconds,e._days+=r*o._days,e._months+=r*o._months,e._bubble()}function Mn(e){return e<0?Math.floor(e):Math.ceil(e)}function bn(e){return 4800*e/146097}function Ln(e){return 146097*e/4800}function wn(e){return function(){return this.as(e)}}var kn=wn("ms"),Yn=wn("s"),Tn=wn("m"),xn=wn("h"),Dn=wn("d"),jn=wn("w"),Sn=wn("M"),En=wn("y");function Cn(e){return function(){return this.isValid()?this._data[e]:NaN}}var Hn=Cn("milliseconds"),On=Cn("seconds"),Pn=Cn("minutes"),Nn=Cn("hours"),An=Cn("days"),Fn=Cn("months"),In=Cn("years"),zn=Math.round,Rn={ss:44,s:45,m:45,h:22,d:26,M:11},Wn=Math.abs;function Un(e){return(e>0)-(e<0)||+e}function Bn(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n=Wn(this._milliseconds)/1e3,r=Wn(this._days),o=Wn(this._months);e=L(n/60),t=L(e/60),n%=60,e%=60;var a=L(o/12),i=o%=12,s=r,u=t,l=e,d=n?n.toFixed(3).replace(/\.?0+$/,""):"",c=this.asSeconds();if(!c)return"P0D";var f=c<0?"-":"",m=Un(this._months)!==Un(c)?"-":"",_=Un(this._days)!==Un(c)?"-":"",h=Un(this._milliseconds)!==Un(c)?"-":"";return f+"P"+(a?m+a+"Y":"")+(i?m+i+"M":"")+(s?_+s+"D":"")+(u||l||d?"T":"")+(u?h+u+"H":"")+(l?h+l+"M":"")+(d?h+d+"S":"")}var Vn=Pt.prototype;return Vn.isValid=function(){return this._isValid},Vn.abs=function(){var e=this._data;return this._milliseconds=gn(this._milliseconds),this._days=gn(this._days),this._months=gn(this._months),e.milliseconds=gn(e.milliseconds),e.seconds=gn(e.seconds),e.minutes=gn(e.minutes),e.hours=gn(e.hours),e.months=gn(e.months),e.years=gn(e.years),this},Vn.add=function(e,t){return vn(this,e,t,1)},Vn.subtract=function(e,t){return vn(this,e,t,-1)},Vn.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=P(e))||"year"===e)return t=this._days+r/864e5,n=this._months+bn(t),"month"===e?n:n/12;switch(t=this._days+Math.round(Ln(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},Vn.asMilliseconds=kn,Vn.asSeconds=Yn,Vn.asMinutes=Tn,Vn.asHours=xn,Vn.asDays=Dn,Vn.asWeeks=jn,Vn.asMonths=Sn,Vn.asYears=En,Vn.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*w(this._months/12):NaN},Vn._bubble=function(){var e,t,n,r,o,a=this._milliseconds,i=this._days,s=this._months,u=this._data;return a>=0&&i>=0&&s>=0||a<=0&&i<=0&&s<=0||(a+=864e5*Mn(Ln(s)+i),i=0,s=0),u.milliseconds=a%1e3,e=L(a/1e3),u.seconds=e%60,t=L(e/60),u.minutes=t%60,n=L(t/60),u.hours=n%24,i+=L(n/24),o=L(bn(i)),s+=o,i-=Mn(Ln(o)),r=L(s/12),s%=12,u.days=i,u.months=s,u.years=r,this},Vn.clone=function(){return qt(this)},Vn.get=function(e){return e=P(e),this.isValid()?this[e+"s"]():NaN},Vn.milliseconds=Hn,Vn.seconds=On,Vn.minutes=Pn,Vn.hours=Nn,Vn.days=An,Vn.weeks=function(){return L(this.days()/7)},Vn.months=Fn,Vn.years=In,Vn.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),n=function(e,t,n){var r=qt(e).abs(),o=zn(r.as("s")),a=zn(r.as("m")),i=zn(r.as("h")),s=zn(r.as("d")),u=zn(r.as("M")),l=zn(r.as("y")),d=o<=Rn.ss&&["s",o]||o<Rn.s&&["ss",o]||a<=1&&["m"]||a<Rn.m&&["mm",a]||i<=1&&["h"]||i<Rn.h&&["hh",i]||s<=1&&["d"]||s<Rn.d&&["dd",s]||u<=1&&["M"]||u<Rn.M&&["MM",u]||l<=1&&["y"]||["yy",l];return d[2]=t,d[3]=+e>0,d[4]=n,function(e,t,n,r,o){return o.relativeTime(t||1,!!n,e,r)}.apply(null,d)}(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)},Vn.toISOString=Bn,Vn.toString=Bn,Vn.toJSON=Bn,Vn.locale=en,Vn.localeData=nn,Vn.toIsoString=T("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Bn),Vn.lang=tn,B("X",0,0,"unix"),B("x",0,0,"valueOf"),de("x",ae),de("X",/[+-]?\d+(\.\d{1,3})?/),_e("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),_e("x",function(e,t,n){n._d=new Date(w(e))}),o.version="2.22.1",t=St,o.fn=fn,o.min=function(){return Ht("isBefore",[].slice.call(arguments,0))},o.max=function(){return Ht("isAfter",[].slice.call(arguments,0))},o.now=function(){return Date.now?Date.now():+new Date},o.utc=m,o.unix=function(e){return St(1e3*e)},o.months=function(e,t){return pn(e,t,"months")},o.isDate=l,o.locale=dt,o.invalid=p,o.duration=qt,o.isMoment=b,o.weekdays=function(e,t,n){return yn(e,t,n,"weekdays")},o.parseZone=function(){return St.apply(null,arguments).parseZone()},o.localeData=ft,o.isDuration=Nt,o.monthsShort=function(e,t){return pn(e,t,"monthsShort")},o.weekdaysMin=function(e,t,n){return yn(e,t,n,"weekdaysMin")},o.defineLocale=ct,o.updateLocale=function(e,t){if(null!=t){var n,r,o=at;null!=(r=lt(e))&&(o=r._config),t=E(o,t),(n=new C(t)).parentLocale=it[e],it[e]=n,dt(e)}else null!=it[e]&&(null!=it[e].parentLocale?it[e]=it[e].parentLocale:null!=it[e]&&delete it[e]);return it[e]},o.locales=function(){return x(it)},o.weekdaysShort=function(e,t,n){return yn(e,t,n,"weekdaysShort")},o.normalizeUnits=P,o.relativeTimeRounding=function(e){return void 0===e?zn:"function"==typeof e&&(zn=e,!0)},o.relativeTimeThreshold=function(e,t){return void 0!==Rn[e]&&(void 0===t?Rn[e]:(Rn[e]=t,"s"===e&&(Rn.ss=t-1),!0))},o.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},o.prototype=fn,o.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"YYYY-[W]WW",MONTH:"YYYY-MM"},o}()}).call(this,n("./node_modules/webpack/buildin/module.js")(e))},"./node_modules/object-assign/index.js":function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,s=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var l in n=Object(arguments[u]))o.call(n,l)&&(s[l]=n[l]);if(r){i=r(n);for(var d=0;d<i.length;d++)a.call(n,i[d])&&(s[i[d]]=n[i[d]])}}return s}},"./node_modules/prop-types/factoryWithThrowingShims.js":function(e,t,n){"use strict";var r=n("./node_modules/fbjs/lib/emptyFunction.js"),o=n("./node_modules/fbjs/lib/invariant.js"),a=n("./node_modules/prop-types/lib/ReactPropTypesSecret.js");e.exports=function(){function e(e,t,n,r,i,s){s!==a&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},"./node_modules/prop-types/index.js":function(e,t,n){e.exports=n("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./node_modules/react-dom/cjs/react-dom.production.min.js":function(e,t,n){"use strict";
/** @license React v16.3.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n("./node_modules/fbjs/lib/invariant.js"),o=n("./node_modules/react/index.js"),a=n("./node_modules/fbjs/lib/ExecutionEnvironment.js"),i=n("./node_modules/object-assign/index.js"),s=n("./node_modules/fbjs/lib/emptyFunction.js"),u=n("./node_modules/fbjs/lib/getActiveElement.js"),l=n("./node_modules/fbjs/lib/shallowEqual.js"),d=n("./node_modules/fbjs/lib/containsNode.js"),c=n("./node_modules/fbjs/lib/emptyObject.js");function f(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||f("227");var m={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,a,i,s,u){(function(e,t,n,r,o,a,i,s,u){this._hasCaughtError=!1,this._caughtError=null;var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(m,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,a,i,s,u){if(m.invokeGuardedCallback.apply(this,arguments),m.hasCaughtError()){var l=m.clearCaughtError();m._hasRethrowError||(m._hasRethrowError=!0,m._rethrowError=l)}},rethrowCaughtError:function(){return function(){if(m._hasRethrowError){var e=m._rethrowError;throw m._rethrowError=null,m._hasRethrowError=!1,e}}.apply(m,arguments)},hasCaughtError:function(){return m._hasCaughtError},clearCaughtError:function(){if(m._hasCaughtError){var e=m._caughtError;return m._caughtError=null,m._hasCaughtError=!1,e}f("198")}};var _=null,h={};function p(){if(_)for(var e in h){var t=h[e],n=_.indexOf(e);if(-1<n||f("96",e),!g[n])for(var r in t.extractEvents||f("97",e),g[n]=t,n=t.eventTypes){var o=void 0,a=n[r],i=t,s=r;v.hasOwnProperty(s)&&f("99",s),v[s]=a;var u=a.phasedRegistrationNames;if(u){for(o in u)u.hasOwnProperty(o)&&y(u[o],i,s);o=!0}else a.registrationName?(y(a.registrationName,i,s),o=!0):o=!1;o||f("98",r,e)}}}function y(e,t,n){M[e]&&f("100",e),M[e]=t,b[e]=t.eventTypes[n].dependencies}var g=[],v={},M={},b={};function L(e){_&&f("101"),_=Array.prototype.slice.call(e),p()}function w(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&f("102",t),h[t]=r,n=!0)}n&&p()}var k=Object.freeze({plugins:g,eventNameDispatchConfigs:v,registrationNameModules:M,registrationNameDependencies:b,possibleRegistrationNames:null,injectEventPluginOrder:L,injectEventPluginsByName:w}),Y=null,T=null,x=null;function D(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=x(r),m.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function j(e,t){return null==t&&f("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function S(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var E=null;function C(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)D(e,t,n[o],r[o]);else n&&D(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function H(e){return C(e,!0)}function O(e){return C(e,!1)}var P={injectEventPluginOrder:L,injectEventPluginsByName:w};function N(e,t){var n=e.stateNode;if(!n)return null;var r=Y(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&f("231",t,typeof n),n)}function A(e,t){null!==e&&(E=j(E,e)),e=E,E=null,e&&(S(e,t?H:O),E&&f("95"),m.rethrowCaughtError())}function F(e,t,n,r){for(var o=null,a=0;a<g.length;a++){var i=g[a];i&&(i=i.extractEvents(e,t,n,r))&&(o=j(o,i))}A(o,!1)}var I=Object.freeze({injection:P,getListener:N,runEventsInBatch:A,runExtractedEventsInBatch:F}),z=Math.random().toString(36).slice(2),R="__reactInternalInstance$"+z,W="__reactEventHandlers$"+z;function U(e){if(e[R])return e[R];for(;!e[R];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[R]).tag||6===e.tag?e:null}function B(e){if(5===e.tag||6===e.tag)return e.stateNode;f("33")}function V(e){return e[W]||null}var q=Object.freeze({precacheFiberNode:function(e,t){t[R]=e},getClosestInstanceFromNode:U,getInstanceFromNode:function(e){return!(e=e[R])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:B,getFiberCurrentPropsFromNode:V,updateFiberProps:function(e,t){e[W]=t}});function G(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function J(e,t,n){for(var r=[];e;)r.push(e),e=G(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function K(e,t,n){(t=N(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=j(n._dispatchListeners,t),n._dispatchInstances=j(n._dispatchInstances,e))}function $(e){e&&e.dispatchConfig.phasedRegistrationNames&&J(e._targetInst,K,e)}function Q(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;J(t=t?G(t):null,K,e)}}function X(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=N(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=j(n._dispatchListeners,t),n._dispatchInstances=j(n._dispatchInstances,e))}function Z(e){e&&e.dispatchConfig.registrationName&&X(e._targetInst,null,e)}function ee(e){S(e,$)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,a=r,i=0,s=o;s;s=G(s))i++;s=0;for(var u=a;u;u=G(u))s++;for(;0<i-s;)o=G(o),i--;for(;0<s-i;)a=G(a),s--;for(;i--;){if(o===a||o===a.alternate)break e;o=G(o),a=G(a)}o=null}else o=null;for(a=o,o=[];n&&n!==a&&(null===(i=n.alternate)||i!==a);)o.push(n),n=G(n);for(n=[];r&&r!==a&&(null===(i=r.alternate)||i!==a);)n.push(r),r=G(r);for(r=0;r<o.length;r++)X(o[r],"bubbled",e);for(e=n.length;0<e--;)X(n[e],"captured",t)}var ne=Object.freeze({accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){S(e,Q)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){S(e,Z)}}),re=null;function oe(){return!re&&a.canUseDOM&&(re="textContent"in document.documentElement?"textContent":"innerText"),re}var ae={_root:null,_startText:null,_fallbackText:null};function ie(){if(ae._fallbackText)return ae._fallbackText;var e,t,n=ae._startText,r=n.length,o=se(),a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return ae._fallbackText=o.slice(e,1<t?1-t:void 0),ae._fallbackText}function se(){return"value"in ae._root?ae._root.value:ae._root[oe()]}var ue="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),le={type:null,target:null,currentTarget:s.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function de(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?s.thatReturnsTrue:s.thatReturnsFalse,this.isPropagationStopped=s.thatReturnsFalse,this}function ce(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function fe(e){e instanceof this||f("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function me(e){e.eventPool=[],e.getPooled=ce,e.release=fe}i(de.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=s.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=s.thatReturnsTrue)},persist:function(){this.isPersistent=s.thatReturnsTrue},isPersistent:s.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<ue.length;t++)this[ue[t]]=null}}),de.Interface=le,de.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,me(n),n},me(de);var _e=de.extend({data:null}),he=de.extend({data:null}),pe=[9,13,27,32],ye=a.canUseDOM&&"CompositionEvent"in window,ge=null;a.canUseDOM&&"documentMode"in document&&(ge=document.documentMode);var ve=a.canUseDOM&&"TextEvent"in window&&!ge,Me=a.canUseDOM&&(!ye||ge&&8<ge&&11>=ge),be=String.fromCharCode(32),Le={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},we=!1;function ke(e,t){switch(e){case"topKeyUp":return-1!==pe.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function Ye(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Te=!1;var xe={eventTypes:Le,extractEvents:function(e,t,n,r){var o=void 0,a=void 0;if(ye)e:{switch(e){case"topCompositionStart":o=Le.compositionStart;break e;case"topCompositionEnd":o=Le.compositionEnd;break e;case"topCompositionUpdate":o=Le.compositionUpdate;break e}o=void 0}else Te?ke(e,n)&&(o=Le.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(o=Le.compositionStart);return o?(Me&&(Te||o!==Le.compositionStart?o===Le.compositionEnd&&Te&&(a=ie()):(ae._root=r,ae._startText=se(),Te=!0)),o=_e.getPooled(o,t,n,r),a?o.data=a:null!==(a=Ye(n))&&(o.data=a),ee(o),a=o):a=null,(e=ve?function(e,t){switch(e){case"topCompositionEnd":return Ye(t);case"topKeyPress":return 32!==t.which?null:(we=!0,be);case"topTextInput":return(e=t.data)===be&&we?null:e;default:return null}}(e,n):function(e,t){if(Te)return"topCompositionEnd"===e||!ye&&ke(e,t)?(e=ie(),ae._root=null,ae._startText=null,ae._fallbackText=null,Te=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return Me?null:t.data;default:return null}}(e,n))?((t=he.getPooled(Le.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===a?t:null===t?a:[a,t]}},De=null,je={injectFiberControlledHostComponent:function(e){De=e}},Se=null,Ee=null;function Ce(e){if(e=T(e)){De&&"function"==typeof De.restoreControlledState||f("194");var t=Y(e.stateNode);De.restoreControlledState(e.stateNode,e.type,t)}}function He(e){Se?Ee?Ee.push(e):Ee=[e]:Se=e}function Oe(){return null!==Se||null!==Ee}function Pe(){if(Se){var e=Se,t=Ee;if(Ee=Se=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}var Ne=Object.freeze({injection:je,enqueueStateRestore:He,needsStateRestore:Oe,restoreStateIfNeeded:Pe});function Ae(e,t){return e(t)}function Fe(e,t,n){return e(t,n)}function Ie(){}var ze=!1;function Re(e,t){if(ze)return e(t);ze=!0;try{return Ae(e,t)}finally{ze=!1,Oe()&&(Ie(),Pe())}}var We={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ue(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!We[e.type]:"textarea"===t}function Be(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Ve(e,t){return!(!a.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function qe(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ge(e){e._valueTracker||(e._valueTracker=function(e){var t=qe(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function Je(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=qe(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ke=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,$e="function"==typeof Symbol&&Symbol.for,Qe=$e?Symbol.for("react.element"):60103,Xe=$e?Symbol.for("react.call"):60104,Ze=$e?Symbol.for("react.return"):60105,et=$e?Symbol.for("react.portal"):60106,tt=$e?Symbol.for("react.fragment"):60107,nt=$e?Symbol.for("react.strict_mode"):60108,rt=$e?Symbol.for("react.provider"):60109,ot=$e?Symbol.for("react.context"):60110,at=$e?Symbol.for("react.async_mode"):60111,it=$e?Symbol.for("react.forward_ref"):60112,st="function"==typeof Symbol&&Symbol.iterator;function ut(e){return null===e||void 0===e?null:"function"==typeof(e=st&&e[st]||e["@@iterator"])?e:null}function lt(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case tt:return"ReactFragment";case et:return"ReactPortal";case Xe:return"ReactCall";case Ze:return"ReactReturn"}if("object"==typeof e&&null!==e)switch(e.$$typeof){case it:return""!==(e=e.render.displayName||e.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function dt(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=lt(e),a=null;n&&(a=lt(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":a?" (created by "+a+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var ct=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ft={},mt={};function _t(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new _t(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new _t(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new _t(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){ht[e]=new _t(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new _t(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new _t(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){ht[e]=new _t(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new _t(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){ht[e]=new _t(e,5,!1,e.toLowerCase(),null)});var pt=/[\-:]([a-z])/g;function yt(e){return e[1].toUpperCase()}function gt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!mt.hasOwnProperty(e)||!ft.hasOwnProperty(e)&&(ct.test(e)?mt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function vt(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Mt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Yt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function bt(e,t){null!=(t=t.checked)&&gt(e,"checked",t,!1)}function Lt(e,t){bt(e,t);var n=Yt(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?kt(e,t.type,n):t.hasOwnProperty("defaultValue")&&kt(e,t.type,Yt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function wt(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function kt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Yt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(pt,yt);ht[t]=new _t(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(pt,yt);ht[t]=new _t(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(pt,yt);ht[t]=new _t(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),ht.tabIndex=new _t("tabIndex",1,!1,"tabindex",null);var Tt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function xt(e,t,n){return(e=de.getPooled(Tt.change,e,t,n)).type="change",He(n),ee(e),e}var Dt=null,jt=null;function St(e){A(e,!1)}function Et(e){if(Je(B(e)))return e}function Ct(e,t){if("topChange"===e)return t}var Ht=!1;function Ot(){Dt&&(Dt.detachEvent("onpropertychange",Pt),jt=Dt=null)}function Pt(e){"value"===e.propertyName&&Et(jt)&&Re(St,e=xt(jt,e,Be(e)))}function Nt(e,t,n){"topFocus"===e?(Ot(),jt=n,(Dt=t).attachEvent("onpropertychange",Pt)):"topBlur"===e&&Ot()}function At(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return Et(jt)}function Ft(e,t){if("topClick"===e)return Et(t)}function It(e,t){if("topInput"===e||"topChange"===e)return Et(t)}a.canUseDOM&&(Ht=Ve("input")&&(!document.documentMode||9<document.documentMode));var zt={eventTypes:Tt,_isInputEventSupported:Ht,extractEvents:function(e,t,n,r){var o=t?B(t):window,a=void 0,i=void 0,s=o.nodeName&&o.nodeName.toLowerCase();if("select"===s||"input"===s&&"file"===o.type?a=Ct:Ue(o)?Ht?a=It:(a=At,i=Nt):(s=o.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=Ft),a&&(a=a(e,t)))return xt(a,n,r);i&&i(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&kt(o,"number",o.value)}},Rt=de.extend({view:null,detail:null}),Wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ut(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Wt[e])&&!!t[e]}function Bt(){return Ut}var Vt=Rt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Bt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),qt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Gt={eventTypes:qt,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?U(t):null):e=null,e===t)return null;var a=null==e?o:B(e);o=null==t?o:B(t);var i=Vt.getPooled(qt.mouseLeave,e,n,r);return i.type="mouseleave",i.target=a,i.relatedTarget=o,(n=Vt.getPooled(qt.mouseEnter,t,n,r)).type="mouseenter",n.target=o,n.relatedTarget=a,te(i,n,e,t),[i,n]}};function Jt(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Kt(e){return!!(e=e._reactInternalFiber)&&2===Jt(e)}function $t(e){2!==Jt(e)&&f("188")}function Qt(e){var t=e.alternate;if(!t)return 3===(t=Jt(e))&&f("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,a=o?o.alternate:null;if(!o||!a)break;if(o.child===a.child){for(var i=o.child;i;){if(i===n)return $t(o),e;if(i===r)return $t(o),t;i=i.sibling}f("188")}if(n.return!==r.return)n=o,r=a;else{i=!1;for(var s=o.child;s;){if(s===n){i=!0,n=o,r=a;break}if(s===r){i=!0,r=o,n=a;break}s=s.sibling}if(!i){for(s=a.child;s;){if(s===n){i=!0,n=a,r=o;break}if(s===r){i=!0,r=a,n=o;break}s=s.sibling}i||f("189")}}n.alternate!==r&&f("190")}return 3!==n.tag&&f("188"),n.stateNode.current===n?e:t}function Xt(e){if(!(e=Qt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var Zt=de.extend({animationName:null,elapsedTime:null,pseudoElement:null}),en=de.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),tn=Rt.extend({relatedTarget:null});function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var rn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},on={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},an=Rt.extend({key:function(e){if(e.key){var t=rn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?on[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Bt,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),sn=Vt.extend({dataTransfer:null}),un=Rt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Bt}),ln=de.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),dn=Vt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),cn={},fn={};function mn(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n;t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n="top"+n],isInteractive:t},cn[e]=t,fn[n]=t}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){mn(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){mn(e,!1)});var _n={eventTypes:cn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=fn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=fn[e];if(!o)return null;switch(e){case"topKeyPress":if(0===nn(n))return null;case"topKeyDown":case"topKeyUp":e=an;break;case"topBlur":case"topFocus":e=tn;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Vt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=sn;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=un;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Zt;break;case"topTransitionEnd":e=ln;break;case"topScroll":e=Rt;break;case"topWheel":e=dn;break;case"topCopy":case"topCut":case"topPaste":e=en;break;default:e=de}return ee(t=e.getPooled(o,t,n,r)),t}},hn=_n.isInteractiveTopLevelEventType,pn=[];function yn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=U(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],F(e.topLevelType,t,e.nativeEvent,Be(e.nativeEvent))}var gn=!0;function vn(e){gn=!!e}function Mn(e,t,n){if(!n)return null;e=(hn(e)?Ln:wn).bind(null,e),n.addEventListener(t,e,!1)}function bn(e,t,n){if(!n)return null;e=(hn(e)?Ln:wn).bind(null,e),n.addEventListener(t,e,!0)}function Ln(e,t){Fe(wn,e,t)}function wn(e,t){if(gn){var n=Be(t);if(null!==(n=U(n))&&"number"==typeof n.tag&&2!==Jt(n)&&(n=null),pn.length){var r=pn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Re(yn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>pn.length&&pn.push(e)}}}var kn=Object.freeze({get _enabled(){return gn},setEnabled:vn,isEnabled:function(){return gn},trapBubbledEvent:Mn,trapCapturedEvent:bn,dispatchEvent:wn});function Yn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var Tn={animationend:Yn("Animation","AnimationEnd"),animationiteration:Yn("Animation","AnimationIteration"),animationstart:Yn("Animation","AnimationStart"),transitionend:Yn("Transition","TransitionEnd")},xn={},Dn={};function jn(e){if(xn[e])return xn[e];if(!Tn[e])return e;var t,n=Tn[e];for(t in n)if(n.hasOwnProperty(t)&&t in Dn)return xn[e]=n[t];return e}a.canUseDOM&&(Dn=document.createElement("div").style,"AnimationEvent"in window||(delete Tn.animationend.animation,delete Tn.animationiteration.animation,delete Tn.animationstart.animation),"TransitionEvent"in window||delete Tn.transitionend.transition);var Sn={topAnimationEnd:jn("animationend"),topAnimationIteration:jn("animationiteration"),topAnimationStart:jn("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:jn("transitionend"),topWheel:"wheel"},En={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Cn={},Hn=0,On="_reactListenersID"+(""+Math.random()).slice(2);function Pn(e){return Object.prototype.hasOwnProperty.call(e,On)||(e[On]=Hn++,Cn[e[On]]={}),Cn[e[On]]}function Nn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function An(e,t){var n,r=Nn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Nn(r)}}function Fn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var In=a.canUseDOM&&"documentMode"in document&&11>=document.documentMode,zn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},Rn=null,Wn=null,Un=null,Bn=!1;function Vn(e,t){if(Bn||null==Rn||Rn!==u())return null;var n=Rn;return"selectionStart"in n&&Fn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Un&&l(Un,n)?null:(Un=n,(e=de.getPooled(zn.select,Wn,e,t)).type="select",e.target=Rn,ee(e),e)}var qn={eventTypes:zn,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=Pn(a),o=b.onSelect;for(var i=0;i<o.length;i++){var s=o[i];if(!a.hasOwnProperty(s)||!a[s]){a=!1;break e}}a=!0}o=!a}if(o)return null;switch(a=t?B(t):window,e){case"topFocus":(Ue(a)||"true"===a.contentEditable)&&(Rn=a,Wn=t,Un=null);break;case"topBlur":Un=Wn=Rn=null;break;case"topMouseDown":Bn=!0;break;case"topContextMenu":case"topMouseUp":return Bn=!1,Vn(n,r);case"topSelectionChange":if(In)break;case"topKeyDown":case"topKeyUp":return Vn(n,r)}return null}};function Gn(e,t,n,r){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Jn(e,t,n){var r=e.alternate;return null===r?((r=new Gn(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Kn(e,t,n){var r=e.type,o=e.key;e=e.props;var a=void 0;if("function"==typeof r)a=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)a=5;else switch(r){case tt:return $n(e.children,t,n,o);case at:a=11,t|=3;break;case nt:a=11,t|=2;break;case Xe:a=7;break;case Ze:a=9;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case rt:a=13;break;case ot:a=12;break;case it:a=14;break;default:if("number"==typeof r.tag)return(t=r).pendingProps=e,t.expirationTime=n,t;f("130",null==r?r:typeof r,"")}else f("130",null==r?r:typeof r,"")}return(t=new Gn(a,e,o,t)).type=r,t.expirationTime=n,t}function $n(e,t,n,r){return(e=new Gn(10,e,r,t)).expirationTime=n,e}function Qn(e,t,n){return(e=new Gn(6,e,null,t)).expirationTime=n,e}function Xn(e,t,n){return(t=new Gn(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}P.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),Y=q.getFiberCurrentPropsFromNode,T=q.getInstanceFromNode,x=q.getNodeFromInstance,P.injectEventPluginsByName({SimpleEventPlugin:_n,EnterLeaveEventPlugin:Gt,ChangeEventPlugin:zt,SelectEventPlugin:qn,BeforeInputEventPlugin:xe});var Zn=null,er=null;function tr(e){return function(t){try{return e(t)}catch(e){}}}function nr(e){"function"==typeof Zn&&Zn(e)}function rr(e){"function"==typeof er&&er(e)}function or(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function ar(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}new Set;var ir=void 0,sr=void 0;function ur(e){ir=sr=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=or(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=or(null)):e=null,ir=n,sr=e!==n?e:null}function lr(e,t){ur(e),e=ir;var n=sr;null===n?ar(e,t):null===e.last||null===n.last?(ar(e,t),ar(n,t)):(ar(e,t),n.last=t)}function dr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function cr(e,t,n,r,o,a){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var s=!0,u=n.first,l=!1;null!==u;){var d=u.expirationTime;if(d>a){var c=n.expirationTime;(0===c||c>d)&&(n.expirationTime=d),l||(l=!0,n.baseState=e)}else l||(n.first=u.next,null===n.first&&(n.last=null)),u.isReplace?(e=dr(u,r,e,o),s=!0):(d=dr(u,r,e,o))&&(e=s?i({},e,d):i(e,d),s=!1),u.isForced&&(n.hasForceUpdate=!0),null!==u.callback&&(null===(d=n.callbackList)&&(d=n.callbackList=[]),d.push(u)),null!==u.capturedValue&&(null===(d=n.capturedValues)?n.capturedValues=[u.capturedValue]:d.push(u.capturedValue));u=u.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),l||(n.baseState=e),e}function fr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],o=r.callback;r.callback=null,"function"!=typeof o&&f("191",o),o.call(t)}}var mr=Array.isArray;function _r(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&f("110"),r=n.stateNode),r||f("147",e);var o=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===c?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&f("148"),n._owner||f("254",e)}return e}function hr(e,t){"textarea"!==e.type&&f("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function pr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Jn(e,t,n)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function i(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Qn(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function u(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=_r(e,t,n),r.return=e,r):((r=Kn(n,e.mode,r)).ref=_r(e,t,n),r.return=e,r)}function l(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Xn(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function d(e,t,n,r,a){return null===t||10!==t.tag?((t=$n(n,e.mode,r,a)).return=e,t):((t=o(t,n,r)).return=e,t)}function c(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Qn(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Qe:return(n=Kn(t,e.mode,n)).ref=_r(e,null,t),n.return=e,n;case et:return(t=Xn(t,e.mode,n)).return=e,t}if(mr(t)||ut(t))return(t=$n(t,e.mode,n,null)).return=e,t;hr(e,t)}return null}function m(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Qe:return n.key===o?n.type===tt?d(e,t,n.props.children,r,o):u(e,t,n,r):null;case et:return n.key===o?l(e,t,n,r):null}if(mr(n)||ut(n))return null!==o?null:d(e,t,n,r,null);hr(e,n)}return null}function _(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Qe:return e=e.get(null===r.key?n:r.key)||null,r.type===tt?d(t,e,r.props.children,o,r.key):u(t,e,r,o);case et:return l(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(mr(r)||ut(r))return d(t,e=e.get(n)||null,r,o,null);hr(t,r)}return null}function h(o,i,s,u){for(var l=null,d=null,f=i,h=i=0,p=null;null!==f&&h<s.length;h++){f.index>h?(p=f,f=null):p=f.sibling;var y=m(o,f,s[h],u);if(null===y){null===f&&(f=p);break}e&&f&&null===y.alternate&&t(o,f),i=a(y,i,h),null===d?l=y:d.sibling=y,d=y,f=p}if(h===s.length)return n(o,f),l;if(null===f){for(;h<s.length;h++)(f=c(o,s[h],u))&&(i=a(f,i,h),null===d?l=f:d.sibling=f,d=f);return l}for(f=r(o,f);h<s.length;h++)(p=_(f,o,h,s[h],u))&&(e&&null!==p.alternate&&f.delete(null===p.key?h:p.key),i=a(p,i,h),null===d?l=p:d.sibling=p,d=p);return e&&f.forEach(function(e){return t(o,e)}),l}function p(o,i,s,u){var l=ut(s);"function"!=typeof l&&f("150"),null==(s=l.call(s))&&f("151");for(var d=l=null,h=i,p=i=0,y=null,g=s.next();null!==h&&!g.done;p++,g=s.next()){h.index>p?(y=h,h=null):y=h.sibling;var v=m(o,h,g.value,u);if(null===v){h||(h=y);break}e&&h&&null===v.alternate&&t(o,h),i=a(v,i,p),null===d?l=v:d.sibling=v,d=v,h=y}if(g.done)return n(o,h),l;if(null===h){for(;!g.done;p++,g=s.next())null!==(g=c(o,g.value,u))&&(i=a(g,i,p),null===d?l=g:d.sibling=g,d=g);return l}for(h=r(o,h);!g.done;p++,g=s.next())null!==(g=_(h,o,p,g.value,u))&&(e&&null!==g.alternate&&h.delete(null===g.key?p:g.key),i=a(g,i,p),null===d?l=g:d.sibling=g,d=g);return e&&h.forEach(function(e){return t(o,e)}),l}return function(e,r,a,s){"object"==typeof a&&null!==a&&a.type===tt&&null===a.key&&(a=a.props.children);var u="object"==typeof a&&null!==a;if(u)switch(a.$$typeof){case Qe:e:{var l=a.key;for(u=r;null!==u;){if(u.key===l){if(10===u.tag?a.type===tt:u.type===a.type){n(e,u.sibling),(r=o(u,a.type===tt?a.props.children:a.props,s)).ref=_r(e,u,a),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}a.type===tt?((r=$n(a.props.children,e.mode,s,a.key)).return=e,e=r):((s=Kn(a,e.mode,s)).ref=_r(e,r,a),s.return=e,e=s)}return i(e);case et:e:{for(u=a.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[],s)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Xn(a,e.mode,s)).return=e,e=r}return i(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a,s)).return=e,e=r):(n(e,r),(r=Qn(a,e.mode,s)).return=e,e=r),i(e);if(mr(a))return h(e,r,a,s);if(ut(a))return p(e,r,a,s);if(u&&hr(e,a),void 0===a)switch(e.tag){case 2:case 1:f("152",(s=e.type).displayName||s.name||"Component")}return n(e,r)}}var yr=pr(!0),gr=pr(!1);function vr(e,t,n,r,o,a,s){function u(e,t,n){d(e,t,n,t.expirationTime)}function d(e,t,n,r){t.child=null===e?gr(t,null,n,r):yr(t,e.child,n,r)}function m(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function _(e,t,n,r,o,a){if(m(e,t),!n&&!o)return r&&D(t,!1),y(e,t);n=t.stateNode,Ke.current=t;var i=o?null:n.render();return t.effectTag|=1,o&&(d(e,t,null,a),t.child=null),d(e,t,i,a),t.memoizedState=n.state,t.memoizedProps=n.props,r&&D(t,!0),t.child}function h(e){var t=e.stateNode;t.pendingContext?x(e,t.pendingContext,t.pendingContext!==t.context):t.context&&x(e,t.context,!1),b(e,t.containerInfo)}function p(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var a=0|o.stateNode;if(o.type===t&&0!=(a&n)){for(a=o;null!==a;){var i=a.alternate;if(0===a.expirationTime||a.expirationTime>r)a.expirationTime=r,null!==i&&(0===i.expirationTime||i.expirationTime>r)&&(i.expirationTime=r);else{if(null===i||!(0===i.expirationTime||i.expirationTime>r))break;i.expirationTime=r}a=a.return}a=null}else a=o.child;break;case 13:a=o.type===e.type?null:o.child;break;default:a=o.child}if(null!==a)a.return=o;else for(a=o;null!==a;){if(a===e){a=null;break}if(null!==(o=a.sibling)){a=o;break}a=a.return}o=a}}function y(e,t){if(null!==e&&t.child!==e.child&&f("153"),null!==t.child){var n=Jn(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Jn(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}var g=e.shouldSetTextContent,v=e.shouldDeprioritizeSubtree,M=t.pushHostContext,b=t.pushHostContainer,L=r.pushProvider,w=n.getMaskedContext,k=n.getUnmaskedContext,Y=n.hasContextChanged,T=n.pushContextProvider,x=n.pushTopLevelContextObject,D=n.invalidateContextProvider,j=o.enterHydrationState,S=o.resetHydrationState,E=o.tryToClaimNextHydratableInstance,C=(e=function(e,t,n,r,o){function a(e,t,n,r,o,a){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var i=e.stateNode;return e=e.type,"function"==typeof i.shouldComponentUpdate?i.shouldComponentUpdate(n,o,a):!(e.prototype&&e.prototype.isPureReactComponent&&l(t,n)&&l(r,o))}function s(e,t){t.updater=y,e.stateNode=t,t._reactInternalFiber=e}function u(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&y.enqueueReplaceState(t,t.state,null)}function d(e,t,n,r){if("function"==typeof(e=e.type).getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,r)}var f=e.cacheContext,m=e.getMaskedContext,_=e.getUnmaskedContext,h=e.isContextConsumer,p=e.hasContextChanged,y={isMounted:Kt,enqueueSetState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var a=n(e);lr(e,{expirationTime:a,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,a)},enqueueReplaceState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var a=n(e);lr(e,{expirationTime:a,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,a)},enqueueForceUpdate:function(e,r){e=e._reactInternalFiber,r=void 0===r?null:r;var o=n(e);lr(e,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,o)}};return{adoptClassInstance:s,callGetDerivedStateFromProps:d,constructClassInstance:function(e,t){var n=e.type,r=_(e),o=h(e),a=o?m(e,r):c,u=null!==(n=new n(t,a)).state&&void 0!==n.state?n.state:null;return s(e,n),e.memoizedState=u,null!==(t=d(e,0,t,u))&&void 0!==t&&(e.memoizedState=i({},e.memoizedState,t)),o&&f(e,r,a),n},mountClassInstance:function(e,t){var n=e.type,r=e.alternate,o=e.stateNode,a=e.pendingProps,i=_(e);o.props=a,o.state=e.memoizedState,o.refs=c,o.context=m(e,i),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&y.enqueueReplaceState(o,o.state,null),null!==(n=e.updateQueue)&&(o.state=cr(r,e,n,o,a,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,s=e.stateNode;s.props=e.memoizedProps,s.state=e.memoizedState;var l=e.memoizedProps,c=e.pendingProps,f=s.context,h=_(e);h=m(e,h),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(l!==c||f!==h)&&u(e,s,c,h),f=e.memoizedState,t=null!==e.updateQueue?cr(null,e,e.updateQueue,s,c,t):f;var y=void 0;if(l!==c&&(y=d(e,0,c,t)),null!==y&&void 0!==y){t=null===t||void 0===t?y:i({},t,y);var g=e.updateQueue;null!==g&&(g.baseState=i({},g.baseState,y))}return l!==c||f!==t||p()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((l=a(e,l,c,f,t,h))?(n||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(e.effectTag|=4)):("function"==typeof s.componentDidMount&&(e.effectTag|=4),r(e,c),o(e,t)),s.props=c,s.state=t,s.context=h,l):("function"==typeof s.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var s=t.type,l=t.stateNode;l.props=t.memoizedProps,l.state=t.memoizedState;var c=t.memoizedProps,f=t.pendingProps,h=l.context,y=_(t);y=m(t,y),(s="function"==typeof s.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(c!==f||h!==y)&&u(t,l,f,y),h=t.memoizedState,n=null!==t.updateQueue?cr(e,t,t.updateQueue,l,f,n):h;var g=void 0;if(c!==f&&(g=d(t,0,f,n)),null!==g&&void 0!==g){n=null===n||void 0===n?g:i({},n,g);var v=t.updateQueue;null!==v&&(v.baseState=i({},v.baseState,g))}return c!==f||h!==n||p()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((g=a(t,c,f,h,n,y))?(s||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(f,n,y),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(f,n,y)),"function"==typeof l.componentDidUpdate&&(t.effectTag|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof l.componentDidUpdate||c===e.memoizedProps&&h===e.memoizedState||(t.effectTag|=4),"function"!=typeof l.getSnapshotBeforeUpdate||c===e.memoizedProps&&h===e.memoizedState||(t.effectTag|=2048),r(t,f),o(t,n)),l.props=f,l.state=n,l.context=y,g):("function"!=typeof l.componentDidUpdate||c===e.memoizedProps&&h===e.memoizedState||(t.effectTag|=4),"function"!=typeof l.getSnapshotBeforeUpdate||c===e.memoizedProps&&h===e.memoizedState||(t.effectTag|=2048),!1)}}}(n,a,s,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,H=e.callGetDerivedStateFromProps,O=e.constructClassInstance,P=e.mountClassInstance,N=e.resumeMountClassInstance,A=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:h(t);break;case 2:T(t);break;case 4:b(t,t.stateNode.containerInfo);break;case 13:L(t)}return null}switch(t.tag){case 0:null!==e&&f("155");var r=t.type,o=t.pendingProps,a=k(t);return r=r(o,a=w(t,a)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(a=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof a.getDerivedStateFromProps&&(null!==(o=H(t,r,o,t.memoizedState))&&void 0!==o&&(t.memoizedState=i({},t.memoizedState,o))),o=T(t),C(t,r),P(t,n),e=_(e,t,!0,o,!1,n)):(t.tag=1,u(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,Y()||t.memoizedProps!==n?(r=k(t),o=o(n,r=w(t,r)),t.effectTag|=1,u(e,t,o),t.memoizedProps=n,e=t.child):e=y(e,t),e;case 2:o=T(t),null===e?null===t.stateNode?(O(t,t.pendingProps),P(t,n),r=!0):r=N(t,n):r=A(e,t,n),a=!1;var s=t.updateQueue;return null!==s&&null!==s.capturedValues&&(a=r=!0),_(e,t,r,o,a,n);case 3:e:if(h(t),r=t.updateQueue,null!==r){if(a=t.memoizedState,o=cr(e,t,r,null,null,n),t.memoizedState=o,null!==(r=t.updateQueue)&&null!==r.capturedValues)r=null;else{if(a===o){S(),e=y(e,t);break e}r=o.element}a=t.stateNode,(null===e||null===e.child)&&a.hydrate&&j(t)?(t.effectTag|=2,t.child=gr(t,null,r,n)):(S(),u(e,t,r)),t.memoizedState=o,e=t.child}else S(),e=y(e,t);return e;case 5:return M(t),null===e&&E(t),o=t.type,s=t.memoizedProps,r=t.pendingProps,a=null!==e?e.memoizedProps:null,Y()||s!==r||((s=1&t.mode&&v(o,r))&&(t.expirationTime=1073741823),s&&1073741823===n)?(s=r.children,g(o,r)?s=null:a&&g(o,a)&&(t.effectTag|=16),m(e,t),1073741823!==n&&1&t.mode&&v(o,r)?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(u(e,t,s),t.memoizedProps=r,e=t.child)):e=y(e,t),e;case 6:return null===e&&E(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return o=t.pendingProps,Y()||t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===e?gr(t,t.stateNode,r,n):yr(t,e.stateNode,r,n),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:return b(t,t.stateNode.containerInfo),o=t.pendingProps,Y()||t.memoizedProps!==o?(null===e?t.child=yr(t,null,o,n):u(e,t,o),t.memoizedProps=o,e=t.child):e=y(e,t),e;case 14:return u(e,t,n=(n=t.type.render)(t.pendingProps,t.ref)),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,Y()||t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=y(e,t),e;case 11:return n=t.pendingProps.children,Y()||null!==n&&t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=y(e,t),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,a=t.memoizedProps;if(!Y()&&a===o)return t.stateNode=0,L(t),y(e,t);var i=o.value;if(t.memoizedProps=o,null===a)i=1073741823;else if(a.value===o.value){if(a.children===o.children)return t.stateNode=0,L(t),y(e,t);i=0}else{var s=a.value;if(s===i&&(0!==s||1/s==1/i)||s!=s&&i!=i){if(a.children===o.children)return t.stateNode=0,L(t),y(e,t);i=0}else if(i="function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823,0==(i|=0)){if(a.children===o.children)return t.stateNode=0,L(t),y(e,t)}else p(t,r,i,n)}return t.stateNode=i,L(t),u(e,t,o.children),t.child}(e,t,n);case 12:e:{r=t.type,a=t.pendingProps,s=t.memoizedProps,o=r._currentValue;var l=r._changedBits;if(Y()||0!==l||s!==a){t.memoizedProps=a;var d=a.unstable_observedBits;if(void 0!==d&&null!==d||(d=1073741823),t.stateNode=d,0!=(l&d))p(t,r,l,n);else if(s===a){e=y(e,t);break e}u(e,t,n=(n=a.children)(o)),e=t.child}else e=y(e,t)}return e;default:f("156")}}}}function Mr(e,t){var n=t.source;null===t.stack&&dt(n),null!==n&&lt(n),t=t.value,null!==e&&2===e.tag&&lt(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}var br={};function Lr(e){function t(){if(null!==ee)for(var e=ee.return;null!==e;)O(e),e=e.return;te=null,ne=0,ee=null,ae=!1}function n(e){return null!==ie&&ie.has(e)}function r(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=E(t,e,ne);var o=e;if(1073741823===ne||1073741823!==o.expirationTime){e:switch(o.tag){case 3:case 2:var a=o.updateQueue;a=null===a?0:a.expirationTime;break e;default:a=0}for(var i=o.child;null!==i;)0!==i.expirationTime&&(0===a||a>i.expirationTime)&&(a=i.expirationTime),i=i.sibling;o.expirationTime=a}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ae=!0;break}e=n}else{if(null!==(e=H(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function o(e){var t=S(e.alternate,e,ne);return null===t&&(t=r(e)),Ke.current=null,t}function a(e,n,a){Z&&f("243"),Z=!0,n===ne&&e===te&&null!==ee||(t(),ne=n,ee=Jn((te=e).current,null,ne),e.pendingCommitExpirationTime=0);for(var i=!1;;){try{if(a)for(;null!==ee&&!k();)ee=o(ee);else for(;null!==ee;)ee=o(ee)}catch(e){if(null===ee){i=!0,Y(e);break}var s=(a=ee).return;if(null===s){i=!0,Y(e);break}C(s,a,e),ee=r(a)}break}return Z=!1,i||null!==ee?null:ae?(e.pendingCommitExpirationTime=n,e.current.alternate):void f("262")}function s(e,t,n,r){lr(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e={value:n,source:e,stack:dt(e)},next:null}),d(t,r)}function u(e,t){e:{Z&&!oe&&f("263");for(var r=e.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&!n(o)){s(e,r,t,1),e=void 0;break e}break;case 3:s(e,r,t,1),e=void 0;break e}r=r.return}3===e.tag&&s(e,e,t,1),e=void 0}return e}function l(e){return e=0!==X?X:Z?oe?1:ne:1&e.mode?be?10*(1+((m()+15)/10|0)):25*(1+((m()+500)/25|0)):1,be&&(0===_e||e>_e)&&(_e=e),e}function d(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var r=e.stateNode;!Z&&0!==ne&&n<ne&&t(),Z&&!oe&&te===r||p(r,n),ke>we&&f("185")}e=e.return}n=void 0}return n}function m(){return $=B()-K,2+($/10|0)}function _(e,t,n,r,o){var a=X;X=1;try{return e(t,n,r,o)}finally{X=a}}function h(e){if(0!==le){if(e>le)return;q(de)}var t=B()-K;le=e,de=V(g,{timeout:10*(e-2)-t})}function p(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===ue?(se=ue=e,e.nextScheduledRoot=e):(ue=ue.nextScheduledRoot=e).nextScheduledRoot=se;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}ce||(ve?Me&&(fe=e,me=1,L(e,1,!1)):1===t?v():h(t))}function y(){var e=0,t=null;if(null!==ue)for(var n=ue,r=se;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===ue)&&f("244"),r===r.nextScheduledRoot){se=ue=r.nextScheduledRoot=null;break}if(r===se)se=o=r.nextScheduledRoot,ue.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===ue){(ue=n).nextScheduledRoot=se,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===ue)break;n=r,r=r.nextScheduledRoot}}null!==(n=fe)&&n===t&&1===e?ke++:ke=0,fe=t,me=e}function g(e){M(0,!0,e)}function v(){M(1,!1,null)}function M(e,t,n){if(ge=n,y(),t)for(;null!==fe&&0!==me&&(0===e||e>=me)&&(!he||m()>=me);)L(fe,me,!he),y();else for(;null!==fe&&0!==me&&(0===e||e>=me);)L(fe,me,!1),y();null!==ge&&(le=0,de=-1),0!==me&&h(me),ge=null,he=!1,b()}function b(){if(ke=0,null!==Le){var e=Le;Le=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){pe||(pe=!0,ye=e)}}}if(pe)throw e=ye,ye=null,pe=!1,e}function L(e,t,n){ce&&f("245"),ce=!0,n?null!==(n=e.finishedWork)?w(e,n,t):(e.finishedWork=null,null!==(n=a(e,t,!0))&&(k()?e.finishedWork=n:w(e,n,t))):null!==(n=e.finishedWork)?w(e,n,t):(e.finishedWork=null,null!==(n=a(e,t,!1))&&w(e,n,t)),ce=!1}function w(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Le?Le=[r]:Le.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,oe=Z=!0,(n=t.stateNode).current===t&&f("177"),0===(r=n.pendingCommitExpirationTime)&&f("261"),n.pendingCommitExpirationTime=0;var o=m();if(Ke.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var a=t.firstEffect}else a=t;else a=t.firstEffect;for(G(n.containerInfo),re=a;null!==re;){var i=!1,s=void 0;try{for(;null!==re;)2048&re.effectTag&&P(re.alternate,re),re=re.nextEffect}catch(e){i=!0,s=e}i&&(null===re&&f("178"),u(re,s),null!==re&&(re=re.nextEffect))}for(re=a;null!==re;){i=!1,s=void 0;try{for(;null!==re;){var l=re.effectTag;if(16&l&&N(re),128&l){var d=re.alternate;null!==d&&U(d)}switch(14&l){case 2:A(re),re.effectTag&=-3;break;case 6:A(re),re.effectTag&=-3,I(re.alternate,re);break;case 4:I(re.alternate,re);break;case 8:F(re)}re=re.nextEffect}}catch(e){i=!0,s=e}i&&(null===re&&f("178"),u(re,s),null!==re&&(re=re.nextEffect))}for(J(n.containerInfo),n.current=t,re=a;null!==re;){l=!1,d=void 0;try{for(a=n,i=o,s=r;null!==re;){var c=re.effectTag;36&c&&z(a,re.alternate,re,i,s),256&c&&R(re,Y),128&c&&W(re);var _=re.nextEffect;re.nextEffect=null,re=_}}catch(e){l=!0,d=e}l&&(null===re&&f("178"),u(re,d),null!==re&&(re=re.nextEffect))}Z=oe=!1,nr(t.stateNode),0===(t=n.current.expirationTime)&&(ie=null),e.remainingExpirationTime=t}function k(){return!(null===ge||ge.timeRemaining()>Ye)&&(he=!0)}function Y(e){null===fe&&f("246"),fe.remainingExpirationTime=0,pe||(pe=!0,ye=e)}var T=function(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,r){e[++t]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),x=function(e,t){function n(e){return e===br&&f("174"),e}var r=e.getChildHostContext,o=e.getRootHostContext;e=t.createCursor;var a=t.push,i=t.pop,s=e(br),u=e(br),l=e(br);return{getHostContext:function(){return n(s.current)},getRootHostContainer:function(){return n(l.current)},popHostContainer:function(e){i(s,e),i(u,e),i(l,e)},popHostContext:function(e){u.current===e&&(i(s,e),i(u,e))},pushHostContainer:function(e,t){a(l,t,e),a(u,e,e),a(s,br,e),t=o(t),i(s,e),a(s,t,e)},pushHostContext:function(e){var t=n(l.current),o=n(s.current);o!==(t=r(o,e.type,t))&&(a(u,e,e),a(s,t,e))}}}(e,T),D=function(e){function t(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function r(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||f("108",lt(e)||"Unknown",o);return i({},t,n)}var o=e.createCursor,a=e.push,s=e.pop,u=o(c),l=o(!1),d=c;return{getUnmaskedContext:function(e){return n(e)?d:u.current},cacheContext:t,getMaskedContext:function(e,n){var r=e.type.contextTypes;if(!r)return c;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===n)return o.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in r)i[a]=n[a];return o&&t(e,n,i),i},hasContextChanged:function(){return l.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(s(l,e),s(u,e))},popTopLevelContextObject:function(e){s(l,e),s(u,e)},pushTopLevelContextObject:function(e,t,n){null!=u.cursor&&f("168"),a(u,t,e),a(l,n,e)},processChildContext:r,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||c,d=u.current,a(u,t,e),a(l,l.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||f("169"),t){var o=r(e,d);n.__reactInternalMemoizedMergedChildContext=o,s(l,e),s(u,e),a(u,o,e)}else s(l,e);a(l,t,e)},findCurrentUnmaskedContext:function(e){for((2!==Jt(e)||2!==e.tag)&&f("170");3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||f("171")}return e.stateNode.context}}}(T);T=function(e){var t=e.createCursor,n=e.push,r=e.pop,o=t(null),a=t(null),i=t(0);return{pushProvider:function(e){var t=e.type._context;n(i,t._changedBits,e),n(a,t._currentValue,e),n(o,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=i.current,n=a.current;r(o,e),r(a,e),r(i,e),(e=e.type._context)._currentValue=n,e._changedBits=t}}}(T);var j=function(e){function t(e,t){var n=new Gn(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=a(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=i(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;c=e}var o=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){f("175")},prepareToHydrateHostTextInstance:function(){f("176")},popHydrationState:function(){return!1}};var a=e.canHydrateInstance,i=e.canHydrateTextInstance,s=e.getNextHydratableSibling,u=e.getFirstHydratableChild,l=e.hydrateInstance,d=e.hydrateTextInstance,c=null,m=null,_=!1;return{enterHydrationState:function(e){return m=u(e.stateNode.containerInfo),c=e,_=!0},resetHydrationState:function(){m=c=null,_=!1},tryToClaimNextHydratableInstance:function(e){if(_){var r=m;if(r){if(!n(e,r)){if(!(r=s(r))||!n(e,r))return e.effectTag|=2,_=!1,void(c=e);t(c,m)}c=e,m=u(r)}else e.effectTag|=2,_=!1,c=e}},prepareToHydrateHostInstance:function(e,t,n){return t=l(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return d(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==c)return!1;if(!_)return r(e),_=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!o(n,e.memoizedProps))for(n=m;n;)t(e,n),n=s(n);return r(e),m=c?s(e.stateNode):null,!0}}}(e),S=vr(e,x,D,T,j,d,l).beginWork,E=function(e,t,n,r,o){function a(e){e.effectTag|=4}var i=e.createInstance,s=e.createTextInstance,u=e.appendInitialChild,l=e.finalizeInitialChildren,d=e.prepareUpdate,c=e.persistence,m=t.getRootHostContainer,_=t.popHostContext,h=t.getHostContext,p=t.popHostContainer,y=n.popContextProvider,g=n.popTopLevelContextObject,v=r.popProvider,M=o.prepareToHydrateHostInstance,b=o.prepareToHydrateHostTextInstance,L=o.popHydrationState,w=void 0,k=void 0,Y=void 0;return e.mutation?(w=function(){},k=function(e,t,n){(t.updateQueue=n)&&a(t)},Y=function(e,t,n,r){n!==r&&a(t)}):f(c?"235":"236"),{completeWork:function(e,t,n){var r=t.pendingProps;switch(t.tag){case 1:return null;case 2:return y(t),e=t.stateNode,null!==(r=t.updateQueue)&&null!==r.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:r.capturedValues=null),null;case 3:return p(t),g(t),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(L(t),t.effectTag&=-3),w(t),null!==(e=t.updateQueue)&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:_(t),n=m();var o=t.type;if(null!==e&&null!=t.stateNode){var c=e.memoizedProps,T=t.stateNode,x=h();T=d(T,o,c,r,n,x),k(e,t,T,o,c,r,n,x),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!r)return null===t.stateNode&&f("166"),null;if(e=h(),L(t))M(t,n,e)&&a(t);else{c=i(o,r,n,e,t);e:for(x=t.child;null!==x;){if(5===x.tag||6===x.tag)u(c,x.stateNode);else if(4!==x.tag&&null!==x.child){x.child.return=x,x=x.child;continue}if(x===t)break;for(;null===x.sibling;){if(null===x.return||x.return===t)break e;x=x.return}x.sibling.return=x.return,x=x.sibling}l(c,o,r,n,e)&&a(t),t.stateNode=c}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Y(e,t,e.memoizedProps,r);else{if("string"!=typeof r)return null===t.stateNode&&f("166"),null;e=m(),n=h(),L(t)?b(t)&&a(t):t.stateNode=s(r,e,n,t)}return null;case 7:(r=t.memoizedProps)||f("165"),t.tag=8,o=[];e:for((c=t.stateNode)&&(c.return=t);null!==c;){if(5===c.tag||6===c.tag||4===c.tag)f("247");else if(9===c.tag)o.push(c.pendingProps.value);else if(null!==c.child){c.child.return=c,c=c.child;continue}for(;null===c.sibling;){if(null===c.return||c.return===t)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}return r=(c=r.handler)(r.props,o),t.child=yr(t,null!==e?e.child:null,r,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return p(t),w(t),null;case 13:return v(t),null;case 12:return null;case 0:f("167");default:f("156")}}}}(e,x,D,T,j).completeWork,C=(x=function(e,t,n,r,o){var a=e.popHostContainer,i=e.popHostContext,s=t.popContextProvider,u=t.popTopLevelContextObject,l=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:dt(t)};do{switch(e.tag){case 3:return ur(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!o(n)){ur(e);var r=(n=e.updateQueue).capturedValues;return null===r?n.capturedValues=[t]:r.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:s(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return a(e),u(e),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return i(e),null;case 4:return a(e),null;case 13:return l(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:s(e);break;case 3:a(e),u(e);break;case 5:i(e);break;case 4:a(e);break;case 13:l(e)}}}}(x,D,T,0,n)).throwException,H=x.unwindWork,O=x.unwindInterruptedWork,P=(x=function(e,t,n,r,o){function a(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function i(e){switch(rr(e),e.tag){case 2:a(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:a(e);break;case 7:s(e.stateNode);break;case 4:c&&l(e)}}function s(e){for(var t=e;;)if(i(t),null===t.child||c&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function u(e){return 5===e.tag||3===e.tag||4===e.tag}function l(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&f("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)s(t),o?L(r,t.stateNode):b(r,t.stateNode);else if(4===t.tag?r=t.stateNode.containerInfo:i(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var d=e.getPublicInstance,c=e.mutation;e=e.persistence,c||f(e?"235":"236");var m=c.commitMount,_=c.commitUpdate,h=c.resetTextContent,p=c.commitTextUpdate,y=c.appendChild,g=c.appendChildToContainer,v=c.insertBefore,M=c.insertInContainerBefore,b=c.removeChild,L=c.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;(e=t.stateNode).props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:f("163")}},commitResetTextContent:function(e){h(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(u(t)){var n=t;break e}t=t.return}f("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:f("161")}16&n.effectTag&&(h(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||u(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)n?r?M(t,o.stateNode,n):v(t,o.stateNode,n):r?g(t,o.stateNode):y(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){l(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,a=t.updateQueue;t.updateQueue=null,null!==a&&_(n,a,o,e,r,t)}break;case 6:null===t.stateNode&&f("162"),n=t.memoizedProps,p(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:f("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var r=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(r,t,e.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&fr(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=d(n.child.stateNode);break;case 2:e=n.child.stateNode}fr(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&m(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:f("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var r=e.updateQueue;(null===r||null===r.capturedValues)&&f("264");var a=r.capturedValues;for(r.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&o(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<a.length;n++){var i=(r=a[n]).value,s=r.stack;Mr(e,r),t.componentDidCatch(i,{componentStack:null!==s?s:""})}break;case 3:for((null===(n=e.updateQueue)||null===n.capturedValues)&&f("264"),a=n.capturedValues,n.capturedValues=null,n=0;n<a.length;n++)Mr(e,r=a[n]),t(r.value);break;default:f("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=d(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}(e,u,0,0,function(e){null===ie?ie=new Set([e]):ie.add(e)})).commitBeforeMutationLifeCycles,N=x.commitResetTextContent,A=x.commitPlacement,F=x.commitDeletion,I=x.commitWork,z=x.commitLifeCycles,R=x.commitErrorLogging,W=x.commitAttachRef,U=x.commitDetachRef,B=e.now,V=e.scheduleDeferredCallback,q=e.cancelDeferredCallback,G=e.prepareForCommit,J=e.resetAfterCommit,K=B(),$=K,Q=0,X=0,Z=!1,ee=null,te=null,ne=0,re=null,oe=!1,ae=!1,ie=null,se=null,ue=null,le=0,de=-1,ce=!1,fe=null,me=0,_e=0,he=!1,pe=!1,ye=null,ge=null,ve=!1,Me=!1,be=!1,Le=null,we=1e3,ke=0,Ye=1;return{recalculateCurrentTime:m,computeExpirationForFiber:l,scheduleWork:d,requestWork:p,flushRoot:function(e,t){ce&&f("253"),fe=e,me=t,L(e,t,!1),v(),b()},batchedUpdates:function(e,t){var n=ve;ve=!0;try{return e(t)}finally{(ve=n)||ce||v()}},unbatchedUpdates:function(e,t){if(ve&&!Me){Me=!0;try{return e(t)}finally{Me=!1}}return e(t)},flushSync:function(e,t){ce&&f("187");var n=ve;ve=!0;try{return _(e,t)}finally{ve=n,v()}},flushControlled:function(e){var t=ve;ve=!0;try{_(e)}finally{(ve=t)||ce||M(1,!1,null)}},deferredUpdates:function(e){var t=X;X=25*(1+((m()+500)/25|0));try{return e()}finally{X=t}},syncUpdates:_,interactiveUpdates:function(e,t,n){if(be)return e(t,n);ve||ce||0===_e||(M(_e,!1,null),_e=0);var r=be,o=ve;ve=be=!0;try{return e(t,n)}finally{be=r,(ve=o)||ce||v()}},flushInteractiveUpdates:function(){ce||0===_e||(M(_e,!1,null),_e=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((m()+500)/25|0));return e<=Q&&(e=Q+1),Q=e},legacyContext:D}}function wr(e){function t(e,t,n,r,o,i){if(r=t.current,n){n=n._reactInternalFiber;var s=u(n);n=l(n)?d(n,s):s}else n=c;return null===t.context?t.context=n:t.pendingContext=n,lr(r,{expirationTime:o,partialState:{element:e},callback:void 0===(t=i)?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),a(r,o),o}var n=e.getPublicInstance,r=(e=Lr(e)).recalculateCurrentTime,o=e.computeExpirationForFiber,a=e.scheduleWork,s=e.legacyContext,u=s.findCurrentUnmaskedContext,l=s.isContextProvider,d=s.processChildContext;return{createContainer:function(e,t,n){return e={current:t=new Gn(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,a,i){var s=n.current;return t(e,n,a,r(),s=o(s),i)},updateContainerAtExpirationTime:function(e,n,o,a,i){return t(e,n,o,r(),a,i)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:function(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?f("188"):f("268",Object.keys(e))),null===(e=Xt(t))?null:e.stateNode},findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=Qt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Zn=tr(function(e){return t.onCommitFiberRoot(n,e)}),er=tr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(i({},e,{findHostInstanceByFiber:function(e){return null===(e=Xt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}var kr=Object.freeze({default:wr}),Yr=kr&&wr||kr,Tr=Yr.default?Yr.default:Yr;var xr="object"==typeof performance&&"function"==typeof performance.now,Dr=void 0;Dr=xr?function(){return performance.now()}:function(){return Date.now()};var jr=void 0,Sr=void 0;if(a.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Er=null,Cr=!1,Hr=-1,Or=!1,Pr=0,Nr=33,Ar=33,Fr=void 0;Fr=xr?{didTimeout:!1,timeRemaining:function(){var e=Pr-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Pr-Date.now();return 0<e?e:0}};var Ir="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Ir){if(Cr=!1,e=Dr(),0>=Pr-e){if(!(-1!==Hr&&Hr<=e))return void(Or||(Or=!0,requestAnimationFrame(zr)));Fr.didTimeout=!0}else Fr.didTimeout=!1;Hr=-1,e=Er,Er=null,null!==e&&e(Fr)}},!1);var zr=function(e){Or=!1;var t=e-Pr+Ar;t<Ar&&Nr<Ar?(8>t&&(t=8),Ar=t<Nr?Nr:t):Nr=t,Pr=e+Ar,Cr||(Cr=!0,window.postMessage(Ir,"*"))};jr=function(e,t){return Er=e,null!=t&&"number"==typeof t.timeout&&(Hr=Dr()+t.timeout),Or||(Or=!0,requestAnimationFrame(zr)),0},Sr=function(){Er=null,Cr=!1,Hr=-1}}else jr=window.requestIdleCallback,Sr=window.cancelIdleCallback;else jr=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Sr=function(e){clearTimeout(e)};function Rr(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function Wr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Ur(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Br(e,t){return null!=t.dangerouslySetInnerHTML&&f("91"),i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Vr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&f("92"),Array.isArray(t)&&(1>=t.length||f("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function qr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Gr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var Jr={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Kr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function $r(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Kr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Qr,Xr=void 0,Zr=(Qr=function(e,t){if(e.namespaceURI!==Jr.svg||"innerHTML"in e)e.innerHTML=t;else{for((Xr=Xr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Xr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return Qr(e,t)})}:Qr);function eo(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var to={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},no=["Webkit","ms","Moz","O"];function ro(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,a=t[n];o=null==a||"boolean"==typeof a||""===a?"":r||"number"!=typeof a||0===a||to.hasOwnProperty(o)&&to[o]?(""+a).trim():a+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(to).forEach(function(e){no.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),to[t]=to[e]})});var oo=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ao(e,t,n){t&&(oo[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&f("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&f("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||f("61")),null!=t.style&&"object"!=typeof t.style&&f("62",n()))}function io(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var so=s.thatReturns("");function uo(e,t){var n=Pn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=b[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?bn("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(bn("topFocus","focus",e),bn("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(Ve("cancel",!0)&&bn("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(Ve("close",!0)&&bn("topClose","close",e),n.topClose=!0):Sn.hasOwnProperty(o)&&Mn(o,Sn[o],e),n[o]=!0)}}function lo(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===Jr.html&&(r=Kr(e)),r===Jr.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function co(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function fo(e,t,n,r){var o=io(t,n);switch(t){case"iframe":case"object":Mn("topLoad","load",e);var a=n;break;case"video":case"audio":for(a in En)En.hasOwnProperty(a)&&Mn(a,En[a],e);a=n;break;case"source":Mn("topError","error",e),a=n;break;case"img":case"image":case"link":Mn("topError","error",e),Mn("topLoad","load",e),a=n;break;case"form":Mn("topReset","reset",e),Mn("topSubmit","submit",e),a=n;break;case"details":Mn("topToggle","toggle",e),a=n;break;case"input":Mt(e,n),a=vt(e,n),Mn("topInvalid","invalid",e),uo(r,"onChange");break;case"option":a=Rr(e,n);break;case"select":Ur(e,n),a=i({},n,{value:void 0}),Mn("topInvalid","invalid",e),uo(r,"onChange");break;case"textarea":Vr(e,n),a=Br(e,n),Mn("topInvalid","invalid",e),uo(r,"onChange");break;default:a=n}ao(t,a,so);var u,l=a;for(u in l)if(l.hasOwnProperty(u)){var d=l[u];"style"===u?ro(e,d):"dangerouslySetInnerHTML"===u?null!=(d=d?d.__html:void 0)&&Zr(e,d):"children"===u?"string"==typeof d?("textarea"!==t||""!==d)&&eo(e,d):"number"==typeof d&&eo(e,""+d):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(M.hasOwnProperty(u)?null!=d&&uo(r,u):null!=d&&gt(e,u,d,o))}switch(t){case"input":Ge(e),wt(e,n);break;case"textarea":Ge(e),Gr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?Wr(e,!!n.multiple,t,!1):null!=n.defaultValue&&Wr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=s)}}function mo(e,t,n,r,o){var a=null;switch(t){case"input":n=vt(e,n),r=vt(e,r),a=[];break;case"option":n=Rr(e,n),r=Rr(e,r),a=[];break;case"select":n=i({},n,{value:void 0}),r=i({},r,{value:void 0}),a=[];break;case"textarea":n=Br(e,n),r=Br(e,r),a=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=s)}ao(t,r,so),t=e=void 0;var u=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var l=n[e];for(t in l)l.hasOwnProperty(t)&&(u||(u={}),u[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(M.hasOwnProperty(e)?a||(a=[]):(a=a||[]).push(e,null));for(e in r){var d=r[e];if(l=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&d!==l&&(null!=d||null!=l))if("style"===e)if(l){for(t in l)!l.hasOwnProperty(t)||d&&d.hasOwnProperty(t)||(u||(u={}),u[t]="");for(t in d)d.hasOwnProperty(t)&&l[t]!==d[t]&&(u||(u={}),u[t]=d[t])}else u||(a||(a=[]),a.push(e,u)),u=d;else"dangerouslySetInnerHTML"===e?(d=d?d.__html:void 0,l=l?l.__html:void 0,null!=d&&l!==d&&(a=a||[]).push(e,""+d)):"children"===e?l===d||"string"!=typeof d&&"number"!=typeof d||(a=a||[]).push(e,""+d):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(M.hasOwnProperty(e)?(null!=d&&uo(o,e),a||l===d||(a=[])):(a=a||[]).push(e,d))}return u&&(a=a||[]).push("style",u),a}function _o(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&bt(e,o),io(n,r),r=io(n,o);for(var a=0;a<t.length;a+=2){var i=t[a],s=t[a+1];"style"===i?ro(e,s):"dangerouslySetInnerHTML"===i?Zr(e,s):"children"===i?eo(e,s):gt(e,i,s,r)}switch(n){case"input":Lt(e,o);break;case"textarea":qr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Wr(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Wr(e,!!o.multiple,o.defaultValue,!0):Wr(e,!!o.multiple,o.multiple?[]:"",!1))}}function ho(e,t,n,r,o){switch(t){case"iframe":case"object":Mn("topLoad","load",e);break;case"video":case"audio":for(var a in En)En.hasOwnProperty(a)&&Mn(a,En[a],e);break;case"source":Mn("topError","error",e);break;case"img":case"image":case"link":Mn("topError","error",e),Mn("topLoad","load",e);break;case"form":Mn("topReset","reset",e),Mn("topSubmit","submit",e);break;case"details":Mn("topToggle","toggle",e);break;case"input":Mt(e,n),Mn("topInvalid","invalid",e),uo(o,"onChange");break;case"select":Ur(e,n),Mn("topInvalid","invalid",e),uo(o,"onChange");break;case"textarea":Vr(e,n),Mn("topInvalid","invalid",e),uo(o,"onChange")}for(var i in ao(t,n,so),r=null,n)n.hasOwnProperty(i)&&(a=n[i],"children"===i?"string"==typeof a?e.textContent!==a&&(r=["children",a]):"number"==typeof a&&e.textContent!==""+a&&(r=["children",""+a]):M.hasOwnProperty(i)&&null!=a&&uo(o,i));switch(t){case"input":Ge(e),wt(e,n);break;case"textarea":Ge(e),Gr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=s)}return r}function po(e,t){return e.nodeValue!==t}var yo=Object.freeze({createElement:lo,createTextNode:co,setInitialProperties:fo,diffProperties:mo,updateProperties:_o,diffHydratedProperties:ho,diffHydratedText:po,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Lt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=V(r);o||f("90"),Je(r),Lt(r,o)}}}break;case"textarea":qr(e,n);break;case"select":null!=(t=n.value)&&Wr(e,!!n.multiple,t,!1)}}});je.injectFiberControlledHostComponent(yo);var go=null,vo=null;function Mo(e){this._expirationTime=Yo.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function bo(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Lo(e,t,n){this._internalRoot=Yo.createContainer(e,t,n)}function wo(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ko(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}Mo.prototype.render=function(e){this._defer||f("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new bo;return Yo.updateContainerAtExpirationTime(e,t,null,n,r._onCommit),r},Mo.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Mo.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||f("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&f("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Yo.flushRoot(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Mo.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},bo.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},bo.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&f("191",n),n()}}},Lo.prototype.render=function(e,t){var n=this._internalRoot,r=new bo;return null!==(t=void 0===t?null:t)&&r.then(t),Yo.updateContainer(e,n,null,r._onCommit),r},Lo.prototype.unmount=function(e){var t=this._internalRoot,n=new bo;return null!==(e=void 0===e?null:e)&&n.then(e),Yo.updateContainer(null,t,null,n._onCommit),n},Lo.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new bo;return null!==(n=void 0===n?null:n)&&o.then(n),Yo.updateContainer(t,r,e,o._onCommit),o},Lo.prototype.createBatch=function(){var e=new Mo(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e};var Yo=Tr({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:$r(null,"");break;default:e=$r(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return $r(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){go=gn;var e=u();if(Fn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var a=0,i=-1,s=-1,l=0,d=0,c=e,f=null;t:for(;;){for(var m;c!==t||0!==r&&3!==c.nodeType||(i=a+r),c!==o||0!==n&&3!==c.nodeType||(s=a+n),3===c.nodeType&&(a+=c.nodeValue.length),null!==(m=c.firstChild);)f=c,c=m;for(;;){if(c===e)break t;if(f===t&&++l===r&&(i=a),f===o&&++d===n&&(s=a),null!==(m=c.nextSibling))break;f=(c=f).parentNode}c=m}t=-1===i||-1===s?null:{start:i,end:s}}else t=null}t=t||{start:0,end:0}}else t=null;vo={focusedElem:e,selectionRange:t},vn(!1)},resetAfterCommit:function(){var e=vo,t=u(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&d(document.documentElement,n)){if(Fn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[oe()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=An(n,e);var a=An(n,r);if(o&&a&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==a.node||t.focusOffset!==a.offset)){var i=document.createRange();i.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(i),t.extend(a.node,a.offset)):(i.setEnd(a.node,a.offset),t.addRange(i))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}vo=null,vn(go),go=null},createInstance:function(e,t,n,r,o){return(e=lo(e,t,n,r))[R]=o,e[W]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return fo(e,t,n,r),ko(t,n)},prepareUpdate:function(e,t,n,r,o){return mo(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=co(e,t))[R]=r,e},now:Dr,mutation:{commitMount:function(e,t,n){ko(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,o){e[W]=o,_o(e,t,n,r,o)},resetTextContent:function(e){eo(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,a){return e[R]=a,e[W]=n,ho(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[R]=n,po(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:jr,cancelDeferredCallback:Sr}),To=Yo;function xo(e,t,n,r,o){wo(n)||f("200");var a=n._reactRootContainer;if(a){if("function"==typeof o){var i=o;o=function(){var e=Yo.getPublicRootInstance(a._internalRoot);i.call(e)}}null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Lo(e,!1,t)}(n,r),"function"==typeof o){var s=o;o=function(){var e=Yo.getPublicRootInstance(a._internalRoot);s.call(e)}}Yo.unbatchedUpdates(function(){null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)})}return Yo.getPublicRootInstance(a._internalRoot)}function Do(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return wo(t)||f("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:et,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ae=To.batchedUpdates,Fe=To.interactiveUpdates,Ie=To.flushInteractiveUpdates;var jo={createPortal:Do,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:Yo.findHostInstance(e)},hydrate:function(e,t,n){return xo(null,e,t,!0,n)},render:function(e,t,n){return xo(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&f("38"),xo(e,t,n,!1,r)},unmountComponentAtNode:function(e){return wo(e)||f("40"),!!e._reactRootContainer&&(Yo.unbatchedUpdates(function(){xo(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Do.apply(void 0,arguments)},unstable_batchedUpdates:Yo.batchedUpdates,unstable_deferredUpdates:Yo.deferredUpdates,flushSync:Yo.flushSync,unstable_flushControlled:Yo.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:I,EventPluginRegistry:k,EventPropagators:ne,ReactControlledComponent:Ne,ReactDOMComponentTree:q,ReactDOMEventListener:kn},unstable_createRoot:function(e,t){return new Lo(e,!0,null!=t&&!0===t.hydrate)}};Yo.injectIntoDevTools({findFiberByHostInstance:U,bundleType:0,version:"16.3.2",rendererPackageName:"react-dom"});var So=Object.freeze({default:jo}),Eo=So&&jo||So;e.exports=Eo.default?Eo.default:Eo},"./node_modules/react-dom/index.js":function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n("./node_modules/react-dom/cjs/react-dom.production.min.js")},"./node_modules/react-redux/es/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/react/index.js"),o=n("./node_modules/prop-types/index.js"),a=n.n(o),i=a.a.shape({trySubscribe:a.a.func.isRequired,tryUnsubscribe:a.a.func.isRequired,notifyNestedSubs:a.a.func.isRequired,isSubscribed:a.a.func.isRequired}),s=a.a.shape({subscribe:a.a.func.isRequired,dispatch:a.a.func.isRequired,getState:a.a.func.isRequired});function u(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||t+"Subscription",o=function(e){function o(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return a[t]=n.store,a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(o,e),o.prototype.getChildContext=function(){var e;return(e={})[t]=this[t],e[n]=null,e},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:s.isRequired,children:a.a.element.isRequired},o.childContextTypes=((e={})[t]=s.isRequired,e[n]=i,e),o}var l=u(),d=n("./node_modules/hoist-non-react-statics/index.js"),c=n.n(d),f=n("./node_modules/invariant/browser.js"),m=n.n(f);var _=null,h={notify:function(){}};var p=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.store=t,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=h}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){var e,t;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=(e=[],t=[],{clear:function(){t=_,e=_},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&e!==_&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}))},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=h)},e}(),y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var g=0,v={};function M(){}function b(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=o.getDisplayName,u=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,l=o.methodName,d=void 0===l?"connectAdvanced":l,f=o.renderCountProp,_=void 0===f?void 0:f,h=o.shouldHandleStateChanges,b=void 0===h||h,L=o.storeKey,w=void 0===L?"store":L,k=o.withRef,Y=void 0!==k&&k,T=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),x=w+"Subscription",D=g++,j=((t={})[w]=s,t[x]=i,t),S=((n={})[x]=i,n);return function(t){m()("function"==typeof t,"You must pass a component to the function returned by "+d+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=u(n),a=y({},T,{getDisplayName:u,methodName:d,renderCountProp:_,shouldHandleStateChanges:b,storeKey:w,withRef:Y,displayName:o,wrappedComponentName:n,WrappedComponent:t}),i=function(n){function i(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,n.call(this,e,t));return r.version=D,r.state={},r.renderCount=0,r.store=e[w]||t[w],r.propsMode=Boolean(e[w]),r.setWrappedInstance=r.setWrappedInstance.bind(r),m()(r.store,'Could not find "'+w+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+w+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(i,n),i.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[x]=t||this.context[x],e},i.prototype.componentDidMount=function(){b&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},i.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},i.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},i.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=M,this.store=null,this.selector.run=M,this.selector.shouldComponentUpdate=!1},i.prototype.getWrappedInstance=function(){return m()(Y,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+d+"() call."),this.wrappedInstance},i.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},i.prototype.initSelector=function(){var t=e(this.store.dispatch,a);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},i.prototype.initSubscription=function(){if(b){var e=(this.propsMode?this.props:this.context)[x];this.subscription=new p(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},i.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(v)):this.notifyNestedSubs()},i.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},i.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},i.prototype.addExtraProps=function(e){if(!(Y||_||this.propsMode&&this.subscription))return e;var t=y({},e);return Y&&(t.ref=this.setWrappedInstance),_&&(t[_]=this.renderCount++),this.propsMode&&this.subscription&&(t[x]=this.subscription),t},i.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},i}(r.Component);return i.WrappedComponent=t,i.displayName=o,i.childContextTypes=S,i.contextTypes=j,i.propTypes=j,c()(i,t)}}var L=Object.prototype.hasOwnProperty;function w(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function k(e,t){if(w(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!L.call(t,n[o])||!w(e[n[o]],t[n[o]]))return!1;return!0}var Y=n("./node_modules/redux/es/index.js");n("./node_modules/lodash-es/isPlainObject.js");function T(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function x(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function D(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=x(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=x(o),o=r(t,n)),o},r}}var j=[function(e){return"function"==typeof e?D(e):void 0},function(e){return e?void 0:T(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?T(function(t){return Object(Y.bindActionCreators)(e,t)}):void 0}];var S=[function(e){return"function"==typeof e?D(e):void 0},function(e){return e?void 0:T(function(){return{}})}],E=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function C(e,t,n){return E({},n,e,t)}var H=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,a=!1,i=void 0;return function(t,n,s){var u=e(t,n,s);return a?r&&o(u,i)||(i=u):(a=!0,i=u),i}}}(e):void 0},function(e){return e?void 0:function(){return C}}];function O(e,t,n,r){return function(o,a){return n(e(o,a),t(r,a),a)}}function P(e,t,n,r,o){var a=o.areStatesEqual,i=o.areOwnPropsEqual,s=o.areStatePropsEqual,u=!1,l=void 0,d=void 0,c=void 0,f=void 0,m=void 0;function _(o,u){var _,h,p=!i(u,d),y=!a(o,l);return l=o,d=u,p&&y?(c=e(l,d),t.dependsOnOwnProps&&(f=t(r,d)),m=n(c,f,d)):p?(e.dependsOnOwnProps&&(c=e(l,d)),t.dependsOnOwnProps&&(f=t(r,d)),m=n(c,f,d)):y?(_=e(l,d),h=!s(_,c),c=_,h&&(m=n(c,f,d)),m):m}return function(o,a){return u?_(o,a):(c=e(l=o,d=a),f=t(r,d),m=n(c,f,d),u=!0,m)}}function N(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,a=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,a),s=r(e,a),u=o(e,a);return(a.pure?P:O)(i,s,u,e,a)}var A=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function F(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function I(e,t){return e===t}var z=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,n=void 0===t?b:t,r=e.mapStateToPropsFactories,o=void 0===r?S:r,a=e.mapDispatchToPropsFactories,i=void 0===a?j:a,s=e.mergePropsFactories,u=void 0===s?H:s,l=e.selectorFactory,d=void 0===l?N:l;return function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},s=a.pure,l=void 0===s||s,c=a.areStatesEqual,f=void 0===c?I:c,m=a.areOwnPropsEqual,_=void 0===m?k:m,h=a.areStatePropsEqual,p=void 0===h?k:h,y=a.areMergedPropsEqual,g=void 0===y?k:y,v=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),M=F(e,o,"mapStateToProps"),b=F(t,i,"mapDispatchToProps"),L=F(r,u,"mergeProps");return n(d,A({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:M,initMapDispatchToProps:b,initMergeProps:L,pure:l,areStatesEqual:f,areOwnPropsEqual:_,areStatePropsEqual:p,areMergedPropsEqual:g},v))}}();n.d(t,"Provider",function(){return l}),n.d(t,"createProvider",function(){return u}),n.d(t,"connectAdvanced",function(){return b}),n.d(t,"connect",function(){return z})},"./node_modules/react-transition-group/CSSTransition.js":function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n("./node_modules/prop-types/index.js")),a=d(n("./node_modules/dom-helpers/class/addClass.js")),i=d(n("./node_modules/dom-helpers/class/removeClass.js")),s=d(n("./node_modules/react/index.js")),u=d(n("./node_modules/react-transition-group/Transition.js")),l=n("./node_modules/react-transition-group/utils/PropTypes.js");function d(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var f=function(e,t){return e&&t&&t.split(" ").forEach(function(t){return(0,a.default)(e,t)})},m=function(e,t){return e&&t&&t.split(" ").forEach(function(t){return(0,i.default)(e,t)})},_=(r({},u.default.propTypes,{classNames:l.classNamesShape,onEnter:o.func,onEntering:o.func,onEntered:o.func,onExit:o.func,onExiting:o.func,onExited:o.func}),function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=c(this,e.call.apply(e,[this].concat(a))),r.onEnter=function(e,t){var n=r.getClassNames(t?"appear":"enter").className;r.removeClasses(e,"exit"),f(e,n),r.props.onEnter&&r.props.onEnter(e)},r.onEntering=function(e,t){var n=r.getClassNames(t?"appear":"enter").activeClassName;r.reflowAndAddClass(e,n),r.props.onEntering&&r.props.onEntering(e)},r.onEntered=function(e,t){var n=r.getClassNames("enter").doneClassName;r.removeClasses(e,t?"appear":"enter"),f(e,n),r.props.onEntered&&r.props.onEntered(e)},r.onExit=function(e){var t=r.getClassNames("exit").className;r.removeClasses(e,"appear"),r.removeClasses(e,"enter"),f(e,t),r.props.onExit&&r.props.onExit(e)},r.onExiting=function(e){var t=r.getClassNames("exit").activeClassName;r.reflowAndAddClass(e,t),r.props.onExiting&&r.props.onExiting(e)},r.onExited=function(e){var t=r.getClassNames("exit").doneClassName;r.removeClasses(e,"exit"),f(e,t),r.props.onExited&&r.props.onExited(e)},r.getClassNames=function(e){var t=r.props.classNames,n="string"!=typeof t?t[e]:t+"-"+e;return{className:n,activeClassName:"string"!=typeof t?t[e+"Active"]:n+"-active",doneClassName:"string"!=typeof t?t[e+"Done"]:n+"-done"}},c(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.removeClasses=function(e,t){var n=this.getClassNames(t),r=n.className,o=n.activeClassName,a=n.doneClassName;r&&m(e,r),o&&m(e,o),a&&m(e,a)},t.prototype.reflowAndAddClass=function(e,t){e&&e.scrollTop,f(e,t)},t.prototype.render=function(){var e=r({},this.props);return delete e.classNames,s.default.createElement(u.default,r({},e,{onEnter:this.onEnter,onEntered:this.onEntered,onEntering:this.onEntering,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}))},t}(s.default.Component));_.propTypes={},t.default=_,e.exports=t.default},"./node_modules/react-transition-group/ReplaceTransition.js":function(e,t,n){"use strict";t.__esModule=!0;var r=s(n("./node_modules/prop-types/index.js")),o=s(n("./node_modules/react/index.js")),a=n("./node_modules/react-dom/index.js"),i=s(n("./node_modules/react-transition-group/TransitionGroup.js"));function s(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}r.default.bool.isRequired;var l=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=u(this,e.call.apply(e,[this].concat(a))),d.call(r),u(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.handleLifecycle=function(e,t,n){var r,i=this.props.children,s=o.default.Children.toArray(i)[t];s.props[e]&&(r=s.props)[e].apply(r,n),this.props[e]&&this.props[e]((0,a.findDOMNode)(this))},t.prototype.render=function(){var e=this.props,t=e.children,n=e.in,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["children","in"]),a=o.default.Children.toArray(t),s=a[0],u=a[1];return delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,o.default.createElement(i.default,r,n?o.default.cloneElement(s,{key:"first",onEnter:this.handleEnter,onEntering:this.handleEntering,onEntered:this.handleEntered}):o.default.cloneElement(u,{key:"second",onEnter:this.handleExit,onEntering:this.handleExiting,onEntered:this.handleExited}))},t}(o.default.Component),d=function(){var e=this;this.handleEnter=function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onEnter",0,n)},this.handleEntering=function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onEntering",0,n)},this.handleEntered=function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onEntered",0,n)},this.handleExit=function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onExit",1,n)},this.handleExiting=function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onExiting",1,n)},this.handleExited=function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.handleLifecycle("onExited",1,n)}};l.propTypes={},t.default=l,e.exports=t.default},"./node_modules/react-transition-group/Transition.js":function(e,t,n){"use strict";t.__esModule=!0,t.EXITING=t.ENTERED=t.ENTERING=t.EXITED=t.UNMOUNTED=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n("./node_modules/prop-types/index.js")),o=i(n("./node_modules/react/index.js")),a=i(n("./node_modules/react-dom/index.js"));n("./node_modules/react-transition-group/utils/PropTypes.js");function i(e){return e&&e.__esModule?e:{default:e}}var s=t.UNMOUNTED="unmounted",u=t.EXITED="exited",l=t.ENTERING="entering",d=t.ENTERED="entered",c=t.EXITING="exiting",f=function(e){function t(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r)),a=r.transitionGroup,i=a&&!a.isMounting?n.enter:n.appear,c=void 0;return o.nextStatus=null,n.in?i?(c=u,o.nextStatus=l):c=d:c=n.unmountOnExit||n.mountOnEnter?s:u,o.state={status:c},o.nextCallback=null,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{transitionGroup:null}},t.prototype.componentDidMount=function(){this.updateStatus(!0)},t.prototype.componentWillReceiveProps=function(e){var t=(this.pendingState||this.state).status;e.in?(t===s&&this.setState({status:u}),t!==l&&t!==d&&(this.nextStatus=l)):t!==l&&t!==d||(this.nextStatus=c)},t.prototype.componentDidUpdate=function(){this.updateStatus()},t.prototype.componentWillUnmount=function(){this.cancelNextCallback()},t.prototype.getTimeouts=function(){var e=this.props.timeout,t=void 0,n=void 0,r=void 0;return t=n=r=e,null!=e&&"number"!=typeof e&&(t=e.exit,n=e.enter,r=e.appear),{exit:t,enter:n,appear:r}},t.prototype.updateStatus=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this.nextStatus;if(null!==t){this.nextStatus=null,this.cancelNextCallback();var n=a.default.findDOMNode(this);t===l?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===u&&this.setState({status:s})},t.prototype.performEnter=function(e,t){var n=this,r=this.props.enter,o=this.context.transitionGroup?this.context.transitionGroup.isMounting:t,a=this.getTimeouts();t||r?(this.props.onEnter(e,o),this.safeSetState({status:l},function(){n.props.onEntering(e,o),n.onTransitionEnd(e,a.enter,function(){n.safeSetState({status:d},function(){n.props.onEntered(e,o)})})})):this.safeSetState({status:d},function(){n.props.onEntered(e)})},t.prototype.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n?(this.props.onExit(e),this.safeSetState({status:c},function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,function(){t.safeSetState({status:u},function(){t.props.onExited(e)})})})):this.safeSetState({status:u},function(){t.props.onExited(e)})},t.prototype.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},t.prototype.safeSetState=function(e,t){var n=this;this.pendingState=e,t=this.setNextCallback(t),this.setState(e,function(){n.pendingState=null,t()})},t.prototype.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},t.prototype.onTransitionEnd=function(e,t,n){this.setNextCallback(n),e?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},t.prototype.render=function(){var e=this.state.status;if(e===s)return null;var t=this.props,n=t.children,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return n(e,r);var a=o.default.Children.only(n);return o.default.cloneElement(a,r)},t}(o.default.Component);function m(){}f.contextTypes={transitionGroup:r.object},f.childContextTypes={transitionGroup:function(){}},f.propTypes={},f.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:m,onEntering:m,onEntered:m,onExit:m,onExiting:m,onExited:m},f.UNMOUNTED=0,f.EXITED=1,f.ENTERING=2,f.ENTERED=3,f.EXITING=4,t.default=f},"./node_modules/react-transition-group/TransitionGroup.js":function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=u(n("./node_modules/prop-types/index.js")),a=n("./node_modules/react/index.js"),i=u(a),s=n("./node_modules/react-transition-group/utils/ChildMapping.js");function u(e){return e&&e.__esModule?e:{default:e}}var l=Object.values||function(e){return Object.keys(e).map(function(t){return e[t]})},d=(o.default.any,o.default.node,o.default.bool,o.default.bool,o.default.bool,o.default.func,function(e){function t(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return o.state={children:(0,s.getChildMapping)(n.children,function(e){return(0,a.cloneElement)(e,{onExited:o.handleExited.bind(o,e),in:!0,appear:o.getProp(e,"appear"),enter:o.getProp(e,"enter"),exit:o.getProp(e,"exit")})})},o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{transitionGroup:{isMounting:!this.appeared}}},t.prototype.getProp=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.props;return null!=n[t]?n[t]:e.props[t]},t.prototype.componentDidMount=function(){this.appeared=!0},t.prototype.componentWillReceiveProps=function(e){var t=this,n=this.state.children,r=(0,s.getChildMapping)(e.children),o=(0,s.mergeChildMappings)(n,r);Object.keys(o).forEach(function(i){var s=o[i];if((0,a.isValidElement)(s)){var u=i in n,l=i in r,d=n[i],c=(0,a.isValidElement)(d)&&!d.props.in;!l||u&&!c?l||!u||c?l&&u&&(0,a.isValidElement)(d)&&(o[i]=(0,a.cloneElement)(s,{onExited:t.handleExited.bind(t,s),in:d.props.in,exit:t.getProp(s,"exit",e),enter:t.getProp(s,"enter",e)})):o[i]=(0,a.cloneElement)(s,{in:!1}):o[i]=(0,a.cloneElement)(s,{onExited:t.handleExited.bind(t,s),in:!0,exit:t.getProp(s,"exit",e),enter:t.getProp(s,"enter",e)})}}),this.setState({children:o})},t.prototype.handleExited=function(e,t){var n=(0,s.getChildMapping)(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.setState(function(t){var n=r({},t.children);return delete n[e.key],{children:n}}))},t.prototype.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["component","childFactory"]),o=l(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?o:i.default.createElement(t,r,o)},t}(i.default.Component));d.childContextTypes={transitionGroup:o.default.object.isRequired},d.propTypes={},d.defaultProps={component:"div",childFactory:function(e){return e}},t.default=d,e.exports=t.default},"./node_modules/react-transition-group/index.js":function(e,t,n){"use strict";var r=s(n("./node_modules/react-transition-group/CSSTransition.js")),o=s(n("./node_modules/react-transition-group/ReplaceTransition.js")),a=s(n("./node_modules/react-transition-group/TransitionGroup.js")),i=s(n("./node_modules/react-transition-group/Transition.js"));function s(e){return e&&e.__esModule?e:{default:e}}e.exports={Transition:i.default,TransitionGroup:a.default,ReplaceTransition:o.default,CSSTransition:r.default}},"./node_modules/react-transition-group/utils/ChildMapping.js":function(e,t,n){"use strict";t.__esModule=!0,t.getChildMapping=function(e,t){var n=Object.create(null);e&&r.Children.map(e,function(e){return e}).forEach(function(e){n[e.key]=function(e){return t&&(0,r.isValidElement)(e)?t(e):e}(e)});return n},t.mergeChildMappings=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r=Object.create(null),o=[];for(var a in e)a in t?o.length&&(r[a]=o,o=[]):o.push(a);var i=void 0,s={};for(var u in t){if(r[u])for(i=0;i<r[u].length;i++){var l=r[u][i];s[r[u][i]]=n(l)}s[u]=n(u)}for(i=0;i<o.length;i++)s[o[i]]=n(o[i]);return s};var r=n("./node_modules/react/index.js")},"./node_modules/react-transition-group/utils/PropTypes.js":function(e,t,n){"use strict";t.__esModule=!0,t.classNamesShape=t.timeoutsShape=void 0,t.transitionTimeout=function(e){var t="transition"+e+"Timeout",n="transition"+e;return function(e){if(e[n]){if(null==e[t])return new Error(t+" wasn't supplied to CSSTransitionGroup: this can cause unreliable animations and won't be supported in a future version of React. See https://fb.me/react-animation-transition-group-timeout for more information.");if("number"!=typeof e[t])return new Error(t+" must be a number (in milliseconds)")}return null}};var r,o=n("./node_modules/prop-types/index.js"),a=(r=o)&&r.__esModule?r:{default:r};t.timeoutsShape=a.default.oneOfType([a.default.number,a.default.shape({enter:a.default.number,exit:a.default.number}).isRequired]),t.classNamesShape=a.default.oneOfType([a.default.string,a.default.shape({enter:a.default.string,exit:a.default.string,active:a.default.string}),a.default.shape({enter:a.default.string,enterDone:a.default.string,enterActive:a.default.string,exit:a.default.string,exitDone:a.default.string,exitActive:a.default.string})])},"./node_modules/react/cjs/react.production.min.js":function(e,t,n){"use strict";
/** @license React v16.3.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n("./node_modules/object-assign/index.js"),o=n("./node_modules/fbjs/lib/invariant.js"),a=n("./node_modules/fbjs/lib/emptyObject.js"),i=n("./node_modules/fbjs/lib/emptyFunction.js"),s="function"==typeof Symbol&&Symbol.for,u=s?Symbol.for("react.element"):60103,l=s?Symbol.for("react.portal"):60106,d=s?Symbol.for("react.fragment"):60107,c=s?Symbol.for("react.strict_mode"):60108,f=s?Symbol.for("react.provider"):60109,m=s?Symbol.for("react.context"):60110,_=s?Symbol.for("react.async_mode"):60111,h=s?Symbol.for("react.forward_ref"):60112,p="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function v(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||g}function M(){}function b(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||g}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&y("85"),this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},M.prototype=v.prototype;var L=b.prototype=new M;L.constructor=b,r(L,v.prototype),L.isPureReactComponent=!0;var w={current:null},k=Object.prototype.hasOwnProperty,Y={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,n){var r=void 0,o={},a=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!Y.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var l=Array(s),d=0;d<s;d++)l[d]=arguments[d+2];o.children=l}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:u,type:e,key:a,ref:i,props:o,_owner:w.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===u}var D=/\/+/g,j=[];function S(e,t,n,r){if(j.length){var o=j.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function E(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function C(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var a=!1;if(null===e)a=!0;else switch(o){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case u:case l:a=!0}}if(a)return n(r,e,""===t?"."+H(e,0):t),1;if(a=0,t=""===t?".":t+":",Array.isArray(e))for(var i=0;i<e.length;i++){var s=t+H(o=e[i],i);a+=C(o,s,n,r)}else if(null===e||void 0===e?s=null:s="function"==typeof(s=p&&e[p]||e["@@iterator"])?s:null,"function"==typeof s)for(e=s.call(e),i=0;!(o=e.next()).done;)a+=C(o=o.value,s=t+H(o,i++),n,r);else"object"===o&&y("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return a}function H(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function O(e,t){e.func.call(e.context,t,e.count++)}function P(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?N(e,r,n,i.thatReturnsArgument):null!=e&&(x(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(D,"$&/")+"/")+n,e={$$typeof:u,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function N(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(D,"$&/")+"/"),t=S(t,a,r,o),null==e||C(e,"",P,t),E(t)}var A={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return N(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=S(null,null,t,n),null==e||C(e,"",O,t),E(t)},count:function(e){return null==e?0:C(e,"",i.thatReturnsNull,null)},toArray:function(e){var t=[];return N(e,t,null,i.thatReturnsArgument),t},only:function(e){return x(e)||y("143"),e}},createRef:function(){return{current:null}},Component:v,PureComponent:b,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:m,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:f,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:h,render:e}},Fragment:d,StrictMode:c,unstable_AsyncMode:_,createElement:T,cloneElement:function(e,t,n){(null===e||void 0===e)&&y("267",e);var o=void 0,a=r({},e.props),i=e.key,s=e.ref,l=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,l=w.current),void 0!==t.key&&(i=""+t.key);var d=void 0;for(o in e.type&&e.type.defaultProps&&(d=e.type.defaultProps),t)k.call(t,o)&&!Y.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==d?d[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){d=Array(o);for(var c=0;c<o;c++)d[c]=arguments[c+2];a.children=d}return{$$typeof:u,type:e.type,key:i,ref:s,props:a,_owner:l}},createFactory:function(e){var t=T.bind(null,e);return t.type=e,t},isValidElement:x,version:"16.3.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:w,assign:r}},F=Object.freeze({default:A}),I=F&&A||F;e.exports=I.default?I.default:I},"./node_modules/react/index.js":function(e,t,n){"use strict";e.exports=n("./node_modules/react/cjs/react.production.min.js")},"./node_modules/redux-thunk/lib/index.js":function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}t.__esModule=!0;var o=r();o.withExtraArgument=r,t.default=o},"./node_modules/redux/es/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/lodash-es/isPlainObject.js"),o=n("./node_modules/symbol-observable/es/index.js"),a={INIT:"@@redux/INIT"};function i(e,t,n){var s;if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(i)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var u=e,l=t,d=[],c=d,f=!1;function m(){c===d&&(c=d.slice())}function _(){return l}function h(e){if("function"!=typeof e)throw new Error("Expected listener to be a function.");var t=!0;return m(),c.push(e),function(){if(t){t=!1,m();var n=c.indexOf(e);c.splice(n,1)}}}function p(e){if(!Object(r.a)(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(f)throw new Error("Reducers may not dispatch actions.");try{f=!0,l=u(l,e)}finally{f=!1}for(var t=d=c,n=0;n<t.length;n++){(0,t[n])()}return e}return p({type:a.INIT}),(s={dispatch:p,subscribe:h,getState:_,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");u=e,p({type:a.INIT})}})[o.a]=function(){var e,t=h;return(e={subscribe:function(e){if("object"!=typeof e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(_())}return n(),{unsubscribe:t(n)}}})[o.a]=function(){return this},e},s}function s(e,t){var n=t&&t.type;return"Given action "+(n&&'"'+n.toString()+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function u(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i=Object.keys(n);var u=void 0;try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:a.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+a.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){u=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(u)throw u;for(var r=!1,o={},a=0;a<i.length;a++){var l=i[a],d=n[l],c=e[l],f=d(c,t);if(void 0===f){var m=s(l,t);throw new Error(m)}o[l]=f,r=r||f!==c}return r?o:e}}function l(e,t){return function(){return t(e.apply(void 0,arguments))}}function d(e,t){if("function"==typeof e)return l(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var a=n[o],i=e[a];"function"==typeof i&&(r[a]=l(i,t))}return r}function c(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}var f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function m(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(n,r,o){var a,i=e(n,r,o),s=i.dispatch,u={getState:i.getState,dispatch:function(e){return s(e)}};return a=t.map(function(e){return e(u)}),s=c.apply(void 0,a)(i.dispatch),f({},i,{dispatch:s})}}}n.d(t,"createStore",function(){return i}),n.d(t,"combineReducers",function(){return u}),n.d(t,"bindActionCreators",function(){return d}),n.d(t,"applyMiddleware",function(){return m}),n.d(t,"compose",function(){return c})},"./node_modules/symbol-observable/es/index.js":function(e,t,n){"use strict";(function(e,r){var o,a=n("./node_modules/symbol-observable/es/ponyfill.js");o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(a.a)(o);t.a=i}).call(this,n("./node_modules/webpack/buildin/global.js"),n("./node_modules/webpack/buildin/harmony-module.js")(e))},"./node_modules/symbol-observable/es/ponyfill.js":function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},"./node_modules/uuid/index.js":function(e,t,n){var r=n("./node_modules/uuid/v1.js"),o=n("./node_modules/uuid/v4.js"),a=o;a.v1=r,a.v4=o,e.exports=a},"./node_modules/uuid/lib/bytesToUuid.js":function(e,t){for(var n=[],r=0;r<256;++r)n[r]=(r+256).toString(16).substr(1);e.exports=function(e,t){var r=t||0,o=n;return o[e[r++]]+o[e[r++]]+o[e[r++]]+o[e[r++]]+"-"+o[e[r++]]+o[e[r++]]+"-"+o[e[r++]]+o[e[r++]]+"-"+o[e[r++]]+o[e[r++]]+"-"+o[e[r++]]+o[e[r++]]+o[e[r++]]+o[e[r++]]+o[e[r++]]+o[e[r++]]}},"./node_modules/uuid/lib/rng-browser.js":function(e,t){var n="undefined"!=typeof crypto&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&msCrypto.getRandomValues.bind(msCrypto);if(n){var r=new Uint8Array(16);e.exports=function(){return n(r),r}}else{var o=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),o[t]=e>>>((3&t)<<3)&255;return o}}},"./node_modules/uuid/v1.js":function(e,t,n){var r,o,a=n("./node_modules/uuid/lib/rng-browser.js"),i=n("./node_modules/uuid/lib/bytesToUuid.js"),s=0,u=0;e.exports=function(e,t,n){var l=t&&n||0,d=t||[],c=(e=e||{}).node||r,f=void 0!==e.clockseq?e.clockseq:o;if(null==c||null==f){var m=a();null==c&&(c=r=[1|m[0],m[1],m[2],m[3],m[4],m[5]]),null==f&&(f=o=16383&(m[6]<<8|m[7]))}var _=void 0!==e.msecs?e.msecs:(new Date).getTime(),h=void 0!==e.nsecs?e.nsecs:u+1,p=_-s+(h-u)/1e4;if(p<0&&void 0===e.clockseq&&(f=f+1&16383),(p<0||_>s)&&void 0===e.nsecs&&(h=0),h>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");s=_,u=h,o=f;var y=(1e4*(268435455&(_+=122192928e5))+h)%4294967296;d[l++]=y>>>24&255,d[l++]=y>>>16&255,d[l++]=y>>>8&255,d[l++]=255&y;var g=_/4294967296*1e4&268435455;d[l++]=g>>>8&255,d[l++]=255&g,d[l++]=g>>>24&15|16,d[l++]=g>>>16&255,d[l++]=f>>>8|128,d[l++]=255&f;for(var v=0;v<6;++v)d[l+v]=c[v];return t||i(d)}},"./node_modules/uuid/v4.js":function(e,t,n){var r=n("./node_modules/uuid/lib/rng-browser.js"),o=n("./node_modules/uuid/lib/bytesToUuid.js");e.exports=function(e,t,n){var a=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var i=(e=e||{}).random||(e.rng||r)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,t)for(var s=0;s<16;++s)t[a+s]=i[s];return t||o(i)}},"./node_modules/webpack/buildin/global.js":function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},"./node_modules/webpack/buildin/harmony-module.js":function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},"./node_modules/webpack/buildin/module.js":function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},"./source/data/base_events.json":function(e){e.exports={storagName:"base-events",tasks:[{data:{start:"2018-05-14",end:"2018-05-15"},type:"development",details:"Diatrias sunt classiss de gratis turpis. ",name:"Cum hydra observare, omnes orgiaes perdere flavum, bassus ususes.",id:"57b4c232-d39e-46ae-9c5d-fb53d0661b83",color:"#0BE0D9"},{data:{start:"2018-04-14",end:"2018-05-10"},type:"Обязательные",details:"Diatrias sunt classiss de gratis turpis. ",name:"Silvas unda",id:"7c000971-bf58-48da-b66c-c1bf62d3694f",color:"#0BD696"},{data:{start:"2018-05-06",end:"2018-05-07"},type:"Обязательные",details:"Diatrias sunt classiss de gratis turpis. ",name:"Eheu, cobaltum!",id:"796e5505-321d-40b9-a9c6-7840ae245265",color:"#0B76E0"},{data:{start:"2018-05-19",end:"2018-05-20"},type:"Второстепенные",details:"Cannabis de secundus cobaltum, experientia repressor.",name:"Castors manducare",id:"ccfee643-edf6-44ef-a19b-df85f75de45f",color:"#0B3BD6"}]}},"./source/data/base_google.json":function(e){e.exports={storagName:"base-google",tasks:[]}},"./source/data/initial_state.json":function(e){e.exports={storagName:"redux-store",tasks:[],modalHidden:{events:null,data:null,hidden:!1},panelState:{checkMark:!1},googleAuth:!1}},"./source/lib/UI/calendar.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=f(n("./node_modules/react/index.js")),a=f(n("./node_modules/prop-types/index.js")),i=f(n("./source/lib/UI/modal.js")),s=f(n("./source/lib/UI/chart_tasks.js")),u=f(n("./source/lib/UI/week.js")),l=f(n("./source/lib/UI/empty_day.js")),d=f(n("./source/lib/UI/month.js")),c=n("./source/lib/logic/factory.js");function f(e){return e&&e.__esModule?e:{default:e}}var m=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={isToggleOn:0,classAnimations:!1},n.handleClick=n.handleClick.bind(n),n.handleClickBack=n.handleClickBack.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"handleClick",value:function(){var e=this;this.setState(function(t){return{isToggleOn:e.state.isToggleOn+1,classAnimations:!0}}),setTimeout(function(){return e.setState(function(e){return{classAnimations:!1}})},300)}},{key:"handleClickBack",value:function(){var e=this;this.setState(function(t){return{isToggleOn:e.state.isToggleOn-1,classAnimations:!0}}),setTimeout(function(){return e.setState(function(e){return{classAnimations:!1}})},300)}},{key:"render",value:function(){var e=this.state,t=e.isToggleOn,n=e.classAnimations;return o.default.createElement("div",{id:"app"},o.default.createElement("div",{id:"calendar"},o.default.createElement(i.default,null),o.default.createElement("div",{className:"caledarHeader"},o.default.createElement("span",{className:"button-previos",onClick:this.handleClickBack}),o.default.createElement("p",{className:n?"animation":null},(0,c.timeCalculation)(t).data.format("YYYY MMMM")),o.default.createElement("span",{className:"button-next",onClick:this.handleClick})),o.default.createElement("div",{className:"calendarWrapper"},o.default.createElement(u.default,null),o.default.createElement(l.default,{monthCounter:t}),o.default.createElement(d.default,{monthCounter:t}))),o.default.createElement(s.default,{monthCounter:t}))}}]),t}();m.defaultProps={ingredients:0,steps:0,title:"[recipe]"},m.contextTypes={store:a.default.object},t.default=m},"./source/lib/UI/chart_tasks.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n("./node_modules/react/index.js"),i=(r=a)&&r.__esModule?r:{default:r},s=n("./node_modules/d3/index.js"),u=n("./source/lib/logic/factory.js"),l=n("./source/lib/store/index.js");var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.createBarChart=n.createBarChart.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.Component),o(t,[{key:"componentWillMount",value:function(){var e=this;this.unsubscribe=l.storeEvent.subscribe(function(){return e.forceUpdate()}),this.unsubscribeGoogle=l.storeGoogle.subscribe(function(){return e.forceUpdate()})}},{key:"componentWillUnmount",value:function(){this.unsubscribe(),this.unsubscribeGoogle()}},{key:"componentDidMount",value:function(){this.createBarChart()}},{key:"componentWillUpdate",value:function(){(0,s.select)("#parentChart").remove()}},{key:"componentDidUpdate",value:function(){this.createBarChart()}},{key:"createBarChart",value:function(){var e=700,t=(0,u.dayTaskmanSort)(this.props.monthCounter);0===t.length&&(t=[{data:{start:""+(0,u.substrateData)(this.props.monthCounter).dataStartOf,end:""+(0,u.substrateData)(this.props.monthCounter).dataEndOf},type:" ",details:"",name:"No tasks",id:"a1111111",color:"none"}]);var n=(0,s.select)("#chart").append("svg").attr("width",e).attr("id","parentChart").attr("height",400).attr("class","svg"),r=(0,s.timeParse)("%Y-%m-%d"),o=(0,s.scaleTime)().domain([(0,s.min)(t,function(e){return r(e.data.start)}),(0,s.max)(t,function(e){return r((0,u.oneDayMore)(e.data.end))})]).range([0,550]).nice(),a=t.map(function(e){return e.type}),i=a;a=function(e){for(var t={},n=[],r=0,o=e.length;r<o;++r)t.hasOwnProperty(e[r])||(t[e[r]]=!0,n.push(e[r]));return n}(a),function(e,t,l){var d=(0,s.scaleLinear)().domain([0,a.length]).range(["#00B9FA","#F95002"]).interpolate(s.interpolateHclLong);c=120,f=75,m=l,_=(0,s.axisBottom)(o).ticks(s.timeDay,1).tickSize(-m+f+20,0,0).tickFormat((0,s.timeFormat)("%d")),h=n.append("g").attr("class","grid").attr("transform","translate("+c+", "+(m-50)+")").call(_),h.selectAll("line").attr("stroke","#269fd8"),h.selectAll("text").style("text-anchor","middle").attr("fill","#000000").attr("font-size",10).attr("dy","1em"),function(e,t,i,l,d,c,f,m){n.append("g").selectAll("rect").data(e).enter().append("rect").attr("x",0).attr("y",function(e,n){return n*t+i-2}).attr("width",function(e){return f}).attr("height",t).attr("stroke","none").attr("fill",function(e){for(var t=0;t<a.length;t++)if(e.type==a[t])return(0,s.rgb)(c(t))}).attr("opacity",.2);var _=n.append("g").selectAll("rect").data(e).enter();_.append("rect").attr("rx",3).attr("ry",3).attr("class","rectBlock").attr("x",function(e){return o(r(e.data.start))+l}).attr("y",function(e,n){return n*t+i}).attr("width",function(e){return o(r((0,u.oneDayMore)(e.data.end)))-o(r(e.data.start))}).attr("height",d).attr("stroke","none").attr("fill",function(e){for(var t=0;t<a.length;t++)if(e.type==a[t])return e.color}),_.append("text").text(function(e){return e.name}).attr("x",function(e){return(o(r(e.data.end))-o(r(e.data.start)))/2+o(r(e.data.start))+l}).attr("y",function(e,n){return n*t+14+i}).attr("font-size",11).attr("text-anchor","middle").attr("text-height",d).attr("fill","#000000");_.append("rect").attr("rx",3).attr("ry",3).attr("class","rectBlock").attr("x",function(e){return o(r(e.data.start))+l}).attr("y",function(e,n){return n*t+i}).attr("width",function(e){return o(r((0,u.oneDayMore)(e.data.end)))-o(r(e.data.start))}).attr("height",d).attr("stroke","none").attr("opacity",0).on("mouseover",function(e){var t="";t=void 0!=(0,s.select)(this).data()[0].details?"Task: "+(0,s.select)(this).data()[0].name+"<br/>Type: "+(0,s.select)(this).data()[0].type+"<br/>Starts: "+(0,s.select)(this).data()[0].data.start+"<br/>Ends: "+(0,s.select)(this).data()[0].data.end+"<br/>Details: "+(0,s.select)(this).data()[0].details:"Task: "+(0,s.select)(this).data()[0].name+"<br/>Type: "+(0,s.select)(this).data()[0].type+"<br/>Starts: "+(0,s.select)(this).data()[0].data.start+"<br/>Ends: "+(0,s.select)(this).data()[0].data.end;var n=document.getElementById("tag"),r=this.x.animVal.value+this.width.animVal.value/2+"px",o=this.y.animVal.value+35+"px";n.innerHTML=t,n.style.top=o,n.style.left=r,n.style.display="block"}).on("mouseout",function(){var e=document.getElementById("tag");e.style.display="none"})}(e,24,75,120,20,d,t),function(e,t,r,o,u){for(var l=[],d=0,c=0;c<a.length;c++)l[c]=[a[c],(f=a[c],m=i,function(e){var t=e.length,n={};for(;t;)n[e[--t]]=(n[e[t]]||0)+1;return n}(m)[f]||0)];var f,m;n.append("g").selectAll("text").data(l).enter().append("text").text(function(e){return e[0]}).attr("x",10).attr("y",function(n,r){if(!(r>0))return n[1]*e/2+t;for(var o=0;o<r;o++)return d+=l[r-1][1],n[1]*e/2+d*e+t}).attr("font-size",11).attr("text-anchor","start").attr("text-height",14).attr("fill",function(e){for(var t=0;t<a.length;t++)if(e[0]==a[t])return(0,s.rgb)(u(t)).darker()})}(24,75,0,0,d);var c,f,m,_,h}(t,e,400);n.append("text").text("Задачи на месяц").attr("x",350).attr("y",25).attr("text-anchor","middle").attr("font-size",18).attr("fill","#009FFC")}},{key:"render",value:function(){return i.default.createElement("div",{id:"chart"},i.default.createElement("div",{id:"tag"}))}}]),t}();t.default=d},"./source/lib/UI/constants.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.orderFormElements=["EVENT_START","EVENT_NAME","EVENT_DESCRIPTION","EVENT_COLOR","EVENT_TYPE","EVENT_END","CONFIRMATION"]},"./source/lib/UI/day.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n("./source/lib/logic/factory.js"),i=n("./source/lib/store/index.js"),s=n("./node_modules/react/index.js"),u=(r=s)&&r.__esModule?r:{default:r},l=n("./source/lib/store/actions.js");var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),r=n.props.monthCounter;return n.activeDay=0===r&&(0,a.timeCalculation)().now,n.openModal=n.openModal.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),o(t,[{key:"shouldComponentUpdate",value:function(e,t){var n=this.props,r=n.events;return!(n.data===e.data)||(e.events&&r?r.length!==e.events.length:(null!==e.events||null!==r)&&(null===e.events&&null!==r||(null===r&&null!==e.events||void 0)))}},{key:"componentDidUpdate",value:function(){var e=this.props.data;i.store.getState().modalHidden.data===e&&i.store.dispatch((0,l._modalHidden)(this.props))}},{key:"openModal",value:function(){i.store.getState().modalHidden.hidden?i.store.dispatch((0,l._modalHidden)(!1)):i.store.dispatch((0,l._modalHidden)(!0,this.props))}},{key:"render",value:function(){var e=this.activeDay,t=this.props,n=t.dayNumber,r=t.events,o=t.data,i=r?r.map(function(e){return e.color}):null,s=(0,a.createLabelEvent)(i);return u.default.createElement("div",{className:e&&e===o?"day active":"day",onClick:this.openModal},s,u.default.createElement("p",null,n+1))}}]),t}();t.default=d},"./source/lib/UI/empty_day.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n("./source/lib/logic/factory.js");t.default=function(e){var t=e.monthCounter,n=(0,r.createEmptyDay)(t);return!!n&&n.map(function(e){return e})}},"./source/lib/UI/modal.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=f(n("./node_modules/react/index.js")),i=n("./source/lib/store/index.js"),s=n("./source/lib/store/actions.js"),u=f(n("./source/lib/UI/modal_components/index.js")),l=f(n("./source/lib/UI/modal_components/event_item.js")),d=n("./source/lib/logic/factory.js"),c=n("./source/lib/UI/constants.js");function f(e){return e&&e.__esModule?e:{default:e}}var m=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"componentWillMount",value:function(){var e=this;this.unsubscribe=i.store.subscribe(function(){return e.forceUpdate()})}},{key:"componentWillUnmount",value:function(){this.unsubscribe()}},{key:"render",value:function(){var e=i.store.getState().modalHidden||null,t=e.events,n=e.hidden,o=e.data,f=i.store.getState().panelState.checkMark,m=i.store.getState().panelState.state||c.orderFormElements[0];return console.log(t),a.default.createElement("div",{id:"modal",className:n?"open":""},a.default.createElement("div",{className:"wrapperEvent"},a.default.createElement("p",null,o),Array.isArray(t)?t.map(function(e,t){return a.default.createElement(l.default,r({},e,{key:"event-"+t}))}):a.default.createElement("div",{id:"no-events",className:"event"},a.default.createElement("p",null,"Нет событий"))),a.default.createElement("div",{className:"modalControlPanel"},a.default.createElement(u.default,{id:"idControl",data:o,nextState:d.nextState,key:"modalControlPanel"}),m!==c.orderFormElements[0]?a.default.createElement("span",{className:"close",onClick:function(){i.store.dispatch((0,s._panelButton)(!1)),i.store.dispatch((0,s._panelState)(c.orderFormElements[0]))}}):null,!!f&&a.default.createElement("span",{className:"checked",onClick:d.dataControl})))}}]),t}();t.default=m},"./source/lib/UI/modal_components/color.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n("./source/lib/store/index.js"),i=n("./source/lib/store/actions.js"),s=n("./node_modules/react/index.js"),u=(r=s)&&r.__esModule?r:{default:r};n("./source/lib/UI/constants.js");var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.setSelectedInputRef=function(e){"color-1"!==e.target.id?n.setState(function(){return{firstChecked:!1}}):n.setState(function(){return{firstChecked:!0}}),e.target.parentNode.dataset.value=e.target.value},n.setSelectedInputRef=n.setSelectedInputRef.bind(n),n.state={firstChecked:!0},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),o(t,[{key:"componentDidMount",value:function(){!this.props.excerpt&&a.store.dispatch((0,i._panelButton)(!0))}},{key:"render",value:function(){var e=this.state.firstChecked;return u.default.createElement("div",{id:"controlElement","data-value":"#0BE0D9",className:"colorSelection elementAbsolute"},u.default.createElement("input",{checked:e,onChange:this.setSelectedInputRef,id:"color-1",name:"color",type:"radio",value:"#0BE0D9"}),u.default.createElement("label",{style:{backgroundColor:"#0BE0D9"},htmlFor:"color-1"}),u.default.createElement("input",{onChange:this.setSelectedInputRef,id:"color-2",name:"color",type:"radio",value:"#0BD696"}),u.default.createElement("label",{style:{backgroundColor:"#0BD696"},htmlFor:"color-2"}),u.default.createElement("input",{onChange:this.setSelectedInputRef,id:"color-3",name:"color",type:"radio",value:"#0B76E0"}),u.default.createElement("label",{style:{backgroundColor:"#0B76E0"},htmlFor:"color-3"}),u.default.createElement("input",{onChange:this.setSelectedInputRef,id:"color-4",name:"color",type:"radio",value:"#0B3BD6"}),u.default.createElement("label",{style:{backgroundColor:"#0B3BD6"},htmlFor:"color-4"}))}}]),t}();t.default=l},"./source/lib/UI/modal_components/confirmation.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n("./source/lib/store/actions.js"),i=n("./source/lib/store/index.js"),s=n("./source/lib/UI/constants.js"),u=n("./node_modules/react/index.js"),l=(r=u)&&r.__esModule?r:{default:r};var d=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,l.default.Component),o(t,[{key:"componentDidMount",value:function(){i.storeEvent.dispatch((0,a._tasks)(i.store.getState().tempTask)),i.store.dispatch((0,a._panelState)(s.orderFormElements[0])),console.log(i.storeEvent.getState())}},{key:"render",value:function(){return l.default.createElement("div",{className:"elementAbsolute"})}}]),t}();t.default=d},"./source/lib/UI/modal_components/description.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n("./source/lib/store/index.js"),i=n("./source/lib/logic/factory.js"),s=n("./node_modules/react/index.js"),u=(r=s)&&r.__esModule?r:{default:r};n("./source/lib/UI/constants.js"),n("./source/lib/store/actions.js");var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.onTestChange=function(e){var t=n.refs._title.value,r=a.store.getState().panelState.checkMark;(0,i.helperComponent)(t,r,e)},n.onTestChange=n.onTestChange.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),o(t,[{key:"render",value:function(){var e=this.props.excerpt?null:this.onTestChange;return u.default.createElement("textarea",{id:"controlElement",key:"textarea",ref:"_title",onKeyDown:e,rows:"3",autoComplete:"off",placeholder:"Description event",className:"elementAbsolute elementForm",name:"descriptionEvents"})}}]),t}();t.default=l},"./source/lib/UI/modal_components/end_event.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n("./source/lib/store/index.js"),i=n("./node_modules/react/index.js"),s=(r=i)&&r.__esModule?r:{default:r},u=n("./source/lib/logic/factory.js"),l=n("./source/lib/store/actions.js");n("./source/lib/UI/constants.js");var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleChange=function(e){var t=e.target.value,r=n.state.selectedDate,o=r.year,a=r.month,i=r.day;switch(e.target.name){case"year":n.setState(function(){return{selectedDate:{year:t,month:a,day:i}}});break;case"month":n.setState(function(){return{selectedDate:{year:o,month:t,day:i}}});break;case"day":n.setState(function(){return{selectedDate:{year:o,month:a,day:t}}})}},n.handleChange=n.handleChange.bind(n),n.state={selectedDate:{year:null,month:null,day:null}},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,s.default.Component),o(t,[{key:"componentDidMount",value:function(){a.store.dispatch((0,l._panelButton)(!0))}},{key:"componentDidUpdate",value:function(){var e=this.refs._month.value<10?"0"+this.refs._month.value:this.refs._month.value,t=this.refs._day.value<10?"0"+this.refs._day.value:this.refs._day.value,n=this.refs._year.value+"-"+e+"-"+t;document.getElementById("controlElement").dataset.value=n}},{key:"render",value:function(){var e=this.props.data,t=this.state.selectedDate;return s.default.createElement("div",{id:"controlElement","data-value":e,className:"endEvent elementAbsolute"},s.default.createElement("select",{ref:"_year",name:"year",onChange:this.handleChange},(0,u.validationEndingDate)(e,t,"year").map(function(e,t){return s.default.createElement("option",{key:"year"+t},e)})),s.default.createElement("select",{ref:"_month",name:"month",onChange:this.handleChange},(0,u.validationEndingDate)(e,t,"month").map(function(e,t){return s.default.createElement("option",{key:"month"+t},e)})),s.default.createElement("select",{ref:"_day",name:"day",onChange:this.handleChange},(0,u.validationEndingDate)(e,t,"day").map(function(e,t){return s.default.createElement("option",{key:"day"+t},e)})))}}]),t}();t.default=d},"./source/lib/UI/modal_components/event_item.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=i(n("./node_modules/react/index.js")),a=(i(n("./source/lib/UI/modal_components/name.js")),i(n("./source/lib/UI/modal_components/color.js")),i(n("./source/lib/UI/modal_components/description.js")),n("./source/lib/store/reducers.js"),n("./source/lib/store/index.js"));function i(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.onChangeEvent=n.onChangeEvent.bind(n),n.state={info:!1,changeMenu:!1},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"onChangeEvent",value:function(e){var t=this;switch(e){case"info":this.setState(function(){return{info:!t.state.info,changeMenu:!1}});break;case"edit":this.setState(function(){return{changeMenu:!t.state.changeMenu}});break;case"close":this.setState(function(){return{changeMenu:!1,info:!1}});break;case"delet":a.storeEvent.dispatch({type:"REMOVE_TASK",value:this.props.id}),this.setState(function(){return{changeMenu:!1,info:!1}})}}},{key:"render",value:function(){var e=this,t=this.props,n=t.color,r=t.name,a=t.id,i=t.details,s=t.type,u=t.data,l=this.state,d=l.info,c=l.changeMenu;console.log("Google event"===s);var f=o.default.createElement("div",{className:"infoEvent",style:{borderBottom:"1px solid "+n}},o.default.createElement("p",null,"Описаие: ",o.default.createElement("span",{style:{color:""+n}},""+i)),o.default.createElement("p",null," Тип: ",o.default.createElement("span",{style:{color:""+n}},""+s)),o.default.createElement("p",null,"Продолжительность: ",o.default.createElement("br",null),o.default.createElement("span",{style:{color:""+n}},u.start+" - "+u.end)),o.default.createElement("p",{style:{display:"inline",position:"relative"}},"Цвет:",o.default.createElement("span",{style:{backgroundColor:n,width:"18px",height:"18px",display:"block",borderRadius:"50%",right:"-24px",margin:"auto",position:"absolute",top:0,bottom:0}})),o.default.createElement("div",{className:"panelChangeEvent"},"Google event"!==s&&o.default.createElement("span",{onClick:function(){return e.onChangeEvent("delet")},className:"checked-info-event-delet checked-info-event"}),o.default.createElement("span",{onClick:function(){return e.onChangeEvent("close")},className:"checked-info-event-close checked-info-event"})));return o.default.createElement("div",{className:"event"},o.default.createElement("p",{className:"event-name",id:a,onClick:function(){return e.onChangeEvent("info")},style:{borderBottom:"1px solid "+n}},r),d&&!1===c?f:!(!d||!c)&&ControlerChangeEvent)}}]),t}();t.default=s},"./source/lib/UI/modal_components/index.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n("./source/lib/store/index.js"),a=n("./source/lib/UI/constants.js"),i=h(n("./node_modules/react/index.js")),s=n("./node_modules/react-transition-group/index.js"),u=h(n("./source/lib/UI/modal_components/name.js")),l=h(n("./source/lib/UI/modal_components/initial.js")),d=h(n("./source/lib/UI/modal_components/description.js")),c=h(n("./source/lib/UI/modal_components/color.js")),f=h(n("./source/lib/UI/modal_components/type.js")),m=h(n("./source/lib/UI/modal_components/confirmation.js")),_=h(n("./source/lib/UI/modal_components/end_event.js"));function h(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.Component),r(t,[{key:"render",value:function(){var e=o.store.getState().panelState.state,t=this.props,n=t.nextState,r=t.data;return i.default.createElement(s.TransitionGroup,{component:null},function(){switch(e){case a.orderFormElements[1]:return i.default.createElement(s.CSSTransition,{key:"list2",classNames:"leftEmersion",timeout:500},i.default.createElement(u.default,{nextState:n,key:"name"}));case a.orderFormElements[2]:return i.default.createElement(s.CSSTransition,{key:"list3",classNames:"dissolution",timeout:500},i.default.createElement(d.default,{nextState:n,key:"details"}));case a.orderFormElements[3]:return i.default.createElement(s.CSSTransition,{key:"list4",classNames:"rightEmersion",timeout:500},i.default.createElement(c.default,{key:"colors"}));case a.orderFormElements[4]:return i.default.createElement(s.CSSTransition,{key:"list5",classNames:"leftEmersion",timeout:500},i.default.createElement(f.default,{nextState:n,key:"type"}));case a.orderFormElements[5]:return i.default.createElement(s.CSSTransition,{key:"list6",classNames:"rightEmersion",timeout:500},i.default.createElement(_.default,{data:r,key:"endEventKey"}));case a.orderFormElements[6]:return i.default.createElement(s.CSSTransition,{key:"list7",classNames:"rightEmersion",timeout:500},i.default.createElement(m.default,{key:"confirmation"}));default:return i.default.createElement(s.CSSTransition,{key:"list1",classNames:"dissolution",timeout:1e3},i.default.createElement(l.default,{data:r,key:"button"}))}}())}}]),t}();t.default=p},"./source/lib/UI/modal_components/initial.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n("./source/lib/store/actions.js"),a=n("./source/lib/store/index.js"),i=n("./node_modules/react/index.js"),s=(r=i)&&r.__esModule?r:{default:r},u=n("./source/lib/logic/factory.js");t.default=function(e){return s.default.createElement("button",{key:"button",onClick:function(){a.store.dispatch((0,o._panelState)((0,u.nextState)())),a.store.dispatch((0,o._tempTask)({EVENT_START:e.data}))},className:"createEvent"},"Создать событие")}},"./source/lib/UI/modal_components/name.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n("./source/lib/store/index.js"),i=n("./source/lib/logic/factory.js"),s=n("./node_modules/react/index.js"),u=(r=s)&&r.__esModule?r:{default:r};var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.onTestChange=function(e){var t=n.refs._title.value,r=a.store.getState().panelState.checkMark;(0,i.helperComponent)(t,r,e)},n.onTestChange=n.onTestChange.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),o(t,[{key:"render",value:function(){var e=this.props.excerpt?null:this.onTestChange;return u.default.createElement("input",{placeholder:"Name event",id:"controlElement",className:"elementAbsolute elementForm",onKeyDown:e,ref:"_title"})}}]),t}();t.default=l},"./source/lib/UI/modal_components/type.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n("./source/lib/store/index.js"),i=n("./source/lib/logic/factory.js"),s=(n("./source/lib/UI/constants.js"),n("./node_modules/react/index.js")),u=(r=s)&&r.__esModule?r:{default:r};n("./source/lib/store/actions.js");var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.onTestChange=function(e){var t=n.refs._title.value,r=a.store.getState().panelState.checkMark;(0,i.helperComponent)(t,r,e)},n.onTestChange=n.onTestChange.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),o(t,[{key:"render",value:function(){return u.default.createElement("input",{placeholder:"Type event",id:"controlElement",className:"elementAbsolute elementForm",onKeyDown:this.onTestChange,ref:"_title"})}}]),t}();t.default=l},"./source/lib/UI/month.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n("./source/lib/store/index.js"),i=l(n("./node_modules/react/index.js")),s=n("./source/lib/logic/factory.js"),u=l(n("./source/lib/UI/day.js"));function l(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.Component),o(t,[{key:"componentWillMount",value:function(){var e=this;this.unsubscribe=a.storeEvent.subscribe(function(){return e.forceUpdate()}),this.unsubscribeGoogle=a.storeGoogle.subscribe(function(){return e.forceUpdate()})}},{key:"componentWillUnmount",value:function(){this.unsubscribe(),this.unsubscribeGoogle()}},{key:"render",value:function(){var e=this.props.monthCounter;return(0,s.dayComponentSort)(e).map(function(t,n){return i.default.createElement(u.default,r({monthCounter:e,key:"day-"+n},t,{dayNumber:n}))})}}]),t}();t.default=d},"./source/lib/UI/week.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n("./source/lib/logic/factory.js"),a=n("./node_modules/react/index.js"),i=(r=a)&&r.__esModule?r:{default:r};t.default=function(){return(0,o.timeCalculation)().dayWeek.map(function(e){return i.default.createElement("div",{key:e},i.default.createElement("p",null,e))})}},"./source/lib/api.js":function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=window.gapi=window.gapi||{};o._bs=(new Date).getTime(),function(){var e,t=window,n=document,o=t.location,a=function(){},i=/\[native code\]/,s=function(e,t,n){return e[t]=e[t]||n},u=function(){var e;if((e=Object.create)&&i.test(e))e=e(null);else for(var t in e={})e[t]=void 0;return e},l=s(t,"gapi",{});e=s(t,"___jsl",u()),s(e,"I",0),s(e,"hel",10);var d=function(){var t=o.href;if(e.dpo)var n=e.h;else{n=e.h;if(t=t&&(/([#].*&|[#])jsh=([^&#]*)/g.exec(t)||/([?#].*&|[?#])jsh=([^&#]*)/g.exec(t)))try{n=decodeURIComponent(t[2])}catch(e){}}return n},c=function(t){return s(s(e,"H",u()),t,u())},f=s(e,"perf",u()),m=s(f,"g",u()),_=s(f,"i",u());s(f,"r",[]),u(),u();var h=function(e,t,n){var r=f.r;"function"==typeof r?r(e,t,n):r.push([e,t,n])},p=function(e,t,n){t&&0<t.length&&(t=y(t),n&&0<n.length&&(t+="___"+y(n)),28<t.length&&(t=t.substr(0,28)+(t.length-28)),n=t,t=s(_,"_p",u()),s(t,n,u())[e]=(new Date).getTime(),h(e,"_p",n))},y=function(e){return e.join("__").replace(/\./g,"_").replace(/\-/g,"_").replace(/,/g,"_")},g=u(),v=[],M=function(e){throw Error("Bad hint"+(e?": "+e:""))};v.push(["jsl",function(t){for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var o=t[n];"object"==(void 0===o?"undefined":r(o))?e[n]=s(e,n,[]).concat(o):s(e,n,o)}(n=t.u)&&((t=s(e,"us",[])).push(n),(n=/^https:(.*)$/.exec(n))&&t.push("http:"+n[1]))}]);var b=/^(\/[a-zA-Z0-9_\-]+)+$/,L=[/\/amp\//,/\/amp$/,/^\/amp$/],w=/^[a-zA-Z0-9\-_\.,!]+$/,k=/^gapi\.loaded_[0-9]+$/,Y=/^[a-zA-Z0-9,._-]+$/,T=function(e){"/"!==e.charAt(0)&&M("relative path");for(var t=e.substring(1).split("/"),n=[];t.length;){if((e=t.shift()).length&&0!=e.indexOf(".")){if(0<e.indexOf("=")){t.unshift(e);break}}else M("empty/relative directory");n.push(e)}e={};for(var r=0,o=t.length;r<o;++r){var a=t[r].split("="),i=decodeURIComponent(a[0]),s=decodeURIComponent(a[1]);2==a.length&&i&&s&&(e[i]=e[i]||s)}for(t="/"+n.join("/"),b.test(t)||M("invalid_prefix"),n=0,r=L.length;n<r;++n)L[n].test(t)&&M("invalid_prefix");return{pathPrefix:t,version:n=D(e,"k",!0),a:r=D(e,"am"),c:o=D(e,"rs"),f:e=D(e,"t")}},x=function(e){for(var t=[],n=0,r=e.length;n<r;++n){var o=e[n].replace(/\./g,"_").replace(/-/g,"_");Y.test(o)&&t.push(o)}return t.join(",")},D=function(e,t,n){if(!(e=e[t])&&n&&M("missing: "+t),e){if(w.test(e))return e;M("invalid: "+t)}return null},j=/^https?:\/\/[a-z0-9_.-]+\.google(rs)?\.com(:\d+)?\/[a-zA-Z0-9_.,!=\-\/]+$/,S=/\/cb=/g,E=/\/\//g;g.m=function(e,t,n,r){return(e=e[0])||M("missing_hint"),"https://apis.google.com"+function(e,t,n,r){e=T(e),k.test(n)||M("invalid_callback"),t=x(t),r=r&&r.length?x(r):null;var o=function(e){return encodeURIComponent(e).replace(/%2C/g,",")};return[encodeURIComponent(e.pathPrefix).replace(/%2C/g,",").replace(/%2F/g,"/"),"/k=",o(e.version),"/m=",o(t),r?"/exm="+o(r):"","/rt=j/sv=1/d=1/ed=1",e.a?"/am="+o(e.a):"",e.c?"/rs="+o(e.c):"",e.f?"/t="+o(e.f):"","/cb=",o(n)].join("")}(e,t,n,r)};var C=decodeURI("%73cript"),H=/^[-+_0-9\/A-Za-z]+={0,2}$/,O=function(e,t){for(var n=[],r=0;r<e.length;++r){var o,a=e[r];if(o=a){e:{for(o=0;o<t.length;o++)if(t[o]===a)break e;o=-1}o=0>o}o&&n.push(a)}return n},P=function(){var t=e.nonce;return void 0!==t?t&&t===String(t)&&t.match(H)?t:e.nonce=null:n.querySelector&&(t=n.querySelector("script[nonce]"))?(t=t.nonce||t.getAttribute("nonce")||"")&&t===String(t)&&t.match(H)?e.nonce=t:e.nonce=null:null},N=function(e){var t=n.createElement(C);t.setAttribute("src",e),null!==(e=P())&&t.setAttribute("nonce",e),t.async="true",(e=n.getElementsByTagName(C)[0])?e.parentNode.insertBefore(t,e):(n.head||n.body||n.documentElement).appendChild(t)},A=function(t,n){var r=n||{};"function"==typeof n&&((r={}).callback=n),function(e,t){var n=t&&t._c;if(n)for(var r=0;r<v.length;r++){var o=v[r][0],a=v[r][1];a&&Object.prototype.hasOwnProperty.call(n,o)&&a(n[o],e,t)}}(t,r),n=t?t.split(":"):[];var o=r.h||function(){var e=d();if(!e)throw Error("Bad hint");return e}(),a=s(e,"ah",u());if(a["::"]&&n.length){t=[];for(var i=null;i=n.shift();){var l=i.split(".");l=a[i]||a[l[1]&&"ns:"+l[0]||""]||o;var c=t.length&&t[t.length-1]||null,f=c;c&&c.hint==l||(f={hint:l,b:[]},t.push(f)),f.b.push(i)}var m=t.length;if(1<m){var _=r.callback;_&&(r.callback=function(){0==--m&&_()})}for(;n=t.shift();)F(n.b,r,n.hint)}else F(n||[],r,o)},F=function(r,o,i){r=function(e){e=e.sort();for(var t=[],n=void 0,r=0;r<e.length;r++){var o=e[r];o!=n&&t.push(o),n=o}return t}(r)||[];var f=o.callback,m=o.config,_=o.timeout,h=o.ontimeout,y=o.onerror,v=void 0;"function"==typeof y&&(v=y);var b=null,L=!1;if(_&&!h||!_&&h)throw"Timeout requires both the timeout parameter and ontimeout parameter to be set";y=s(c(i),"r",[]).sort();var w=s(c(i),"L",[]).sort(),k=[].concat(y),Y=function(n,r){if(L)return 0;t.clearTimeout(b),w.push.apply(w,T);var o=((l||{}).config||{}).update;if(o?o(m):m&&s(e,"cu",[]).push(m),r){p("me0",n,k);try{!function(e,t,n){I(function(){var n=t===d()?s(l,"_",u()):u();n=s(c(t),"_",n),e(n)},n)}(r,i,v)}finally{p("me1",n,k)}}return 1};0<_&&(b=t.setTimeout(function(){L=!0,h()},_));var T=O(r,w);if(T.length){T=O(r,y);var x=s(e,"CP",[]),D=x.length;if(x[D]=function(t){if(!t)return 0;p("ml1",T,k);var n=function(n){x[D]=null,Y(T,t)&&function(t){var n=s(e,"PQ",[]);e.PQ=[];var r=n.length;if(0===r)t();else for(var o=0,a=function(){++o===r&&t()},i=0;i<r;i++)n[i](a)}(function(){f&&f(),n()})},r=function(){var e=x[D+1];e&&e()};0<D&&x[D-1]?x[D]=function(){n(r)}:n(r)},T.length){var H="loaded_"+e.I++;l[H]=function(e){x[D](e),l[H]=null},r=function(e,t,n,r){var o=e.split(";"),a=o.shift(),i=g[a],s=null;return i?s=i(o,t,n,r):M("no hint processor for: "+a),s||M("failed to generate load url"),n=(t=s).match(E),(r=t.match(S))&&1===r.length&&j.test(t)&&n&&1===n.length||M("failed sanity: "+e),s}(i,T,"gapi."+H,y),y.push.apply(y,T),p("ml0",T,k),o.sync||t.___gapisync?function(e){if("loading"!=n.readyState)N(e);else{var t=P(),r="";null!==t&&(r=' nonce="'+t+'"'),n.write("<"+C+' src="'+encodeURI(e)+'"'+r+"></"+C+">")}}(r):N(r)}else x[D](a)}else Y(T)&&f&&f()},I=function(t,n){if(e.hee&&0<e.hel)try{return t()}catch(t){n&&n(t),e.hel--,A("debug_error",function(){try{window.___jsl.hefn(t)}catch(e){throw t}})}else try{return t()}catch(e){throw n&&n(e),e}};l.load=function(e,t){return I(function(){return A(e,t)})},m.bs0=window.gapi._bs||(new Date).getTime(),h("bs0"),m.bs1=(new Date).getTime(),h("bs1"),delete window.gapi._bs}.call(void 0),o.load("",{callback:window.gapi_onload,_c:{jsl:{ci:{deviceType:"desktop","oauth-flow":{authUrl:"https://accounts.google.com/o/oauth2/auth",proxyUrl:"https://accounts.google.com/o/oauth2/postmessageRelay",disableOpt:!0,idpIframeUrl:"https://accounts.google.com/o/oauth2/iframe",usegapi:!1},debug:{reportExceptionRate:.05,forceIm:!1,rethrowException:!1,host:"https://apis.google.com"},enableMultilogin:!0,"googleapis.config":{auth:{useFirstPartyAuthV2:!0}},isPlusUser:!0,inline:{css:1},disableRealtimeCallback:!1,drive_share:{skipInitCommand:!0},csi:{rate:.01},client:{cors:!1},isLoggedIn:!0,signInDeprecation:{rate:0},include_granted_scopes:!0,llang:"ru",iframes:{ytsubscribe:{url:"https://www.youtube.com/subscribe_embed?usegapi=1"},plus_share:{params:{url:""},url:":socialhost:/:session_prefix::se:_/+1/sharebutton?plusShare=true&usegapi=1"},":source:":"3p",playemm:{url:"https://play.google.com/work/embedded/search?usegapi=1&usegapi=1"},partnersbadge:{url:"https://www.gstatic.com/partners/badge/templates/badge.html?usegapi=1"},dataconnector:{url:"https://dataconnector.corp.google.com/:session_prefix:ui/widgetview?usegapi=1"},shortlists:{url:""},plus_followers:{params:{url:""},url:":socialhost:/_/im/_/widget/render/plus/followers?usegapi=1"},post:{params:{url:""},url:":socialhost:/:session_prefix::im_prefix:_/widget/render/post?usegapi=1"},signin:{params:{url:""},url:":socialhost:/:session_prefix:_/widget/render/signin?usegapi=1",methods:["onauth"]},donation:{url:"https://onetoday.google.com/home/donationWidget?usegapi=1"},plusone:{params:{count:"",size:"",url:""},url:":socialhost:/:session_prefix::se:_/+1/fastbutton?usegapi=1"},":im_socialhost:":"https://plus.googleapis.com",backdrop:{url:"https://clients3.google.com/cast/chromecast/home/widget/backdrop?usegapi=1"},visibility:{params:{url:""},url:":socialhost:/:session_prefix:_/widget/render/visibility?usegapi=1"},additnow:{url:"https://apis.google.com/additnow/additnow.html?usegapi=1",methods:["launchurl"]},":signuphost:":"https://plus.google.com",community:{url:":ctx_socialhost:/:session_prefix::im_prefix:_/widget/render/community?usegapi=1"},plus:{url:":socialhost:/:session_prefix:_/widget/render/badge?usegapi=1"},commentcount:{url:":socialhost:/:session_prefix:_/widget/render/commentcount?usegapi=1"},zoomableimage:{url:"https://ssl.gstatic.com/microscope/embed/"},appfinder:{url:"https://gsuite.google.com/:session_prefix:marketplace/appfinder?usegapi=1"},person:{url:":socialhost:/:session_prefix:_/widget/render/person?usegapi=1"},savetodrive:{url:"https://drive.google.com/savetodrivebutton?usegapi=1",methods:["save"]},page:{url:":socialhost:/:session_prefix:_/widget/render/page?usegapi=1"},card:{url:":socialhost:/:session_prefix:_/hovercard/card"},youtube:{params:{location:["search","hash"]},url:":socialhost:/:session_prefix:_/widget/render/youtube?usegapi=1",methods:["scroll","openwindow"]},plus_circle:{params:{url:""},url:":socialhost:/:session_prefix::se:_/widget/plus/circle?usegapi=1"},rbr_s:{params:{url:""},url:":socialhost:/:session_prefix::se:_/widget/render/recobarsimplescroller"},udc_webconsentflow:{params:{url:""},url:"https://myaccount.google.com/webconsent?usegapi=1"},savetoandroidpay:{url:"https://androidpay.google.com/a/widget/save"},blogger:{params:{location:["search","hash"]},url:":socialhost:/:session_prefix:_/widget/render/blogger?usegapi=1",methods:["scroll","openwindow"]},evwidget:{params:{url:""},url:":socialhost:/:session_prefix:_/events/widget?usegapi=1"},surveyoptin:{url:"https://www.google.com/shopping/customerreviews/optin?usegapi=1"},":socialhost:":"https://apis.google.com",hangout:{url:"https://talkgadget.google.com/:session_prefix:talkgadget/_/widget"},":gplus_url:":"https://plus.google.com",rbr_i:{params:{url:""},url:":socialhost:/:session_prefix::se:_/widget/render/recobarinvitation"},share:{url:":socialhost:/:session_prefix::im_prefix:_/widget/render/share?usegapi=1"},comments:{params:{location:["search","hash"]},url:":socialhost:/:session_prefix:_/widget/render/comments?usegapi=1",methods:["scroll","openwindow"]},autocomplete:{params:{url:""},url:":socialhost:/:session_prefix:_/widget/render/autocomplete"},ratingbadge:{url:"https://www.google.com/shopping/customerreviews/badge?usegapi=1"},appcirclepicker:{url:":socialhost:/:session_prefix:_/widget/render/appcirclepicker"},follow:{url:":socialhost:/:session_prefix:_/widget/render/follow?usegapi=1"},sharetoclassroom:{url:"https://www.gstatic.com/classroom/sharewidget/widget_stable.html?usegapi=1"},ytshare:{params:{url:""},url:":socialhost:/:session_prefix:_/widget/render/ytshare?usegapi=1"},family_creation:{params:{url:""},url:"https://families.google.com/webcreation?usegapi=1&usegapi=1"},configurator:{url:":socialhost:/:session_prefix:_/plusbuttonconfigurator?usegapi=1"},savetowallet:{url:"https://androidpay.google.com/a/widget/save"}}},h:"m;/_/scs/apps-static/_/js/k=oz.gapi.ru.LYrKPFA-YbQ.O/m=__features__/am=QQE/rt=j/d=1/rs=AGLTcCPiH_dW25lS8VBcXxJ8IpesUl5wjQ",u:"https://apis.google.com/js/api.js",hee:!0,fp:"cdd680364a929662b7ba6913482e2c18f9c5dda8",dpo:!1},fp:"cdd680364a929662b7ba6913482e2c18f9c5dda8",annotation:["interactivepost","recobar","signin2","autocomplete","profile"],bimodal:["signin","share"]}})},"./source/lib/google_calendar3.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.handleClientLoad=function(){gapi.load("client:auth2",h)};var r,o=n("./source/lib/store/actions.js"),a=n("./node_modules/moment/moment.js"),i=(r=a)&&r.__esModule?r:{default:r},s=n("./source/lib/store/index.js");var u="365383693887-vdo07nrbep44ctcpg2hgrn6dbqnnqbcs.apps.googleusercontent.com",l="AIzaSyAef4uippRgAFbtPz4cfSBKupCt9gZ7KHM",d=["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"],c="https://www.googleapis.com/auth/calendar.readonly",f=document.getElementById("authorize-button"),m=document.getElementById("signout-button"),_=document.getElementById("authorize-text");function h(){gapi.client.init({apiKey:l,clientId:u,discoveryDocs:d,scope:c}).then(function(){gapi.auth2.getAuthInstance().isSignedIn.listen(p),p(gapi.auth2.getAuthInstance().isSignedIn.get()),f.onclick=y,m.onclick=g})}function p(e){e?(f.style.display="none",m.style.display="block",_.style.display="none",s.store.getState().googleAuth?console.log(s.store.getState().googleAuth):gapi.client.calendar.events.list({calendarId:"primary",timeMin:(new Date).toISOString(),showDeleted:!1,singleEvents:!0,maxResults:10,orderBy:"startTime"}).then(function(e){var t=e.result.items;if(t.length>0){for(var n=0;n<t.length;n++){var r={EVENT_START:(0,i.default)(t[n].start.dateTime).format("YYYY-MM-DD"),EVENT_NAME:t[n].summary,EVENT_DESCRIPTION:"Null",EVENT_COLOR:"#4cd600",EVENT_TYPE:"Google event",EVENT_END:(0,i.default)(t[n].end.dateTime).format("YYYY-MM-DD"),eventID:t[n].id};s.storeGoogle.dispatch((0,o._tasks)(r))}s.store.dispatch({type:"GOOGLE_AUTH",value:!0}),console.log(s.store.getState().googleAuth)}else alert("No upcoming events found.")})):(f.style.display="block",m.style.display="none",_.style.display="block",s.store.dispatch({type:"GOOGLE_AUTH",value:!1}),s.storeGoogle.dispatch({type:"REMOVE_TASK"}))}function y(e){gapi.auth2.getAuthInstance().signIn()}function g(e){gapi.auth2.getAuthInstance().signOut()}},"./source/lib/index.js":function(e,t,n){"use strict";var r=s(n("./node_modules/react/index.js")),o=s(n("./node_modules/react-dom/index.js")),a=(n("./node_modules/react-redux/es/index.js"),s(n("./source/lib/UI/calendar.js"))),i=(s(n("./source/styles/style.scss")),s(n("./source/styles/taskman.css")),n("./source/lib/google_calendar3.js"));function s(e){return e&&e.__esModule?e:{default:e}}o.default.render(r.default.createElement(a.default,null),document.getElementById("root")),n("./source/lib/api.js"),(0,i.handleClientLoad)()},"./source/lib/logic/factory.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.recursion=t.createEmptyDay=t.dayComponentSort=t.dayTaskmanSort=t.nextState=t.helperComponent=t.validationEndingDate=t.dataControl=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&s.return&&s.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.timeCalculation=_,t.substrateData=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=(0,i.default)().add(e,"month").endOf("month").format("YYYY-MM-DD"),n=(0,i.default)().add(e,"month").startOf("month").format("YYYY-MM-DD");return{dataEndOf:t,dataStartOf:n}},t.oneDayMore=function(e){return(0,i.default)(e).add(1,"days").format("YYYY-MM-DD")},t.createLabelEvent=function(e){return e&&e.length<5&&e.length>0?e.map(function(e,t){return a.default.createElement("div",{key:t,className:"label",style:{background:e,width:40-10*t+"px",height:40-10*t+"px"}})}):!!(e&&e.length>4)&&e.map(function(e,t){return a.default.createElement("div",{key:t,className:"label",style:{background:e,width:"4px",height:"4px",top:0,bottom:"initial",left:4*t+"px",right:"initial"}})})};var a=d(n("./node_modules/react/index.js")),i=d(n("./node_modules/moment/moment.js")),s=n("./source/lib/store/index.js"),u=n("./source/lib/store/actions.js"),l=n("./source/lib/UI/constants.js");function d(e){return e&&e.__esModule?e:{default:e}}function c(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var f=t.dataControl=function(){var e=document.getElementById("controlElement"),t=s.store.getState().panelState.state;e&&(("INPUT"===e.tagName||"TEXTAREA"===e.tagName)&&s.store.dispatch((0,u._tempTask)(JSON.parse('{"'+t+'" : "'+e.value+'"}'))),"DIV"===e.tagName&&s.store.dispatch((0,u._tempTask)(JSON.parse('{"'+t+'" : "'+e.dataset.value+'"}')))),s.store.dispatch((0,u._panelButton)(!1)),s.store.dispatch((0,u._panelState)(m()))},m=(t.validationEndingDate=function(e,t,n){for(var r=+e.split("-")[0],o=[],a=[],s=[],u=0;u<5;u++)o[u]=r+u;r=+t.year||+e.split("-")[0];var l=+t.month||+e.split("-")[1];if(r===+e.split("-")[0])for(var d=0;d<=12-+e.split("-")[1];d++)a.push(+e.split("-")[1]+d);else for(var c=1;c<=12;c++)a.push(c);var f=+(0,i.default)().set("year",r).set("month",l-1).endOf("month").format("DD"),m=+e.split("-")[2];if(r===+e.split("-")[0]&&l<=+e.split("-")[1])for(var _=0;_<=f-m;_++)s.push(m+_);else for(var h=1;h<=f;h++)s.push(h);switch(n){case"year":return o;case"month":return a;case"day":return s;default:return[null,null,null]}},t.helperComponent=function(e,t,n){e.length>1&&!0!==t?s.store.dispatch((0,u._panelButton)(!0)):e.length<2&&!1!==t&&s.store.dispatch((0,u._panelButton)(!1)),13!==n.which&&13!==n.keyCode||f()},t.nextState=function(){var e=l.orderFormElements.length-1,t=s.store.getState().panelState.state||l.orderFormElements[0],n=l.orderFormElements.indexOf(t)+1>e?0:l.orderFormElements.indexOf(t)+1;return l.orderFormElements[n]});function _(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=(0,i.default)().add(e,"month"),n=t.format("YYYY-MM-DD"),r=t.endOf("month").format("DD"),o=t.date(1).isoWeekday()-1;return{data:t,dayWeek:["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],now:n,firstWeek:o,lastDay:r,set:function(e){return t.set("date",e).format("YYYY-MM-DD")}}}t.dayTaskmanSort=function(e){var t=s.storeGoogle.getState().tasks.length>0?[].concat(c(s.storeEvent.getState().tasks),c(s.storeGoogle.getState().tasks)):s.storeEvent.getState().tasks,n=h(_(e).lastDay,[],function(t){return _(e).set(t)});return t.map(function(e){var t=n.filter(function(t){return(0,i.default)(t).isBetween(e.data.start,e.data.end,null,"[]")}),a=o(t,1)[0],s=t.reverse(),u=o(s,1)[0];return void 0!==a&&r({},e,{data:{start:a,end:u}})}).filter(function(e){return!1!==e})},t.dayComponentSort=function(e){var t=h(_(e).lastDay,[],function(t){return _(e).set(t)}),n=s.storeGoogle.getState().tasks.length>0?[].concat(c(s.storeEvent.getState().tasks),c(s.storeGoogle.getState().tasks)):s.storeEvent.getState().tasks;return t.map(function(e){var t=n.filter(function(t){return(0,i.default)(e).isBetween(t.data.start,t.data.end,null,"[]")});return t.length>0?{data:e,events:t}:{data:e,events:null}})},t.createEmptyDay=function(e){var t=_(e).firstWeek;if(7!==t){return h(t,[],function(e){return a.default.createElement("div",{key:"empty-"+e,className:"emptyDay"})})||!1}};var h=t.recursion=function e(t,n,r){return t<0?0:0===t?n.reverse():(n.push(r(t)),e(t-1,n,r))}},"./source/lib/store/actions.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t._panelState=t._panelButton=t._tempTask=t._modalHidden=t._tasks=void 0;var r,o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=n("./source/lib/store/constants.js"),i=(r=a)&&r.__esModule?r:{default:r},s=n("./node_modules/uuid/index.js"),u=n("./source/lib/UI/constants.js");t._tasks=function(e){console.log(e);var t=e.EVENT_START,n=e.EVENT_NAME,r=e.EVENT_DESCRIPTION,o=e.EVENT_COLOR,a=e.EVENT_TYPE,u=e.EVENT_END,l=e.eventID||null;return{type:i.default.SET_TASK,value:{data:{start:t,end:u},type:a,details:r,name:n,id:l||(0,s.v4)(),color:o}}},t._modalHidden=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){for(var n=0;n<t.length;n++)"boolean"!=typeof t[n]||!0!==t[n]&&!1!==t[n]?null!==t[n]&&"object"===o(t[n])&&e({type:i.default.MODAL_LIST,value:t[n]}):e({type:i.default.MODAL_HIDDEN,value:t[n]})}},t._tempTask=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){t.filter(function(t){var n=Object.getOwnPropertyNames(t)[0];u.orderFormElements.includes(n)?e({type:i.default.TEMP_TASK,value:t}):console.log("_tempTask - not arguments")})}},t._panelButton=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){for(var n=0;n<t.length;n++)switch(t[n]){case!0:e({type:i.default.PANEL_BUTTON,value:!0});break;case!1:e({type:i.default.PANEL_BUTTON,value:!1});break;default:return console.log("_panelButton - not arguments")}}},t._panelState=function(e){return function(t){u.orderFormElements.includes(e)?t({type:i.default.PANEL_STATE,value:e}):console.log("_panelState - not arguments")}}},"./source/lib/store/constants.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default={MODAL_LIST:"MODAL_LIST",MODAL_HIDDEN:"MODAL_HIDDEN",PANEL_STATE:"PANEL_STATE",PANEL_BUTTON:"PANEL_BUTTON",TEMP_TASK:"TEMP_TASK",SET_TASK:"SET_TASK",REMOVE_TASK:"REMOVE_TASK",GOOGLE_AUTH:"GOOGLE_AUTH"}},"./source/lib/store/index.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.storeGoogle=t.storeEvent=t.store=void 0;var r=n("./node_modules/redux/es/index.js"),o=n("./source/lib/store/reducers.js"),a=l(n("./source/data/initial_state.json")),i=l(n("./source/data/base_events.json")),s=l(n("./source/data/base_google.json")),u=l(n("./node_modules/redux-thunk/lib/index.js"));function l(e){return e&&e.__esModule?e:{default:e}}var d=function(e){return function(t){return function(n){var r;return console.groupCollapsed("dispatching",n.type),console.log("prev state",e.getState()),console.log("action",n),r=t(n),console.log("next state",e.getState()),console.groupEnd(),r}}},c=function(e){return function(t){return function(n){var r=t(n),o=e.getState().storagName;return localStorage[o]=JSON.stringify(e.getState()),r}}},f=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:a.default,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"redux-store";return(0,r.applyMiddleware)(u.default,d,c)(r.createStore)((0,r.combineReducers)({tasks:o.tasks,modalHidden:o.modalHidden,googleAuth:o.googleAuth,storagName:function(){return arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}},panelState:o.panelState,tempTask:o.tempTask}),localStorage[t]?JSON.parse(localStorage[t]):e)};t.store=f(),t.storeEvent=f(i.default,i.default.storagName),t.storeGoogle=f(s.default,s.default.storagName)},"./source/lib/store/reducers.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tempTask=t.panelState=t.modalHidden=t.googleAuth=t.tasks=void 0;var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=n("./source/lib/store/constants.js"),i=(r=a)&&r.__esModule?r:{default:r};t.tasks=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];switch(t.type){case i.default.SET_TASK:var n=t.value;return[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(e),[n]);case i.default.REMOVE_TASK:return!!t.value&&e.filter(function(e){return e.id!==t.value});default:return e}},t.googleAuth=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];switch(t.type){case i.default.GOOGLE_AUTH:return t.value;default:return e}},t.modalHidden=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];switch(t.type){case i.default.MODAL_HIDDEN:return o({},e,{hidden:t.value});case i.default.MODAL_LIST:return o({},e,t.value);default:return e}},t.panelState=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];switch(t.type){case i.default.PANEL_STATE:return o({},e,{state:t.value});case i.default.PANEL_BUTTON:return o({},e,{checkMark:t.value});default:return e}},t.tempTask=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];switch(t.type){case i.default.TEMP_TASK:var n=t.value;return console.log(n),o({},e,n);default:return e}}},"./source/styles/style.scss":function(e,t){},"./source/styles/taskman.css":function(e,t){},0:function(e,t,n){e.exports=n("./source/lib/index.js")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,